/* Generated by Cython 3.0.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "HAVE_ALIGNED_NEW",
                null
            ],
            [
                "ROCKSDB_PLATFORM_POSIX",
                null
            ],
            [
                "ROCKSDB_LIB_IO_POSIX",
                null
            ],
            [
                "OS_MACOSX",
                null
            ],
            [
                "SNAPPY",
                null
            ],
            [
                "ZLIB",
                null
            ],
            [
                "BZIP2",
                null
            ],
            [
                "LZ4",
                null
            ],
            [
                "ZSTD",
                null
            ],
            [
                "ROCKSDB_BACKTRACE",
                null
            ],
            [
                "HAVE_SSE42",
                null
            ],
            [
                "HAVE_PCLMUL",
                null
            ],
            [
                "HAVE_BMI",
                null
            ],
            [
                "HAVE_UINT128_EXTENSION",
                null
            ],
            [
                "ROCKSDB_SUPPORT_THREAD_LOCAL",
                null
            ],
            [
                "HAVE_FULLFSYNC",
                null
            ]
        ],
        "depends": [
            "/usr/local/include/rocksdb/advanced_options.h",
            "/usr/local/include/rocksdb/cache.h",
            "/usr/local/include/rocksdb/compaction_filter.h",
            "/usr/local/include/rocksdb/comparator.h",
            "/usr/local/include/rocksdb/concurrent_task_limiter.h",
            "/usr/local/include/rocksdb/db.h",
            "/usr/local/include/rocksdb/env.h",
            "/usr/local/include/rocksdb/filter_policy.h",
            "/usr/local/include/rocksdb/memtablerep.h",
            "/usr/local/include/rocksdb/merge_operator.h",
            "/usr/local/include/rocksdb/options.h",
            "/usr/local/include/rocksdb/slice.h",
            "/usr/local/include/rocksdb/slice_transform.h",
            "/usr/local/include/rocksdb/statistics.h",
            "/usr/local/include/rocksdb/status.h",
            "/usr/local/include/rocksdb/table.h",
            "/usr/local/include/rocksdb/table_properties.h",
            "/usr/local/include/rocksdb/types.h",
            "/usr/local/include/rocksdb/universal_compaction.h",
            "rocksdb/cpp/comparator_wrapper.hpp",
            "rocksdb/cpp/filter_policy_wrapper.hpp",
            "rocksdb/cpp/memtable_factories.hpp",
            "rocksdb/cpp/merge_operator_wrapper.hpp",
            "rocksdb/cpp/slice_transform_wrapper.hpp",
            "rocksdb/cpp/utils.hpp"
        ],
        "extra_compile_args": [
            "-std=c++11",
            "-O3",
            "-Wall",
            "-Wextra",
            "-Wconversion",
            "-fno-strict-aliasing",
            "-fno-rtti",
            "-mmacosx-version-min=10.9",
            "-stdlib=libc++"
        ],
        "include_dirs": [
            "rocksdb",
            "/usr/local/include"
        ],
        "language": "c++",
        "libraries": [
            "rocksdb"
        ],
        "library_dirs": [
            "/usr/local/lib"
        ],
        "name": "rocksdb._rocksdb",
        "sources": [
            "rocksdb/_rocksdb.pyx"
        ]
    },
    "module_name": "rocksdb._rocksdb"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_2" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030002F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        PyObject *version_info; // borrowed
        PyObject *py_minor_version = NULL;
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11; // we don't yet need to distinguish between versions > 11
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        Py_XDECREF(py_minor_version);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);  // we don't have access to __pyx_empty_bytes here
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__rocksdb___rocksdb
#define __PYX_HAVE_API__rocksdb___rocksdb
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <deque>
#include <vector>
#include <stdio.h>
#include "pythread.h"
#include <stdint.h>
#include <memory>
#include "rocksdb/slice.h"
#include "rocksdb/env.h"
#include "rocksdb/comparator.h"
#include "cpp/comparator_wrapper.hpp"
#include "rocksdb/merge_operator.h"
#include "cpp/merge_operator_wrapper.hpp"
#include "rocksdb/db.h"
#include "rocksdb/slice_transform.h"
#include "cpp/slice_transform_wrapper.hpp"
#include "rocksdb/cache.h"
#include "rocksdb/filter_policy.h"
#include "cpp/filter_policy_wrapper.hpp"
#include "rocksdb/table.h"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include "rocksdb/status.h"
#include "rocksdb/statistics.h"
#include "rocksdb/memtablerep.h"
#include "cpp/memtable_factories.hpp"
#include "rocksdb/universal_compaction.h"
#include "rocksdb/types.h"
#include "rocksdb/table_properties.h"
#include "rocksdb/advanced_options.h"
#include "rocksdb/compaction_filter.h"
#include "rocksdb/concurrent_task_limiter.h"
#include "rocksdb/options.h"
#include "rocksdb/iterator.h"
#include "rocksdb/write_batch.h"
#include "cpp/write_batch_iter_helper.hpp"
#include "rocksdb/convenience.h"
#include "rocksdb/utilities/backupable_db.h"
#include "rocksdb/utilities/checkpoint.h"
#include "rocksdb/utilities/stackable_db.h"
#include "rocksdb/utilities/transaction_db.h"
#include "cpp/utils.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "rocksdb/_rocksdb.pyx",
  "<stringsource>",
  "contextvars.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy;
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyCache;
struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache;
struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform;
struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType;
struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri;
struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle;
struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle;
struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions;
struct __pyx_obj_7rocksdb_8_rocksdb_Options;
struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions;
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch;
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_DB;
struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB;
struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot;
struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint;
struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "comparator.pxd":13
 *     cdef extern const Comparator* BytewiseComparator() nogil except +
 * 
 * ctypedef int (*compare_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef int (*__pyx_t_7rocksdb_10comparator_compare_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &);

/* "merge_operator.pxd":12
 *         pass
 * 
 * ctypedef cpp_bool (*merge_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     const Slice&,
 */
typedef bool (*__pyx_t_7rocksdb_14merge_operator_merge_func)(void *, rocksdb::Slice const &, rocksdb::Slice const *, rocksdb::Slice const &, std::string *, rocksdb::Logger *);

/* "merge_operator.pxd":20
 *     Logger*)
 * 
 * ctypedef cpp_bool (*full_merge_func)(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */
typedef bool (*__pyx_t_7rocksdb_14merge_operator_full_merge_func)(void *, rocksdb::Slice const &, rocksdb::Slice const *, std::deque<std::string>  const &, std::string *, rocksdb::Logger *);

/* "merge_operator.pxd":28
 *     Logger* logger)
 * 
 * ctypedef cpp_bool (*partial_merge_func)(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */
typedef bool (*__pyx_t_7rocksdb_14merge_operator_partial_merge_func)(void *, rocksdb::Slice const &, rocksdb::Slice const &, rocksdb::Slice const &, std::string *, rocksdb::Logger *);

/* "slice_transform.pxd":17
 *         size_t) nogil except+
 * 
 * ctypedef Slice (*transform_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef rocksdb::Slice (*__pyx_t_7rocksdb_15slice_transform_transform_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &);

/* "slice_transform.pxd":23
 *     const Slice&)
 * 
 * ctypedef cpp_bool (*in_domain_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef bool (*__pyx_t_7rocksdb_15slice_transform_in_domain_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &);

/* "slice_transform.pxd":29
 *     const Slice&)
 * 
 * ctypedef cpp_bool (*in_range_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef bool (*__pyx_t_7rocksdb_15slice_transform_in_range_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &);

/* "filter_policy.pxd":16
 *     cdef extern const FilterPolicy* NewBloomFilterPolicy(int) nogil except+
 * 
 * ctypedef void (*create_filter_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef void (*__pyx_t_7rocksdb_13filter_policy_create_filter_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const *, int, std::string *);

/* "filter_policy.pxd":24
 *     string*)
 * 
 * ctypedef cpp_bool (*key_may_match_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef bool (*__pyx_t_7rocksdb_13filter_policy_key_may_match_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &);

/* "rocksdb/_rocksdb.pyx":67
 * import weakref
 * 
 * ctypedef const filter_policy.FilterPolicy ConstFilterPolicy             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cpp/utils.hpp" namespace "py_rocks":
 */
typedef rocksdb::FilterPolicy const __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy;

/* "rocksdb/_rocksdb.pyx":140
 * ## Here comes the stuff for the comparator
 * @cython.internal
 * cdef class PyComparator(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *__pyx_vtab;
};


/* "rocksdb/_rocksdb.pyx":151
 * 
 * @cython.internal
 * cdef class PyGenericComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef comparator.ComparatorWrapper* comparator_ptr
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator __pyx_base;
  py_rocks::ComparatorWrapper *comparator_ptr;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":180
 * 
 * @cython.internal
 * cdef class PyBytewiseComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator __pyx_base;
  rocksdb::Comparator const *comparator_ptr;
};


/* "rocksdb/_rocksdb.pyx":223
 * ## Here comes the stuff for the filter policy
 * @cython.internal
 * cdef class PyFilterPolicy(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_vtab;
};


/* "rocksdb/_rocksdb.pyx":234
 * 
 * @cython.internal
 * cdef class PyGenericFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[filter_policy.FilterPolicyWrapper] policy
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
  std::shared_ptr<py_rocks::FilterPolicyWrapper>  policy;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":293
 * 
 * @cython.internal
 * cdef class PyBloomFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  policy;
};


/* "rocksdb/_rocksdb.pyx":334
 * ## Here comes the stuff for the merge operator
 * @cython.internal
 * cdef class PyMergeOperator(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[merge_operator.MergeOperator] merge_op
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_vtab;
  std::shared_ptr<rocksdb::MergeOperator>  merge_op;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":471
 * #### Here comes the Cache stuff
 * @cython.internal
 * cdef class PyCache(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return shared_ptr[cache.Cache]()
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyCache {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *__pyx_vtab;
};


/* "rocksdb/_rocksdb.pyx":476
 * 
 * @cython.internal
 * cdef class PyLRUCache(PyCache):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache __pyx_base;
  std::shared_ptr<rocksdb::Cache>  cache_ob;
};


/* "rocksdb/_rocksdb.pyx":493
 * ### Here comes the stuff for SliceTransform
 * @cython.internal
 * cdef class PySliceTransform(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[slice_transform.SliceTransform] transfomer
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *__pyx_vtab;
  std::shared_ptr<rocksdb::SliceTransform>  transfomer;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":575
 * ## Here are the TableFactories
 * @cython.internal
 * cdef class PyTableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *__pyx_vtab;
  std::shared_ptr<rocksdb::TableFactory>  factory;
};


/* "rocksdb/_rocksdb.pyx":584
 *         pass
 * 
 * cdef class BlockBasedTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     cdef PyFilterPolicy py_filter_policy
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *py_filter_policy;
};


/* "rocksdb/_rocksdb.pyx":678
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 * cdef class PlainTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":711
 * ### Here are the MemtableFactories
 * @cython.internal
 * cdef class PyMemtableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_vtab;
  std::shared_ptr<rocksdb::MemTableRepFactory>  factory;
};


/* "rocksdb/_rocksdb.pyx":717
 *         return self.factory
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 */
struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":721
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, count=0):
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 */
struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":725
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */
struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":738
 *                 skiplist_branching_factor))
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, bucket_count=50000):
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 */
struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":744
 * 
 * 
 * cdef class CompressionType(object):             # <<<<<<<<<<<<<<
 *     no_compression = u'no_compression'
 *     snappy_compression = u'snappy_compression'
 */
struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType {
  PyObject_HEAD
};


/* "rocksdb/_rocksdb.pyx":756
 *     disable_compression = u'disable_compression'
 * 
 * cdef class CompactionPri(object):             # <<<<<<<<<<<<<<
 *     by_compensated_size = u'by_compensated_size'
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 */
struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri {
  PyObject_HEAD
};


/* "rocksdb/_rocksdb.pyx":763
 * 
 * @cython.internal
 * cdef class _ColumnFamilyHandle:             # <<<<<<<<<<<<<<
 *     """ This is an internal class that we will weakref for safety """
 *     cdef db.ColumnFamilyHandle* handle
 */
struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_vtab;
  rocksdb::ColumnFamilyHandle *handle;
  PyObject *__weakref__;
  PyObject *weak_handle;
};


/* "rocksdb/_rocksdb.pyx":796
 *         return self.weak_handle
 * 
 * cdef class ColumnFamilyHandle:             # <<<<<<<<<<<<<<
 *     """ This represents a ColumnFamilyHandle """
 *     cdef object _ref
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_vtab;
  PyObject *_ref;
  PyObject *name;
  int id;
};


/* "rocksdb/_rocksdb.pyx":865
 * 
 * 
 * cdef class ColumnFamilyOptions(object):             # <<<<<<<<<<<<<<
 *     cdef options.ColumnFamilyOptions* copts
 *     cdef PyComparator py_comparator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions {
  PyObject_HEAD
  rocksdb::ColumnFamilyOptions *copts;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *py_comparator;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *py_merge_operator;
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *py_prefix_extractor;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *py_table_factory;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *py_memtable_factory;
  bool in_use;
};


/* "rocksdb/_rocksdb.pyx":1299
 *             self.copts.paranoid_file_checks = value
 * 
 * cdef class Options(ColumnFamilyOptions):             # <<<<<<<<<<<<<<
 *     cdef options.Options* opts
 *     cdef PyCache py_row_cache
 */
struct __pyx_obj_7rocksdb_8_rocksdb_Options {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions __pyx_base;
  rocksdb::Options *opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *py_row_cache;
};


/* "rocksdb/_rocksdb.pyx":1766
 *             self.opts.best_efforts_recovery = value
 * 
 * cdef class TransactionDBOptions(object):             # <<<<<<<<<<<<<<
 *     cdef transaction_db.TransactionDBOptions* opts
 *     cdef cpp_bool in_use
 */
struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions {
  PyObject_HEAD
  rocksdb::TransactionDBOptions *opts;
  bool in_use;
};


/* "rocksdb/_rocksdb.pyx":1862
 * cdef class WriteBatchIterator
 * 
 * cdef class WriteBatch(object):             # <<<<<<<<<<<<<<
 *     cdef db.WriteBatch* batch
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch {
  PyObject_HEAD
  rocksdb::WriteBatch *batch;
};


/* "rocksdb/_rocksdb.pyx":1860
 * 
 * # Forward declaration
 * cdef class WriteBatchIterator             # <<<<<<<<<<<<<<
 * 
 * cdef class WriteBatch(object):
 */
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator {
  PyObject_HEAD
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *batch;
  std::vector<py_rocks::RecordItemsHandler::BatchItem>  items;
  size_t pos;
};


/* "rocksdb/_rocksdb.pyx":1965
 * 
 * @cython.no_gc_clear
 * cdef class DB(object):             # <<<<<<<<<<<<<<
 *     cdef Options opts
 *     cdef db.DB* wrapped_db
 */
struct __pyx_obj_7rocksdb_8_rocksdb_DB {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *__pyx_vtab;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *opts;
  rocksdb::DB *wrapped_db;
  PyObject *cf_handles;
  PyObject *cf_options;
  std::vector<rocksdb::ColumnFamilyDescriptor>  column_family_descriptors;
  std::vector<rocksdb::ColumnFamilyHandle *>  column_family_handles;
  std::string db_path;
};


/* "rocksdb/_rocksdb.pyx":2678
 * 
 * @cython.no_gc_clear
 * cdef class TransactionDB(DB):             # <<<<<<<<<<<<<<
 *     cdef TransactionDBOptions tdb_opts
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB __pyx_base;
  struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *tdb_opts;
};


/* "rocksdb/_rocksdb.pyx":1852
 * 
 * # Forward declaration
 * cdef class Snapshot             # <<<<<<<<<<<<<<
 * 
 * cdef class KeysIterator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot {
  PyObject_HEAD
  rocksdb::Snapshot const *ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *db;
};


/* "rocksdb/_rocksdb.pyx":2752
 * 
 * @cython.internal
 * cdef class BaseIterator(object):             # <<<<<<<<<<<<<<
 *     cdef iterator.Iterator* ptr
 *     cdef DB db
 */
struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *__pyx_vtab;
  rocksdb::Iterator *ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *db;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *handle;
};


/* "rocksdb/_rocksdb.pyx":1854
 * cdef class Snapshot
 * 
 * cdef class KeysIterator             # <<<<<<<<<<<<<<
 * cdef class ValuesIterator
 * cdef class ItemsIterator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":1855
 * 
 * cdef class KeysIterator
 * cdef class ValuesIterator             # <<<<<<<<<<<<<<
 * cdef class ItemsIterator
 * cdef class ReversedIterator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":1856
 * cdef class KeysIterator
 * cdef class ValuesIterator
 * cdef class ItemsIterator             # <<<<<<<<<<<<<<
 * cdef class ReversedIterator
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":1857
 * cdef class ValuesIterator
 * cdef class ItemsIterator
 * cdef class ReversedIterator             # <<<<<<<<<<<<<<
 * 
 * # Forward declaration
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator {
  PyObject_HEAD
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *it;
};


/* "rocksdb/_rocksdb.pyx":2883
 * 
 * 
 * cdef class Checkpoint(object):             # <<<<<<<<<<<<<<
 *     cdef checkpoint.Checkpoint* checkpoint
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint {
  PyObject_HEAD
  rocksdb::Checkpoint *checkpoint;
};


/* "rocksdb/_rocksdb.pyx":2910
 * 
 * 
 * cdef class BackupEngine(object):             # <<<<<<<<<<<<<<
 *     cdef backup.BackupEngine* engine
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine {
  PyObject_HEAD
  rocksdb::BackupEngine *engine;
};



/* "rocksdb/_rocksdb.pyx":140
 * ## Here comes the stuff for the comparator
 * @cython.internal
 * cdef class PyComparator(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *);
  rocksdb::Comparator const *(*get_comparator)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;


/* "rocksdb/_rocksdb.pyx":151
 * 
 * @cython.internal
 * cdef class PyGenericComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef comparator.ComparatorWrapper* comparator_ptr
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericComparator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator;


/* "rocksdb/_rocksdb.pyx":180
 * 
 * @cython.internal
 * cdef class PyBytewiseComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBytewiseComparator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator;


/* "rocksdb/_rocksdb.pyx":223
 * ## Here comes the stuff for the filter policy
 * @cython.internal
 * cdef class PyFilterPolicy(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *);
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*get_policy)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;


/* "rocksdb/_rocksdb.pyx":234
 * 
 * @cython.internal
 * cdef class PyGenericFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[filter_policy.FilterPolicyWrapper] policy
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericFilterPolicy {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy;


/* "rocksdb/_rocksdb.pyx":293
 * 
 * @cython.internal
 * cdef class PyBloomFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBloomFilterPolicy {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy;


/* "rocksdb/_rocksdb.pyx":334
 * ## Here comes the stuff for the merge operator
 * @cython.internal
 * cdef class PyMergeOperator(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[merge_operator.MergeOperator] merge_op
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *);
  std::shared_ptr<rocksdb::MergeOperator>  (*get_operator)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator;


/* "rocksdb/_rocksdb.pyx":471
 * #### Here comes the Cache stuff
 * @cython.internal
 * cdef class PyCache(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return shared_ptr[cache.Cache]()
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache {
  std::shared_ptr<rocksdb::Cache>  (*get_cache)(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *__pyx_vtabptr_7rocksdb_8_rocksdb_PyCache;


/* "rocksdb/_rocksdb.pyx":476
 * 
 * @cython.internal
 * cdef class PyLRUCache(PyCache):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyLRUCache {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyLRUCache *__pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache;


/* "rocksdb/_rocksdb.pyx":493
 * ### Here comes the stuff for SliceTransform
 * @cython.internal
 * cdef class PySliceTransform(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[slice_transform.SliceTransform] transfomer
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *);
  std::shared_ptr<rocksdb::SliceTransform>  (*get_transformer)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *__pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform;


/* "rocksdb/_rocksdb.pyx":575
 * ## Here are the TableFactories
 * @cython.internal
 * cdef class PyTableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory {
  std::shared_ptr<rocksdb::TableFactory>  (*get_table_factory)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;


/* "rocksdb/_rocksdb.pyx":584
 *         pass
 * 
 * cdef class BlockBasedTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     cdef PyFilterPolicy py_filter_policy
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BlockBasedTableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory;


/* "rocksdb/_rocksdb.pyx":678
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 * cdef class PlainTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PlainTableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory;


/* "rocksdb/_rocksdb.pyx":711
 * ### Here are the MemtableFactories
 * @cython.internal
 * cdef class PyMemtableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory {
  std::shared_ptr<rocksdb::MemTableRepFactory>  (*get_memtable_factory)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;


/* "rocksdb/_rocksdb.pyx":717
 *         return self.factory
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_SkipListMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory;


/* "rocksdb/_rocksdb.pyx":721
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, count=0):
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_VectorMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory;


/* "rocksdb/_rocksdb.pyx":725
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashSkipListMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;


/* "rocksdb/_rocksdb.pyx":738
 *                 skiplist_branching_factor))
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, bucket_count=50000):
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashLinkListMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;


/* "rocksdb/_rocksdb.pyx":763
 * 
 * @cython.internal
 * cdef class _ColumnFamilyHandle:             # <<<<<<<<<<<<<<
 *     """ This is an internal class that we will weakref for safety """
 *     cdef db.ColumnFamilyHandle* handle
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb__ColumnFamilyHandle {
  PyObject *(*from_handle_ptr)(rocksdb::ColumnFamilyHandle *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_vtabptr_7rocksdb_8_rocksdb__ColumnFamilyHandle;


/* "rocksdb/_rocksdb.pyx":796
 *         return self.weak_handle
 * 
 * cdef class ColumnFamilyHandle:             # <<<<<<<<<<<<<<
 *     """ This represents a ColumnFamilyHandle """
 *     cdef object _ref
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle {
  PyObject *(*from_wrapper)(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *);
  rocksdb::ColumnFamilyHandle *(*get_handle)(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_vtabptr_7rocksdb_8_rocksdb_ColumnFamilyHandle;


/* "rocksdb/_rocksdb.pyx":1965
 * 
 * @cython.no_gc_clear
 * cdef class DB(object):             # <<<<<<<<<<<<<<
 *     cdef Options opts
 *     cdef db.DB* wrapped_db
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB {
  PyObject *(*post_init_steps)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, rocksdb::Status, struct __pyx_obj_7rocksdb_8_rocksdb_Options *);
  PyObject *(*setup_handles)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *);
  PyObject *(*inject_loggers)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, struct __pyx_obj_7rocksdb_8_rocksdb_Options *);
  rocksdb::ReadOptions (*build_read_opts)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, PyObject *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *__pyx_vtabptr_7rocksdb_8_rocksdb_DB;


/* "rocksdb/_rocksdb.pyx":2678
 * 
 * @cython.no_gc_clear
 * cdef class TransactionDB(DB):             # <<<<<<<<<<<<<<
 *     cdef TransactionDBOptions tdb_opts
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_TransactionDB {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_TransactionDB *__pyx_vtabptr_7rocksdb_8_rocksdb_TransactionDB;


/* "rocksdb/_rocksdb.pyx":2752
 * 
 * @cython.internal
 * cdef class BaseIterator(object):             # <<<<<<<<<<<<<<
 *     cdef iterator.Iterator* ptr
 *     cdef DB db
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator {
  PyObject *(*seek_to_first)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch);
  PyObject *(*seek_to_last)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch);
  PyObject *(*seek)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*seek_for_prev)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;


/* "rocksdb/_rocksdb.pyx":2832
 * 
 * @cython.internal
 * cdef class ItemsIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ItemsIterator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ItemsIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator;


/* "rocksdb/_rocksdb.pyx":2823
 * 
 * @cython.internal
 * cdef class ValuesIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         cdef Slice c_value
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ValuesIterator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ValuesIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator;


/* "rocksdb/_rocksdb.pyx":2812
 * 
 * @cython.internal
 * cdef class KeysIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_KeysIterator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_KeysIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg // no-op
    #define __Pyx_Arg_XDECREF_VARARGS(arg) // no-op - arg is borrowed
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg // no-op, __Pyx_Arg_FASTCALL is direct and this needs
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)  // no-op - arg was returned from array
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_2
#define __PYX_HAVE_RT_ImportType_proto_3_0_2
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_2(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_2(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_2 {
   __Pyx_ImportType_CheckSize_Error_3_0_2 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_2 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_2 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_2(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_2 check_size);
#endif

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self); /* proto*/
static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_comparator(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto*/
static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto*/
static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self); /* proto*/
static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_policy(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self); /* proto*/
static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto*/
static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::MergeOperator>  __pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_operator(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_7PyCache_get_cache(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_10PyLRUCache_get_cache(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::SliceTransform>  __pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_transformer(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static std::shared_ptr<rocksdb::TableFactory>  __pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_get_table_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_22BlockBasedTableFactory_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_f_7rocksdb_8_rocksdb_17PyMemtableFactory_get_memtable_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_from_handle_ptr(rocksdb::ColumnFamilyHandle *__pyx_v_handle); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_from_wrapper(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_real_handle); /* proto*/
static rocksdb::ColumnFamilyHandle *__pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_get_handle(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_2DB_post_init_steps(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, rocksdb::Status __pyx_v_st, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_2DB_setup_handles(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_2DB_inject_loggers(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts); /* proto*/
static rocksdb::ReadOptions __pyx_f_7rocksdb_8_rocksdb_2DB_build_read_opts(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_py_opts); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12KeysIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14ValuesIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_13ItemsIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self); /* proto*/

/* Module declarations from "cython" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.deque" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "libcpp" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "rocksdb.std_memory" */

/* Module declarations from "rocksdb" */

/* Module declarations from "rocksdb.slice_" */

/* Module declarations from "rocksdb.logger" */

/* Module declarations from "rocksdb.comparator" */

/* Module declarations from "rocksdb.merge_operator" */

/* Module declarations from "rocksdb.snapshot" */

/* Module declarations from "rocksdb.slice_transform" */

/* Module declarations from "rocksdb.cache" */

/* Module declarations from "rocksdb.filter_policy" */

/* Module declarations from "rocksdb.table_factory" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "rocksdb.status" */

/* Module declarations from "rocksdb.statistics" */

/* Module declarations from "rocksdb.memtablerep" */

/* Module declarations from "rocksdb.universal_compaction" */

/* Module declarations from "rocksdb.types" */

/* Module declarations from "rocksdb.table_properties" */

/* Module declarations from "rocksdb.advanced_options" */

/* Module declarations from "rocksdb.env" */

/* Module declarations from "rocksdb.compaction_filter" */

/* Module declarations from "rocksdb.concurrent_task_limiter" */

/* Module declarations from "rocksdb.options" */

/* Module declarations from "rocksdb.iterator" */

/* Module declarations from "rocksdb.db" */

/* Module declarations from "rocksdb.backup" */

/* Module declarations from "rocksdb.checkpoint" */

/* Module declarations from "rocksdb.stackable_db" */

/* Module declarations from "rocksdb.transaction_db" */

/* Module declarations from "rocksdb._rocksdb" */
static PyObject *__pyx_f_7rocksdb_8_rocksdb_check_status(rocksdb::Status const &); /*proto*/
static std::string __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_bytes(std::string); /*proto*/
static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(PyObject *); /*proto*/
static rocksdb::Slice *__pyx_f_7rocksdb_8_rocksdb_bytes_to_new_slice(PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(rocksdb::Slice); /*proto*/
static std::string __pyx_f_7rocksdb_8_rocksdb_path_to_string(PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_path(std::string); /*proto*/
static int __pyx_f_7rocksdb_8_rocksdb_compare_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &); /*proto*/
static void __pyx_f_7rocksdb_8_rocksdb_create_filter_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const *, int, std::string *); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_key_may_match_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_merge_callback(void *, rocksdb::Slice const &, rocksdb::Slice const *, rocksdb::Slice const &, std::string *, rocksdb::Logger *); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_full_merge_callback(void *, rocksdb::Slice const &, rocksdb::Slice const *, std::deque<std::string>  const &, std::string *, rocksdb::Logger *); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_partial_merge_callback(void *, rocksdb::Slice const &, rocksdb::Slice const &, rocksdb::Slice const &, std::string *, rocksdb::Logger *); /*proto*/
static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_slice_transform_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_domain_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_range_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyComparator__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyFilterPolicy__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyCache__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *, PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompressionType__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *, PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompactionPri__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "rocksdb._rocksdb"
extern int __pyx_module_is_main_rocksdb___rocksdb;
int __pyx_module_is_main_rocksdb___rocksdb = 0;

/* Implementation of "rocksdb._rocksdb" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_BaseException;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_DB[] = "DB";
static const char __pyx_k__2[] = ">";
static const char __pyx_k__6[] = "!";
static const char __pyx_k_db[] = "db";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_ob[] = "ob";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_Put[] = "Put";
static const char __pyx_k__15[] = ".";
static const char __pyx_k__16[] = "*";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_blc[] = "blc";
static const char __pyx_k_dst[] = "dst";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_put[] = "put";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_None[] = "None";
static const char __pyx_k__201[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fifo[] = "fifo";
static const char __pyx_k_id_2[] = ", id: ";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_opts[] = "opts";
static const char __pyx_k_prop[] = "prop";
static const char __pyx_k_safe[] = "safe";
static const char __pyx_k_seek[] = "seek";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_skip[] = "skip";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_sync[] = "sync";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Error[] = "Error";
static const char __pyx_k_Merge[] = "Merge";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_batch[] = "batch";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_c_key[] = "c_key";
static const char __pyx_k_cache[] = "cache";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_copts[] = "copts";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_crc32[] = "crc32";
static const char __pyx_k_fetch[] = "fetch";
static const char __pyx_k_force[] = "force";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_iters[] = "iters";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_merge[] = "merge";
static const char __pyx_k_plain[] = "plain";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_state[] = ", state: ";
static const char __pyx_k_valid[] = "valid";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_DB_get[] = "DB.get";
static const char __pyx_k_DB_put[] = "DB.put";
static const char __pyx_k_Delete[] = "Delete";
static const char __pyx_k_c_keys[] = "c_keys";
static const char __pyx_k_c_name[] = "c_name";
static const char __pyx_k_c_prop[] = "c_prop";
static const char __pyx_k_c_safe[] = "c_safe";
static const char __pyx_k_db_dir[] = "db_dir";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_filter[] = "filter_";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_it_ptr[] = "it_ptr";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_xxhash[] = "xxhash";
static const char __pyx_k_Options[] = "Options";
static const char __pyx_k_as_dict[] = "as_dict";
static const char __pyx_k_c_value[] = "c_value";
static const char __pyx_k_cf_iter[] = "cf_iter";
static const char __pyx_k_compare[] = "compare";
static const char __pyx_k_db_name[] = "db_name";
static const char __pyx_k_db_path[] = "db_path";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_end_ptr[] = "end_ptr";
static const char __pyx_k_end_val[] = "end_val";
static const char __pyx_k_invalid[] = "invalid";
static const char __pyx_k_low_pri[] = "low_pri";
static const char __pyx_k_state_2[] = "state";
static const char __pyx_k_wal_dir[] = "wal_dir";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_DB_close[] = "DB.close";
static const char __pyx_k_DB_merge[] = "DB.merge";
static const char __pyx_k_DB_write[] = "DB.write";
static const char __pyx_k_LRUCache[] = "LRUCache";
static const char __pyx_k_NotFound[] = "NotFound";
static const char __pyx_k_c_db_dir[] = "c_db_dir";
static const char __pyx_k_capacity[] = "capacity";
static const char __pyx_k_cfhandle[] = "cfhandle";
static const char __pyx_k_checksum[] = "checksum";
static const char __pyx_k_fromkeys[] = "fromkeys";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_in_range[] = "in_range";
static const char __pyx_k_is_valid[] = "is_valid";
static const char __pyx_k_iterkeys[] = "iterkeys";
static const char __pyx_k_metadata[] = "metadata";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_ret_dict[] = "ret_dict";
static const char __pyx_k_ret_list[] = "ret_list";
static const char __pyx_k_reversed[] = "__reversed__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_snapshot[] = "snapshot";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_tdb_opts[] = "tdb_opts";
static const char __pyx_k_DB_delete[] = "DB.delete";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_backup_id[] = "backup_id";
static const char __pyx_k_begin_ptr[] = "begin_ptr";
static const char __pyx_k_begin_val[] = "begin_val";
static const char __pyx_k_c_options[] = "c_options";
static const char __pyx_k_c_wal_dir[] = "c_wal_dir";
static const char __pyx_k_cf_handle[] = "cf_handle";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_in_domain[] = "in_domain";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_iterskeys[] = "iterskeys";
static const char __pyx_k_multi_get[] = "multi_get";
static const char __pyx_k_py_handle[] = "py_handle";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_read_only[] = "read_only";
static const char __pyx_k_read_tier[] = "read_tier";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_repair_db[] = "repair_db";
static const char __pyx_k_timestamp[] = "timestamp";
static const char __pyx_k_traceback[] = "traceback";
static const char __pyx_k_transform[] = "transform";
static const char __pyx_k_universal[] = "universal";
static const char __pyx_k_Checkpoint[] = "Checkpoint";
static const char __pyx_k_Comparator[] = "Comparator";
static const char __pyx_k_Corruption[] = "Corruption";
static const char __pyx_k_Incomplete[] = "Incomplete";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_WriteBatch[] = "WriteBatch";
static const char __pyx_k_backup_dir[] = "backup_dir";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_cf_handles[] = "cf_handles";
static const char __pyx_k_file_count[] = "file_count";
static const char __pyx_k_fill_cache[] = "fill_cache";
static const char __pyx_k_format_exc[] = "format_exc";
static const char __pyx_k_full_merge[] = "full_merge";
static const char __pyx_k_index_type[] = "index_type";
static const char __pyx_k_interfaces[] = "interfaces";
static const char __pyx_k_itervalues[] = "itervalues";
static const char __pyx_k_largestkey[] = "largestkey";
static const char __pyx_k_make_bytes[] = "make_bytes";
static const char __pyx_k_py_options[] = "py_options";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_shard_bits[] = "shard_bits";
static const char __pyx_k_size_ratio[] = "size_ratio";
static const char __pyx_k_stop_style[] = "stop_style";
static const char __pyx_k_total_size[] = "total_size";
static const char __pyx_k_weakhandle[] = "weakhandle";
static const char __pyx_k_DB_iterkeys[] = "DB.iterkeys";
static const char __pyx_k_DB_snapshot[] = "DB.snapshot";
static const char __pyx_k_IComparator[] = "IComparator";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_backup_info[] = "backup_info";
static const char __pyx_k_block_cache[] = "block_cache";
static const char __pyx_k_c_backup_id[] = "c_backup_id";
static const char __pyx_k_compression[] = "compression";
static const char __pyx_k_disable_wal[] = "disable_wal";
static const char __pyx_k_hash_search[] = "hash_search";
static const char __pyx_k_itersvalues[] = "itersvalues";
static const char __pyx_k_no_slowdown[] = "no_slowdown";
static const char __pyx_k_smallestkey[] = "smallestkey";
static const char __pyx_k_stop_backup[] = "stop_backup";
static const char __pyx_k_value_found[] = "value_found";
static const char __pyx_k_weak_handle[] = "weak_handle";
static const char __pyx_k_window_bits[] = "window_bits";
static const char __pyx_k_BackupEngine[] = "BackupEngine";
static const char __pyx_k_DB_iteritems[] = "DB.iteritems";
static const char __pyx_k_DB_iterskeys[] = "DB.iterskeys";
static const char __pyx_k_DB_multi_get[] = "DB.multi_get";
static const char __pyx_k_FilterPolicy[] = "FilterPolicy";
static const char __pyx_k_NotSupported[] = "NotSupported";
static const char __pyx_k_RocksIOError[] = "RocksIOError";
static const char __pyx_k_bits_per_key[] = "bits_per_key";
static const char __pyx_k_bucket_count[] = "bucket_count";
static const char __pyx_k_change_level[] = "change_level";
static const char __pyx_k_get_property[] = "get_property";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_seek_to_last[] = "seek_to_last";
static const char __pyx_k_similar_size[] = "similar_size";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_target_level[] = "target_level";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_user_key_len[] = "user_key_len";
static const char __pyx_k_BaseException[] = "BaseException";
static const char __pyx_k_CompactionPri[] = "CompactionPri";
static const char __pyx_k_DB_itervalues[] = "DB.itervalues";
static const char __pyx_k_IFilterPolicy[] = "IFilterPolicy";
static const char __pyx_k_MergeOperator[] = "MergeOperator";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_TransactionDB[] = "TransactionDB";
static const char __pyx_k_binary_search[] = "binary_search";
static const char __pyx_k_column_family[] = "column_family";
static const char __pyx_k_compact_range[] = "compact_range";
static const char __pyx_k_create_backup[] = "create_backup";
static const char __pyx_k_create_filter[] = "create_filter";
static const char __pyx_k_delete_backup[] = "delete_backup";
static const char __pyx_k_encoding_type[] = "encoding_type";
static const char __pyx_k_filter_policy[] = "filter_policy";
static const char __pyx_k_iterate_bound[] = "iterate_bound";
static const char __pyx_k_key_may_exist[] = "key_may_exist";
static const char __pyx_k_key_may_match[] = "key_may_match";
static const char __pyx_k_largest_seqno[] = "largest_seqno";
static const char __pyx_k_partial_merge[] = "partial_merge";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_seek_for_prev[] = "seek_for_prev";
static const char __pyx_k_seek_to_first[] = "seek_to_first";
static const char __pyx_k_total_threads[] = "total_threads";
static const char __pyx_k_DB_itersvalues[] = "DB.itersvalues";
static const char __pyx_k_IMergeOperator[] = "IMergeOperator";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_SliceTransform[] = "SliceTransform";
static const char __pyx_k_Unknown_type_s[] = "Unknown type: %s";
static const char __pyx_k_WriteBatch_put[] = "WriteBatch.put";
static const char __pyx_k_checkpoint_dir[] = "checkpoint_dir";
static const char __pyx_k_format_version[] = "format_version";
static const char __pyx_k_full_scan_mode[] = "full_scan_mode";
static const char __pyx_k_is_not_of_type[] = " is not of type ";
static const char __pyx_k_max_dict_bytes[] = "max_dict_bytes";
static const char __pyx_k_no_block_cache[] = "no_block_cache";
static const char __pyx_k_no_compression[] = "no_compression";
static const char __pyx_k_restore_backup[] = "restore_backup";
static const char __pyx_k_secondary_path[] = "secondary_path";
static const char __pyx_k_smallest_seqno[] = "smallest_seqno";
static const char __pyx_k_write_prepared[] = "write_prepared";
static const char __pyx_k_CompressionType[] = "CompressionType";
static const char __pyx_k_DB_get_property[] = "DB.get_property";
static const char __pyx_k_ISliceTransform[] = "ISliceTransform";
static const char __pyx_k_InvalidArgument[] = "InvalidArgument";
static const char __pyx_k_MergeInProgress[] = "MergeInProgress";
static const char __pyx_k_Unknown_error_s[] = "Unknown error: %s";
static const char __pyx_k_WriteBatch_data[] = "WriteBatch.data";
static const char __pyx_k_column_families[] = "column_families";
static const char __pyx_k_get_backup_info[] = "get_backup_info";
static const char __pyx_k_lz4_compression[] = "lz4_compression";
static const char __pyx_k_max_merge_width[] = "max_merge_width";
static const char __pyx_k_min_merge_width[] = "min_merge_width";
static const char __pyx_k_parse_read_opts[] = "__parse_read_opts";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_skiplist_height[] = "skiplist_height";
static const char __pyx_k_write_committed[] = "write_committed";
static const char __pyx_k_BaseIterator_get[] = "BaseIterator.get";
static const char __pyx_k_DB_compact_range[] = "DB.compact_range";
static const char __pyx_k_DB_key_may_exist[] = "DB.key_may_exist";
static const char __pyx_k_WriteBatch_clear[] = "WriteBatch.clear";
static const char __pyx_k_WriteBatch_count[] = "WriteBatch.count";
static const char __pyx_k_WriteBatch_merge[] = "WriteBatch.merge";
static const char __pyx_k_c_checkpoint_dir[] = "c_checkpoint_dir";
static const char __pyx_k_hash_table_ratio[] = "hash_table_ratio";
static const char __pyx_k_index_sparseness[] = "index_sparseness";
static const char __pyx_k_parallel_threads[] = "parallel_threads";
static const char __pyx_k_prefix_extractor[] = "prefix_extractor";
static const char __pyx_k_rocksdb__rocksdb[] = "rocksdb._rocksdb";
static const char __pyx_k_total_order_seek[] = "total_order_seek";
static const char __pyx_k_verify_checksums[] = "verify_checksums";
static const char __pyx_k_write_unprepared[] = "write_unprepared";
static const char __pyx_k_zlib_compression[] = "zlib_compression";
static const char __pyx_k_zstd_compression[] = "zstd_compression";
static const char __pyx_k_BaseIterator_seek[] = "BaseIterator.seek";
static const char __pyx_k_BloomFilterPolicy[] = "BloomFilterPolicy";
static const char __pyx_k_Invalid_read_tier[] = "Invalid read_tier";
static const char __pyx_k_PlainTableFactory[] = "PlainTableFactory";
static const char __pyx_k_WriteBatch_delete[] = "WriteBatch.delete";
static const char __pyx_k_bzip2_compression[] = "bzip2_compression";
static const char __pyx_k_create_checkpoint[] = "create_checkpoint";
static const char __pyx_k_get_column_family[] = "get_column_family";
static const char __pyx_k_lz4hc_compression[] = "lz4hc_compression";
static const char __pyx_k_purge_old_backups[] = "purge_old_backups";
static const char __pyx_k_BytewiseComparator[] = "BytewiseComparator";
static const char __pyx_k_ColumnFamilyHandle[] = "ColumnFamilyHandle";
static const char __pyx_k_DB___reduce_cython[] = "DB.__reduce_cython__";
static const char __pyx_k_Unknown_checksum_s[] = "Unknown checksum: %s";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_bloom_bits_per_key[] = "bloom_bits_per_key";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_column_family_name[] = "column family name ";
static const char __pyx_k_drop_column_family[] = "drop_column_family";
static const char __pyx_k_huge_page_tlb_size[] = "huge_page_tlb_size";
static const char __pyx_k_snappy_compression[] = "snappy_compression";
static const char __pyx_k_xpress_compression[] = "xpress_compression";
static const char __pyx_k_ColumnFamilyOptions[] = "ColumnFamilyOptions";
static const char __pyx_k_DB__parse_read_opts[] = "_DB__parse_read_opts";
static const char __pyx_k_IncreaseParallelism[] = "IncreaseParallelism";
static const char __pyx_k_TransactionDB_close[] = "TransactionDB.close";
static const char __pyx_k_by_compensated_size[] = "by_compensated_size";
static const char __pyx_k_disable_compression[] = "disable_compression";
static const char __pyx_k_flush_before_backup[] = "flush_before_backup";
static const char __pyx_k_iterate_lower_bound[] = "iterate_lower_bound";
static const char __pyx_k_iterate_upper_bound[] = "iterate_upper_bound";
static const char __pyx_k_num_backups_to_keep[] = "num_backups_to_keep";
static const char __pyx_k_whole_key_filtering[] = "whole_key_filtering";
static const char __pyx_k_DB___parse_read_opts[] = "DB.__parse_read_opts";
static const char __pyx_k_DB___setstate_cython[] = "DB.__setstate_cython__";
static const char __pyx_k_DB_get_column_family[] = "DB.get_column_family";
static const char __pyx_k_ReversedIterator_get[] = "ReversedIterator.get";
static const char __pyx_k_TransactionDBOptions[] = "TransactionDBOptions";
static const char __pyx_k_Unknown_index_type_s[] = "Unknown index_type: %s";
static const char __pyx_k_Unknown_write_policy[] = "Unknown write policy";
static const char __pyx_k_block_size_deviation[] = "block_size_deviation";
static const char __pyx_k_create_column_family[] = "create_column_family";
static const char __pyx_k_if_compaction_filter[] = "if_compaction_filter";
static const char __pyx_k_list_column_families[] = "list_column_families";
static const char __pyx_k_pyx_unpickle_PyCache[] = "__pyx_unpickle_PyCache";
static const char __pyx_k_rocksdb__rocksdb_pyx[] = "rocksdb/_rocksdb.pyx";
static const char __pyx_k_zstd_max_train_bytes[] = "zstd_max_train_bytes";
static const char __pyx_k_DB_drop_column_family[] = "DB.drop_column_family";
static const char __pyx_k_ReversedIterator_seek[] = "ReversedIterator.seek";
static const char __pyx_k_Unknown_compression_s[] = "Unknown compression: %s";
static const char __pyx_k_VectorMemtableFactory[] = "VectorMemtableFactory";
static const char __pyx_k_Wrong_type_for_path_s[] = "Wrong type for path: %s";
static const char __pyx_k_c_flush_before_backup[] = "c_flush_before_backup";
static const char __pyx_k_c_num_backups_to_keep[] = "c_num_backups_to_keep";
static const char __pyx_k_column_family_options[] = "column family options ";
static const char __pyx_k_getfilesystemencoding[] = "getfilesystemencoding";
static const char __pyx_k_min_overlapping_ratio[] = "min_overlapping_ratio";
static const char __pyx_k_restore_latest_backup[] = "restore_latest_backup";
static const char __pyx_k_BlockBasedTableFactory[] = "BlockBasedTableFactory";
static const char __pyx_k_block_cache_compressed[] = "block_cache_compressed";
static const char __pyx_k_block_restart_interval[] = "block_restart_interval";
static const char __pyx_k_BaseIterator___reversed[] = "BaseIterator.__reversed__";
static const char __pyx_k_ColumnFamilyHandle_name[] = "<ColumnFamilyHandle name: ";
static const char __pyx_k_DB_create_column_family[] = "DB.create_column_family";
static const char __pyx_k_Options___reduce_cython[] = "Options.__reduce_cython__";
static const char __pyx_k_PyCache___reduce_cython[] = "PyCache.__reduce_cython__";
static const char __pyx_k_SkipListMemtableFactory[] = "SkipListMemtableFactory";
static const char __pyx_k_Unknown_encoding_type_s[] = "Unknown encoding_type: %s";
static const char __pyx_k_get_live_files_metadata[] = "get_live_files_metadata";
static const char __pyx_k_AssociativeMergeOperator[] = "AssociativeMergeOperator";
static const char __pyx_k_BackupEngine_stop_backup[] = "BackupEngine.stop_backup";
static const char __pyx_k_PyBloomFilterPolicy_name[] = "PyBloomFilterPolicy.name";
static const char __pyx_k_Snapshot___reduce_cython[] = "Snapshot.__reduce_cython__";
static const char __pyx_k_Unknown_compaction_pri_s[] = "Unknown compaction pri: %s";
static const char __pyx_k_Unknown_compaction_style[] = "Unknown compaction_style";
static const char __pyx_k_compression_size_percent[] = "compression_size_percent";
static const char __pyx_k_oldest_largest_seq_first[] = "oldest_largest_seq_first";
static const char __pyx_k_s_is_not_of_this_types_s[] = "%s is not of this types %s";
static const char __pyx_k_zstdnotfinal_compression[] = "zstdnotfinal_compression";
static const char __pyx_k_BaseIterator_seek_to_last[] = "BaseIterator.seek_to_last";
static const char __pyx_k_IAssociativeMergeOperator[] = "IAssociativeMergeOperator";
static const char __pyx_k_Options___setstate_cython[] = "Options.__setstate_cython__";
static const char __pyx_k_PyBytewiseComparator_name[] = "PyBytewiseComparator.name";
static const char __pyx_k_PyCache___setstate_cython[] = "PyCache.__setstate_cython__";
static const char __pyx_k_oldest_smallest_seq_first[] = "oldest_smallest_seq_first";
static const char __pyx_k_pyx_unpickle_PyComparator[] = "__pyx_unpickle_PyComparator";
static const char __pyx_k_skiplist_branching_factor[] = "skiplist_branching_factor";
static const char __pyx_k_try_catch_up_with_primary[] = "try_catch_up_with_primary";
static const char __pyx_k_BackupEngine_create_backup[] = "BackupEngine.create_backup";
static const char __pyx_k_BackupEngine_delete_backup[] = "BackupEngine.delete_backup";
static const char __pyx_k_BaseIterator_seek_for_prev[] = "BaseIterator.seek_for_prev";
static const char __pyx_k_BaseIterator_seek_to_first[] = "BaseIterator.seek_to_first";
static const char __pyx_k_Cannot_set_filter_policy_s[] = "Cannot set filter policy: %s";
static const char __pyx_k_Cannot_set_s_as_comparator[] = "Cannot set %s as comparator";
static const char __pyx_k_Checkpoint___reduce_cython[] = "Checkpoint.__reduce_cython__";
static const char __pyx_k_DB_get_live_files_metadata[] = "DB.get_live_files_metadata";
static const char __pyx_k_PyLRUCache___reduce_cython[] = "PyLRUCache.__reduce_cython__";
static const char __pyx_k_Snapshot___setstate_cython[] = "Snapshot.__setstate_cython__";
static const char __pyx_k_Unknown_compaction_style_2[] = "Unknown compaction style";
static const char __pyx_k_WriteBatch___reduce_cython[] = "WriteBatch.__reduce_cython__";
static const char __pyx_k_hash_index_allow_collision[] = "hash_index_allow_collision";
static const char __pyx_k_pyx_unpickle_CompactionPri[] = "__pyx_unpickle_CompactionPri";
static const char __pyx_k_BackupEngine_restore_backup[] = "BackupEngine.restore_backup";
static const char __pyx_k_HashLinkListMemtableFactory[] = "HashLinkListMemtableFactory";
static const char __pyx_k_HashSkipListMemtableFactory[] = "HashSkipListMemtableFactory";
static const char __pyx_k_Options_IncreaseParallelism[] = "Options.IncreaseParallelism";
static const char __pyx_k_ReversedIterator___reversed[] = "ReversedIterator.__reversed__";
static const char __pyx_k_bottommost_level_compaction[] = "bottommost_level_compaction";
static const char __pyx_k_get_column_family_meta_data[] = "get_column_family_meta_data";
static const char __pyx_k_pyx_unpickle_PyFilterPolicy[] = "__pyx_unpickle_PyFilterPolicy";
static const char __pyx_k_BackupEngine___reduce_cython[] = "BackupEngine.__reduce_cython__";
static const char __pyx_k_BackupEngine_get_backup_info[] = "BackupEngine.get_backup_info";
static const char __pyx_k_BaseIterator___reduce_cython[] = "BaseIterator.__reduce_cython__";
static const char __pyx_k_Checkpoint___setstate_cython[] = "Checkpoint.__setstate_cython__";
static const char __pyx_k_Checkpoint_create_checkpoint[] = "Checkpoint.create_checkpoint";
static const char __pyx_k_DB_try_catch_up_with_primary[] = "DB.try_catch_up_with_primary";
static const char __pyx_k_KeysIterator___reduce_cython[] = "KeysIterator.__reduce_cython__";
static const char __pyx_k_PyBytewiseComparator_compare[] = "PyBytewiseComparator.compare";
static const char __pyx_k_PyComparator___reduce_cython[] = "PyComparator.__reduce_cython__";
static const char __pyx_k_PyLRUCache___setstate_cython[] = "PyLRUCache.__setstate_cython__";
static const char __pyx_k_WriteBatch___setstate_cython[] = "WriteBatch.__setstate_cython__";
static const char __pyx_k_pyx_unpickle_CompressionType[] = "__pyx_unpickle_CompressionType";
static const char __pyx_k_CompactionPri___reduce_cython[] = "CompactionPri.__reduce_cython__";
static const char __pyx_k_ItemsIterator___reduce_cython[] = "ItemsIterator.__reduce_cython__";
static const char __pyx_k_ReversedIterator_seek_to_last[] = "ReversedIterator.seek_to_last";
static const char __pyx_k_TransactionDB___reduce_cython[] = "TransactionDB.__reduce_cython__";
static const char __pyx_k_cache_index_and_filter_blocks[] = "cache_index_and_filter_blocks";
static const char __pyx_k_BackupEngine___setstate_cython[] = "BackupEngine.__setstate_cython__";
static const char __pyx_k_BackupEngine_purge_old_backups[] = "BackupEngine.purge_old_backups";
static const char __pyx_k_BaseIterator___setstate_cython[] = "BaseIterator.__setstate_cython__";
static const char __pyx_k_ColumnFamilyOptions_object_for[] = "ColumnFamilyOptions object for ";
static const char __pyx_k_DB_get_column_family_meta_data[] = "DB.get_column_family_meta_data";
static const char __pyx_k_KeysIterator___setstate_cython[] = "KeysIterator.__setstate_cython__";
static const char __pyx_k_PyComparator___setstate_cython[] = "PyComparator.__setstate_cython__";
static const char __pyx_k_PyFilterPolicy___reduce_cython[] = "PyFilterPolicy.__reduce_cython__";
static const char __pyx_k_PyTableFactory___reduce_cython[] = "PyTableFactory.__reduce_cython__";
static const char __pyx_k_ReversedIterator_seek_for_prev[] = "ReversedIterator.seek_for_prev";
static const char __pyx_k_ReversedIterator_seek_to_first[] = "ReversedIterator.seek_to_first";
static const char __pyx_k_ValuesIterator___reduce_cython[] = "ValuesIterator.__reduce_cython__";
static const char __pyx_k_ignore_missing_column_families[] = "ignore_missing_column_families";
static const char __pyx_k_max_size_amplification_percent[] = "max_size_amplification_percent";
static const char __pyx_k_BlockBasedTableFactory___reduce[] = "BlockBasedTableFactory.__reduce_cython__";
static const char __pyx_k_ColumnFamilyHandle___reduce_cyt[] = "_ColumnFamilyHandle.__reduce_cython__";
static const char __pyx_k_ColumnFamilyHandle___setstate_c[] = "_ColumnFamilyHandle.__setstate_cython__";
static const char __pyx_k_CompactionPri___setstate_cython[] = "CompactionPri.__setstate_cython__";
static const char __pyx_k_CompressionType___reduce_cython[] = "CompressionType.__reduce_cython__";
static const char __pyx_k_ItemsIterator___setstate_cython[] = "ItemsIterator.__setstate_cython__";
static const char __pyx_k_PyBytewiseComparator___setstate[] = "PyBytewiseComparator.__setstate_cython__";
static const char __pyx_k_PyMergeOperator___reduce_cython[] = "PyMergeOperator.__reduce_cython__";
static const char __pyx_k_TransactionDBOptions___setstate[] = "TransactionDBOptions.__setstate_cython__";
static const char __pyx_k_TransactionDB___setstate_cython[] = "TransactionDB.__setstate_cython__";
static const char __pyx_k_is_already_an_existing_column_f[] = " is already an existing column family";
static const char __pyx_k_is_already_used_by_another_Colu[] = " is already used by another Column Family";
static const char __pyx_k_is_no_longer_a_valid_ColumnFami[] = " is no longer a valid ColumnFamilyHandle!";
static const char __pyx_k_BackupEngine_restore_latest_back[] = "BackupEngine.restore_latest_backup";
static const char __pyx_k_BlockBasedTableFactory___setstat[] = "BlockBasedTableFactory.__setstate_cython__";
static const char __pyx_k_ColumnFamilyHandle___reduce_cyth[] = "ColumnFamilyHandle.__reduce_cython__";
static const char __pyx_k_ColumnFamilyHandle___setstate_cy[] = "ColumnFamilyHandle.__setstate_cython__";
static const char __pyx_k_ColumnFamilyOptions___reduce_cyt[] = "ColumnFamilyOptions.__reduce_cython__";
static const char __pyx_k_ColumnFamilyOptions___setstate_c[] = "ColumnFamilyOptions.__setstate_cython__";
static const char __pyx_k_ColumnFamilyOptions_are_in_use_b[] = "ColumnFamilyOptions are in_use by another column family";
static const char __pyx_k_CompressionType___setstate_cytho[] = "CompressionType.__setstate_cython__";
static const char __pyx_k_DB_build_read_opts_locals_make_b[] = "DB.build_read_opts.<locals>.make_bytes";
static const char __pyx_k_HashLinkListMemtableFactory___re[] = "HashLinkListMemtableFactory.__reduce_cython__";
static const char __pyx_k_HashLinkListMemtableFactory___se[] = "HashLinkListMemtableFactory.__setstate_cython__";
static const char __pyx_k_HashSkipListMemtableFactory___re[] = "HashSkipListMemtableFactory.__reduce_cython__";
static const char __pyx_k_HashSkipListMemtableFactory___se[] = "HashSkipListMemtableFactory.__setstate_cython__";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())";
static const char __pyx_k_Options_object_is_already_used_b[] = "Options object is already used by another DB";
static const char __pyx_k_PlainTableFactory___reduce_cytho[] = "PlainTableFactory.__reduce_cython__";
static const char __pyx_k_PlainTableFactory___setstate_cyt[] = "PlainTableFactory.__setstate_cython__";
static const char __pyx_k_PyBloomFilterPolicy___reduce_cyt[] = "PyBloomFilterPolicy.__reduce_cython__";
static const char __pyx_k_PyBloomFilterPolicy___setstate_c[] = "PyBloomFilterPolicy.__setstate_cython__";
static const char __pyx_k_PyBloomFilterPolicy_create_filte[] = "PyBloomFilterPolicy.create_filter";
static const char __pyx_k_PyBloomFilterPolicy_key_may_matc[] = "PyBloomFilterPolicy.key_may_match";
static const char __pyx_k_PyBytewiseComparator___reduce_cy[] = "PyBytewiseComparator.__reduce_cython__";
static const char __pyx_k_PyFilterPolicy___setstate_cython[] = "PyFilterPolicy.__setstate_cython__";
static const char __pyx_k_PyGenericComparator___reduce_cyt[] = "PyGenericComparator.__reduce_cython__";
static const char __pyx_k_PyGenericComparator___setstate_c[] = "PyGenericComparator.__setstate_cython__";
static const char __pyx_k_PyGenericFilterPolicy___reduce_c[] = "PyGenericFilterPolicy.__reduce_cython__";
static const char __pyx_k_PyGenericFilterPolicy___setstate[] = "PyGenericFilterPolicy.__setstate_cython__";
static const char __pyx_k_PyMemtableFactory___reduce_cytho[] = "PyMemtableFactory.__reduce_cython__";
static const char __pyx_k_PyMemtableFactory___setstate_cyt[] = "PyMemtableFactory.__setstate_cython__";
static const char __pyx_k_PyMergeOperator___setstate_cytho[] = "PyMergeOperator.__setstate_cython__";
static const char __pyx_k_PySliceTransform___reduce_cython[] = "PySliceTransform.__reduce_cython__";
static const char __pyx_k_PySliceTransform___setstate_cyth[] = "PySliceTransform.__setstate_cython__";
static const char __pyx_k_PyTableFactory___setstate_cython[] = "PyTableFactory.__setstate_cython__";
static const char __pyx_k_ReversedIterator___reduce_cython[] = "ReversedIterator.__reduce_cython__";
static const char __pyx_k_ReversedIterator___setstate_cyth[] = "ReversedIterator.__setstate_cython__";
static const char __pyx_k_SkipListMemtableFactory___reduce[] = "SkipListMemtableFactory.__reduce_cython__";
static const char __pyx_k_SkipListMemtableFactory___setsta[] = "SkipListMemtableFactory.__setstate_cython__";
static const char __pyx_k_These_can_not_be_constructed_fro[] = "These can not be constructed from Python";
static const char __pyx_k_TransactionDBOptions___reduce_cy[] = "TransactionDBOptions.__reduce_cython__";
static const char __pyx_k_Transaction_Options_object_is_al[] = "Transaction Options object is already used by another DB";
static const char __pyx_k_ValuesIterator___setstate_cython[] = "ValuesIterator.__setstate_cython__";
static const char __pyx_k_VectorMemtableFactory___reduce_c[] = "VectorMemtableFactory.__reduce_cython__";
static const char __pyx_k_VectorMemtableFactory___setstate[] = "VectorMemtableFactory.__setstate_cython__";
static const char __pyx_k_WriteBatchIterator___reduce_cyth[] = "WriteBatchIterator.__reduce_cython__";
static const char __pyx_k_WriteBatchIterator___setstate_cy[] = "WriteBatchIterator.__setstate_cython__";
static const char __pyx_k_bottommost_level_compaction_is_n[] = "bottommost_level_compaction is not valid";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_offset_i_size_i_is_bigger_than_s[] = "offset(%i) + size(%i) is bigger than slice(%i)";
static const char __pyx_k_row_cache_must_be_a_Cache_object[] = "row_cache must be a Cache object";
static const char __pyx_k_self_factory_cannot_be_converted[] = "self.factory cannot be converted to a Python object for pickling";
static const char __pyx_k_self_items_cannot_be_converted_t[] = "self.items cannot be converted to a Python object for pickling";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12PyComparator___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12PyComparator_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_4compare(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyFilterPolicy___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyFilterPolicy_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, int __pyx_v_bits_per_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_4create_filter(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_keys); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_6key_may_match(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_filter_); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7PyCache___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7PyCache_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self, PyObject *__pyx_v_capacity, PyObject *__pyx_v_shard_bits); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyTableFactory___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyTableFactory_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, PyObject *__pyx_v_index_type, PyBoolObject *__pyx_v_hash_index_allow_collision, PyObject *__pyx_v_checksum, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache_compressed, PyObject *__pyx_v_filter_policy, PyObject *__pyx_v_no_block_cache, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_size_deviation, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_whole_key_filtering, PyObject *__pyx_v_cache_index_and_filter_blocks, PyObject *__pyx_v_format_version); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self, PyObject *__pyx_v_user_key_len, PyObject *__pyx_v_bloom_bits_per_key, PyObject *__pyx_v_hash_table_ratio, PyObject *__pyx_v_index_sparseness, PyObject *__pyx_v_huge_page_tlb_size, PyObject *__pyx_v_encoding_type, PyBoolObject *__pyx_v_full_scan_mode); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PyMemtableFactory___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PyMemtableFactory_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count, PyObject *__pyx_v_skiplist_height, PyObject *__pyx_v_skiplist_branching_factor); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15CompressionType___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15CompressionType_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13CompactionPri___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13CompactionPri_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4name___get__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2id___get__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7weakref___get__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_weakhandle); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2__init__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8is_valid___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4__repr__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_6__eq__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8__lt__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_10__ne__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_12__gt__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_14__le__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_16__ge__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static Py_hash_t __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_18__hash__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4name___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2id___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_7Options_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_6IncreaseParallelism(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, int __pyx_v_total_threads); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_30create_missing_column_families___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18max_total_wal_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19max_background_jobs___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19max_background_jobs_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27base_background_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27base_background_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18max_subcompactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_subcompactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16use_direct_reads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16use_direct_reads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15allow_fallocate___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15allow_fallocate_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18delayed_write_rate___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15unordered_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15unordered_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9allow_2pc___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9allow_2pc_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16preserve_deletes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16preserve_deletes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16two_write_queues___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16two_write_queues_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16manual_wal_flush___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_12atomic_flush___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_12atomic_flush_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18log_readahead_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18log_readahead_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_4put(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_6merge(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_8delete(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_10clear(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_12data(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_14count(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_16__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator___init__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_2__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_4__next__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_2DB___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts, PyObject *__pyx_v_column_families, PyObject *__pyx_v_read_only, PyObject *__pyx_v_secondary_path, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_2close(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_safe); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_2DB_4__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_15column_families___get__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_6get_column_family(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_8put(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_10delete(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_12merge(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_14write(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_16get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_18multi_get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_keys, PyObject *__pyx_v_as_dict, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_20key_may_exist(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fetch, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_22iterkeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_24itervalues(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_26iteritems(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_28iterskeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_column_families, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_30itersvalues(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_column_families, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_32iterskeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_column_families, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_34snapshot(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_36get_property(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_38get_live_files_metadata(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_40get_column_family_meta_data(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_42compact_range(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_begin, PyObject *__pyx_v_end, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_py_options); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_44__parse_read_opts(PyObject *__pyx_v_verify_checksums, PyObject *__pyx_v_fill_cache, PyObject *__pyx_v_snapshot, PyObject *__pyx_v_read_tier, PyObject *__pyx_v_total_order_seek, PyObject *__pyx_v_iterate_lower_bound, PyObject *__pyx_v_iterate_upper_bound); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_15build_read_opts_make_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_iterate_bound); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_7options___get__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_46create_column_family(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_48drop_column_family(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_weak_handle); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_50try_catch_up_with_primary(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_52__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_54__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_repair_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2list_column_families(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts, CYTHON_UNUSED PyObject *__pyx_v_column_families, struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_tdb_opts, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_19transaction_options___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_2close(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self, PyObject *__pyx_v_safe); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_4__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_8Snapshot___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_8Snapshot_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_8Snapshot_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_handle); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_4__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_6__next__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_8get(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_10__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_12seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_14seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_16seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_18seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12KeysIterator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12KeysIterator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14ValuesIterator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14ValuesIterator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13ItemsIterator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13ItemsIterator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_it); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_2seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_4seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_6seek(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_8seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_10get(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_12__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_14__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_16__next__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_4create_checkpoint(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self, PyObject *__pyx_v_checkpoint_dir); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_dir); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_4create_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db, PyObject *__pyx_v_flush_before_backup); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_6restore_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_8restore_latest_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_10stop_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_12purge_old_backups(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_num_backups_to_keep); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_14delete_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_16get_backup_info(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_4__pyx_unpickle_PyComparator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_6__pyx_unpickle_PyFilterPolicy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_8__pyx_unpickle_PyCache(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10__pyx_unpickle_CompressionType(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12__pyx_unpickle_CompactionPri(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyCache(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompressionType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb__ColumnFamilyHandle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyHandle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyOptions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Options(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_TransactionDBOptions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Snapshot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_DB(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_TransactionDB(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Checkpoint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyComparator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyCache;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyLRUCache;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PySliceTransform;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyTableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_CompressionType;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_CompactionPri;
  PyObject *__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_Options;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_Snapshot;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_ReversedIterator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_WriteBatch;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_DB;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_TransactionDB;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_BaseIterator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_ItemsIterator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_ValuesIterator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_KeysIterator;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_Checkpoint;
  PyObject *__pyx_type_7rocksdb_8_rocksdb_BackupEngine;
  #endif
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyComparator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyCache;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_CompressionType;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_Options;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_Snapshot;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_DB;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint;
  PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine;
  PyObject *__pyx_n_s_AssociativeMergeOperator;
  PyObject *__pyx_n_s_BackupEngine;
  PyObject *__pyx_n_s_BackupEngine___reduce_cython;
  PyObject *__pyx_n_s_BackupEngine___setstate_cython;
  PyObject *__pyx_n_s_BackupEngine_create_backup;
  PyObject *__pyx_n_s_BackupEngine_delete_backup;
  PyObject *__pyx_n_s_BackupEngine_get_backup_info;
  PyObject *__pyx_n_s_BackupEngine_purge_old_backups;
  PyObject *__pyx_n_s_BackupEngine_restore_backup;
  PyObject *__pyx_n_s_BackupEngine_restore_latest_back;
  PyObject *__pyx_n_s_BackupEngine_stop_backup;
  PyObject *__pyx_n_s_BaseException;
  PyObject *__pyx_n_s_BaseIterator___reduce_cython;
  PyObject *__pyx_n_s_BaseIterator___reversed;
  PyObject *__pyx_n_s_BaseIterator___setstate_cython;
  PyObject *__pyx_n_s_BaseIterator_get;
  PyObject *__pyx_n_s_BaseIterator_seek;
  PyObject *__pyx_n_s_BaseIterator_seek_for_prev;
  PyObject *__pyx_n_s_BaseIterator_seek_to_first;
  PyObject *__pyx_n_s_BaseIterator_seek_to_last;
  PyObject *__pyx_n_s_BlockBasedTableFactory;
  PyObject *__pyx_n_s_BlockBasedTableFactory___reduce;
  PyObject *__pyx_n_s_BlockBasedTableFactory___setstat;
  PyObject *__pyx_n_s_BloomFilterPolicy;
  PyObject *__pyx_n_s_BytewiseComparator;
  PyObject *__pyx_kp_u_Cannot_set_filter_policy_s;
  PyObject *__pyx_kp_u_Cannot_set_s_as_comparator;
  PyObject *__pyx_n_s_Checkpoint;
  PyObject *__pyx_n_s_Checkpoint___reduce_cython;
  PyObject *__pyx_n_s_Checkpoint___setstate_cython;
  PyObject *__pyx_n_s_Checkpoint_create_checkpoint;
  PyObject *__pyx_n_s_ColumnFamilyHandle;
  PyObject *__pyx_n_s_ColumnFamilyHandle___reduce_cyt;
  PyObject *__pyx_n_s_ColumnFamilyHandle___reduce_cyth;
  PyObject *__pyx_n_s_ColumnFamilyHandle___setstate_c;
  PyObject *__pyx_n_s_ColumnFamilyHandle___setstate_cy;
  PyObject *__pyx_kp_u_ColumnFamilyHandle_name;
  PyObject *__pyx_n_s_ColumnFamilyOptions;
  PyObject *__pyx_n_s_ColumnFamilyOptions___reduce_cyt;
  PyObject *__pyx_n_s_ColumnFamilyOptions___setstate_c;
  PyObject *__pyx_kp_u_ColumnFamilyOptions_are_in_use_b;
  PyObject *__pyx_kp_u_ColumnFamilyOptions_object_for;
  PyObject *__pyx_n_s_CompactionPri;
  PyObject *__pyx_n_s_CompactionPri___reduce_cython;
  PyObject *__pyx_n_s_CompactionPri___setstate_cython;
  PyObject *__pyx_n_s_Comparator;
  PyObject *__pyx_n_s_CompressionType;
  PyObject *__pyx_n_s_CompressionType___reduce_cython;
  PyObject *__pyx_n_s_CompressionType___setstate_cytho;
  PyObject *__pyx_n_s_Corruption;
  PyObject *__pyx_n_s_DB;
  PyObject *__pyx_n_s_DB___parse_read_opts;
  PyObject *__pyx_n_s_DB___reduce_cython;
  PyObject *__pyx_n_s_DB___setstate_cython;
  PyObject *__pyx_n_s_DB__parse_read_opts;
  PyObject *__pyx_n_s_DB_build_read_opts_locals_make_b;
  PyObject *__pyx_n_s_DB_close;
  PyObject *__pyx_n_s_DB_compact_range;
  PyObject *__pyx_n_s_DB_create_column_family;
  PyObject *__pyx_n_s_DB_delete;
  PyObject *__pyx_n_s_DB_drop_column_family;
  PyObject *__pyx_n_s_DB_get;
  PyObject *__pyx_n_s_DB_get_column_family;
  PyObject *__pyx_n_s_DB_get_column_family_meta_data;
  PyObject *__pyx_n_s_DB_get_live_files_metadata;
  PyObject *__pyx_n_s_DB_get_property;
  PyObject *__pyx_n_s_DB_iteritems;
  PyObject *__pyx_n_s_DB_iterkeys;
  PyObject *__pyx_n_s_DB_iterskeys;
  PyObject *__pyx_n_s_DB_itersvalues;
  PyObject *__pyx_n_s_DB_itervalues;
  PyObject *__pyx_n_s_DB_key_may_exist;
  PyObject *__pyx_n_s_DB_merge;
  PyObject *__pyx_n_s_DB_multi_get;
  PyObject *__pyx_n_s_DB_put;
  PyObject *__pyx_n_s_DB_snapshot;
  PyObject *__pyx_n_s_DB_try_catch_up_with_primary;
  PyObject *__pyx_n_s_DB_write;
  PyObject *__pyx_n_u_Delete;
  PyObject *__pyx_n_s_Error;
  PyObject *__pyx_n_s_FilterPolicy;
  PyObject *__pyx_n_s_HashLinkListMemtableFactory;
  PyObject *__pyx_n_s_HashLinkListMemtableFactory___re;
  PyObject *__pyx_n_s_HashLinkListMemtableFactory___se;
  PyObject *__pyx_n_s_HashSkipListMemtableFactory;
  PyObject *__pyx_n_s_HashSkipListMemtableFactory___re;
  PyObject *__pyx_n_s_HashSkipListMemtableFactory___se;
  PyObject *__pyx_n_s_IAssociativeMergeOperator;
  PyObject *__pyx_n_s_IComparator;
  PyObject *__pyx_n_s_IFilterPolicy;
  PyObject *__pyx_n_s_IMergeOperator;
  PyObject *__pyx_n_s_ISliceTransform;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_Incomplete;
  PyObject *__pyx_n_s_IncreaseParallelism;
  PyObject *__pyx_n_s_InvalidArgument;
  PyObject *__pyx_kp_u_Invalid_read_tier;
  PyObject *__pyx_n_s_ItemsIterator___reduce_cython;
  PyObject *__pyx_n_s_ItemsIterator___setstate_cython;
  PyObject *__pyx_n_s_KeysIterator___reduce_cython;
  PyObject *__pyx_n_s_KeysIterator___setstate_cython;
  PyObject *__pyx_n_s_LRUCache;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_u_Merge;
  PyObject *__pyx_n_s_MergeInProgress;
  PyObject *__pyx_n_s_MergeOperator;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_s_NotFound;
  PyObject *__pyx_n_s_NotImplemented;
  PyObject *__pyx_n_s_NotSupported;
  PyObject *__pyx_n_s_Options;
  PyObject *__pyx_n_s_Options_IncreaseParallelism;
  PyObject *__pyx_n_s_Options___reduce_cython;
  PyObject *__pyx_n_s_Options___setstate_cython;
  PyObject *__pyx_kp_u_Options_object_is_already_used_b;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_PlainTableFactory;
  PyObject *__pyx_n_s_PlainTableFactory___reduce_cytho;
  PyObject *__pyx_n_s_PlainTableFactory___setstate_cyt;
  PyObject *__pyx_n_u_Put;
  PyObject *__pyx_n_s_PyBloomFilterPolicy___reduce_cyt;
  PyObject *__pyx_n_s_PyBloomFilterPolicy___setstate_c;
  PyObject *__pyx_n_s_PyBloomFilterPolicy_create_filte;
  PyObject *__pyx_n_s_PyBloomFilterPolicy_key_may_matc;
  PyObject *__pyx_n_s_PyBloomFilterPolicy_name;
  PyObject *__pyx_n_s_PyBytewiseComparator___reduce_cy;
  PyObject *__pyx_n_s_PyBytewiseComparator___setstate;
  PyObject *__pyx_n_s_PyBytewiseComparator_compare;
  PyObject *__pyx_n_s_PyBytewiseComparator_name;
  PyObject *__pyx_n_s_PyCache___reduce_cython;
  PyObject *__pyx_n_s_PyCache___setstate_cython;
  PyObject *__pyx_n_s_PyComparator___reduce_cython;
  PyObject *__pyx_n_s_PyComparator___setstate_cython;
  PyObject *__pyx_n_s_PyFilterPolicy___reduce_cython;
  PyObject *__pyx_n_s_PyFilterPolicy___setstate_cython;
  PyObject *__pyx_n_s_PyGenericComparator___reduce_cyt;
  PyObject *__pyx_n_s_PyGenericComparator___setstate_c;
  PyObject *__pyx_n_s_PyGenericFilterPolicy___reduce_c;
  PyObject *__pyx_n_s_PyGenericFilterPolicy___setstate;
  PyObject *__pyx_n_s_PyLRUCache___reduce_cython;
  PyObject *__pyx_n_s_PyLRUCache___setstate_cython;
  PyObject *__pyx_n_s_PyMemtableFactory___reduce_cytho;
  PyObject *__pyx_n_s_PyMemtableFactory___setstate_cyt;
  PyObject *__pyx_n_s_PyMergeOperator___reduce_cython;
  PyObject *__pyx_n_s_PyMergeOperator___setstate_cytho;
  PyObject *__pyx_n_s_PySliceTransform___reduce_cython;
  PyObject *__pyx_n_s_PySliceTransform___setstate_cyth;
  PyObject *__pyx_n_s_PyTableFactory___reduce_cython;
  PyObject *__pyx_n_s_PyTableFactory___setstate_cython;
  PyObject *__pyx_n_s_ReversedIterator___reduce_cython;
  PyObject *__pyx_n_s_ReversedIterator___reversed;
  PyObject *__pyx_n_s_ReversedIterator___setstate_cyth;
  PyObject *__pyx_n_s_ReversedIterator_get;
  PyObject *__pyx_n_s_ReversedIterator_seek;
  PyObject *__pyx_n_s_ReversedIterator_seek_for_prev;
  PyObject *__pyx_n_s_ReversedIterator_seek_to_first;
  PyObject *__pyx_n_s_ReversedIterator_seek_to_last;
  PyObject *__pyx_n_s_RocksIOError;
  PyObject *__pyx_n_s_SkipListMemtableFactory;
  PyObject *__pyx_n_s_SkipListMemtableFactory___reduce;
  PyObject *__pyx_n_s_SkipListMemtableFactory___setsta;
  PyObject *__pyx_n_s_SliceTransform;
  PyObject *__pyx_n_s_Snapshot___reduce_cython;
  PyObject *__pyx_n_s_Snapshot___setstate_cython;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_kp_u_These_can_not_be_constructed_fro;
  PyObject *__pyx_n_s_TransactionDB;
  PyObject *__pyx_n_s_TransactionDBOptions;
  PyObject *__pyx_n_s_TransactionDBOptions___reduce_cy;
  PyObject *__pyx_n_s_TransactionDBOptions___setstate;
  PyObject *__pyx_n_s_TransactionDB___reduce_cython;
  PyObject *__pyx_n_s_TransactionDB___setstate_cython;
  PyObject *__pyx_n_s_TransactionDB_close;
  PyObject *__pyx_kp_u_Transaction_Options_object_is_al;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_Unknown_checksum_s;
  PyObject *__pyx_kp_u_Unknown_compaction_pri_s;
  PyObject *__pyx_kp_u_Unknown_compaction_style;
  PyObject *__pyx_kp_u_Unknown_compaction_style_2;
  PyObject *__pyx_kp_u_Unknown_compression_s;
  PyObject *__pyx_kp_u_Unknown_encoding_type_s;
  PyObject *__pyx_kp_u_Unknown_error_s;
  PyObject *__pyx_kp_u_Unknown_index_type_s;
  PyObject *__pyx_kp_u_Unknown_type_s;
  PyObject *__pyx_kp_u_Unknown_write_policy;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_ValuesIterator___reduce_cython;
  PyObject *__pyx_n_s_ValuesIterator___setstate_cython;
  PyObject *__pyx_n_s_VectorMemtableFactory;
  PyObject *__pyx_n_s_VectorMemtableFactory___reduce_c;
  PyObject *__pyx_n_s_VectorMemtableFactory___setstate;
  PyObject *__pyx_n_s_WriteBatch;
  PyObject *__pyx_n_s_WriteBatchIterator___reduce_cyth;
  PyObject *__pyx_n_s_WriteBatchIterator___setstate_cy;
  PyObject *__pyx_n_s_WriteBatch___reduce_cython;
  PyObject *__pyx_n_s_WriteBatch___setstate_cython;
  PyObject *__pyx_n_s_WriteBatch_clear;
  PyObject *__pyx_n_s_WriteBatch_count;
  PyObject *__pyx_n_s_WriteBatch_data;
  PyObject *__pyx_n_s_WriteBatch_delete;
  PyObject *__pyx_n_s_WriteBatch_merge;
  PyObject *__pyx_n_s_WriteBatch_put;
  PyObject *__pyx_kp_u_Wrong_type_for_path_s;
  PyObject *__pyx_kp_u__15;
  PyObject *__pyx_n_s__16;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_s__201;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_n_u_all;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_as_dict;
  PyObject *__pyx_n_u_ascii;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_backup_dir;
  PyObject *__pyx_n_s_backup_id;
  PyObject *__pyx_n_u_backup_id;
  PyObject *__pyx_n_s_backup_info;
  PyObject *__pyx_n_s_batch;
  PyObject *__pyx_n_s_begin;
  PyObject *__pyx_n_s_begin_ptr;
  PyObject *__pyx_n_s_begin_val;
  PyObject *__pyx_n_u_binary_search;
  PyObject *__pyx_n_s_bits_per_key;
  PyObject *__pyx_n_s_blc;
  PyObject *__pyx_n_s_block_cache;
  PyObject *__pyx_n_s_block_cache_compressed;
  PyObject *__pyx_n_s_block_restart_interval;
  PyObject *__pyx_n_s_block_size;
  PyObject *__pyx_n_s_block_size_deviation;
  PyObject *__pyx_n_s_bloom_bits_per_key;
  PyObject *__pyx_n_u_bottommost_level_compaction;
  PyObject *__pyx_kp_u_bottommost_level_compaction_is_n;
  PyObject *__pyx_n_s_bucket_count;
  PyObject *__pyx_n_s_by_compensated_size;
  PyObject *__pyx_n_u_by_compensated_size;
  PyObject *__pyx_n_s_bzip2_compression;
  PyObject *__pyx_n_u_bzip2_compression;
  PyObject *__pyx_n_s_c_backup_id;
  PyObject *__pyx_n_s_c_checkpoint_dir;
  PyObject *__pyx_n_s_c_db_dir;
  PyObject *__pyx_n_s_c_flush_before_backup;
  PyObject *__pyx_n_s_c_key;
  PyObject *__pyx_n_s_c_keys;
  PyObject *__pyx_n_s_c_name;
  PyObject *__pyx_n_s_c_num_backups_to_keep;
  PyObject *__pyx_n_s_c_options;
  PyObject *__pyx_n_s_c_prop;
  PyObject *__pyx_n_s_c_safe;
  PyObject *__pyx_n_s_c_value;
  PyObject *__pyx_n_s_c_wal_dir;
  PyObject *__pyx_n_u_cache;
  PyObject *__pyx_n_s_cache_index_and_filter_blocks;
  PyObject *__pyx_n_s_capacity;
  PyObject *__pyx_n_s_cf_handle;
  PyObject *__pyx_n_s_cf_handles;
  PyObject *__pyx_n_s_cf_iter;
  PyObject *__pyx_n_s_cfhandle;
  PyObject *__pyx_n_u_change_level;
  PyObject *__pyx_n_s_checkpoint_dir;
  PyObject *__pyx_n_s_checksum;
  PyObject *__pyx_n_s_clear;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_column_families;
  PyObject *__pyx_n_s_column_family;
  PyObject *__pyx_kp_u_column_family_name;
  PyObject *__pyx_kp_u_column_family_options;
  PyObject *__pyx_n_s_compact_range;
  PyObject *__pyx_n_s_compare;
  PyObject *__pyx_n_s_compression;
  PyObject *__pyx_n_u_compression_size_percent;
  PyObject *__pyx_n_s_copts;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_u_crc32;
  PyObject *__pyx_n_s_create_backup;
  PyObject *__pyx_n_s_create_checkpoint;
  PyObject *__pyx_n_s_create_column_family;
  PyObject *__pyx_n_s_create_filter;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_db;
  PyObject *__pyx_n_s_db_dir;
  PyObject *__pyx_n_s_db_name;
  PyObject *__pyx_n_s_db_path;
  PyObject *__pyx_n_s_delete;
  PyObject *__pyx_n_s_delete_backup;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_disable_compression;
  PyObject *__pyx_n_u_disable_compression;
  PyObject *__pyx_n_s_disable_wal;
  PyObject *__pyx_n_s_drop_column_family;
  PyObject *__pyx_n_s_dst;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_u_enabled;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_encoding_type;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_end_ptr;
  PyObject *__pyx_n_s_end_val;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_errors;
  PyObject *__pyx_n_s_exists;
  PyObject *__pyx_n_s_fetch;
  PyObject *__pyx_n_u_fifo;
  PyObject *__pyx_n_u_file_count;
  PyObject *__pyx_n_s_fill_cache;
  PyObject *__pyx_n_u_fill_cache;
  PyObject *__pyx_n_s_filter;
  PyObject *__pyx_n_s_filter_policy;
  PyObject *__pyx_n_s_flush_before_backup;
  PyObject *__pyx_n_u_force;
  PyObject *__pyx_n_s_format_exc;
  PyObject *__pyx_n_s_format_version;
  PyObject *__pyx_n_s_fromkeys;
  PyObject *__pyx_n_s_full_merge;
  PyObject *__pyx_n_s_full_scan_mode;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_get_backup_info;
  PyObject *__pyx_n_s_get_column_family;
  PyObject *__pyx_n_s_get_column_family_meta_data;
  PyObject *__pyx_n_s_get_live_files_metadata;
  PyObject *__pyx_n_s_get_property;
  PyObject *__pyx_n_s_getfilesystemencoding;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_handle;
  PyObject *__pyx_n_s_hash_index_allow_collision;
  PyObject *__pyx_n_u_hash_search;
  PyObject *__pyx_n_s_hash_table_ratio;
  PyObject *__pyx_n_s_huge_page_tlb_size;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_kp_u_id_2;
  PyObject *__pyx_n_u_if_compaction_filter;
  PyObject *__pyx_n_s_ignore_missing_column_families;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_in_domain;
  PyObject *__pyx_n_s_in_range;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_index_sparseness;
  PyObject *__pyx_n_s_index_type;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_interfaces;
  PyObject *__pyx_n_u_invalid;
  PyObject *__pyx_kp_u_is_already_an_existing_column_f;
  PyObject *__pyx_kp_u_is_already_used_by_another_Colu;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_is_no_longer_a_valid_ColumnFami;
  PyObject *__pyx_kp_u_is_not_of_type;
  PyObject *__pyx_n_s_is_valid;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_it;
  PyObject *__pyx_n_s_it_ptr;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_iterate_bound;
  PyObject *__pyx_n_s_iterate_lower_bound;
  PyObject *__pyx_n_u_iterate_lower_bound;
  PyObject *__pyx_n_s_iterate_upper_bound;
  PyObject *__pyx_n_u_iterate_upper_bound;
  PyObject *__pyx_n_s_iteritems;
  PyObject *__pyx_n_s_iterkeys;
  PyObject *__pyx_n_s_iters;
  PyObject *__pyx_n_s_iterskeys;
  PyObject *__pyx_n_s_itersvalues;
  PyObject *__pyx_n_s_itervalues;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_key_may_exist;
  PyObject *__pyx_n_s_key_may_match;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_u_largest_seqno;
  PyObject *__pyx_n_u_largestkey;
  PyObject *__pyx_n_u_level;
  PyObject *__pyx_n_s_list_column_families;
  PyObject *__pyx_n_s_low_pri;
  PyObject *__pyx_n_s_lz4_compression;
  PyObject *__pyx_n_u_lz4_compression;
  PyObject *__pyx_n_s_lz4hc_compression;
  PyObject *__pyx_n_u_lz4hc_compression;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_make_bytes;
  PyObject *__pyx_n_u_max_dict_bytes;
  PyObject *__pyx_n_u_max_merge_width;
  PyObject *__pyx_n_u_max_size_amplification_percent;
  PyObject *__pyx_n_s_merge;
  PyObject *__pyx_n_s_metadata;
  PyObject *__pyx_n_u_min_merge_width;
  PyObject *__pyx_n_s_min_overlapping_ratio;
  PyObject *__pyx_n_u_min_overlapping_ratio;
  PyObject *__pyx_n_s_multi_get;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_u_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_no_block_cache;
  PyObject *__pyx_n_s_no_compression;
  PyObject *__pyx_n_u_no_compression;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_no_slowdown;
  PyObject *__pyx_n_u_none;
  PyObject *__pyx_n_s_num_backups_to_keep;
  PyObject *__pyx_n_s_ob;
  PyObject *__pyx_kp_u_offset_i_size_i_is_bigger_than_s;
  PyObject *__pyx_n_s_oldest_largest_seq_first;
  PyObject *__pyx_n_u_oldest_largest_seq_first;
  PyObject *__pyx_n_s_oldest_smallest_seq_first;
  PyObject *__pyx_n_u_oldest_smallest_seq_first;
  PyObject *__pyx_n_s_opts;
  PyObject *__pyx_n_u_parallel_threads;
  PyObject *__pyx_n_s_parse_read_opts;
  PyObject *__pyx_n_s_partial_merge;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_u_plain;
  PyObject *__pyx_n_s_pop;
  PyObject *__pyx_n_u_prefix;
  PyObject *__pyx_n_s_prefix_extractor;
  PyObject *__pyx_n_s_prop;
  PyObject *__pyx_n_s_purge_old_backups;
  PyObject *__pyx_n_s_put;
  PyObject *__pyx_n_s_py_handle;
  PyObject *__pyx_n_s_py_options;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_CompactionPri;
  PyObject *__pyx_n_s_pyx_unpickle_CompressionType;
  PyObject *__pyx_n_s_pyx_unpickle_PyCache;
  PyObject *__pyx_n_s_pyx_unpickle_PyComparator;
  PyObject *__pyx_n_s_pyx_unpickle_PyFilterPolicy;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_read_only;
  PyObject *__pyx_n_s_read_tier;
  PyObject *__pyx_n_u_read_tier;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_ref;
  PyObject *__pyx_n_s_repair_db;
  PyObject *__pyx_n_s_res;
  PyObject *__pyx_n_s_restore_backup;
  PyObject *__pyx_n_s_restore_latest_backup;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_ret_dict;
  PyObject *__pyx_n_s_ret_list;
  PyObject *__pyx_n_s_reversed;
  PyObject *__pyx_n_s_rocksdb__rocksdb;
  PyObject *__pyx_kp_s_rocksdb__rocksdb_pyx;
  PyObject *__pyx_kp_u_row_cache_must_be_a_Cache_object;
  PyObject *__pyx_kp_u_s_is_not_of_this_types_s;
  PyObject *__pyx_n_s_safe;
  PyObject *__pyx_n_s_secondary_path;
  PyObject *__pyx_n_s_seek;
  PyObject *__pyx_n_s_seek_for_prev;
  PyObject *__pyx_n_s_seek_to_first;
  PyObject *__pyx_n_s_seek_to_last;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_factory_cannot_be_converted;
  PyObject *__pyx_kp_s_self_items_cannot_be_converted_t;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shard_bits;
  PyObject *__pyx_n_u_similar_size;
  PyObject *__pyx_n_u_size;
  PyObject *__pyx_n_u_size_ratio;
  PyObject *__pyx_n_u_skip;
  PyObject *__pyx_n_s_skiplist_branching_factor;
  PyObject *__pyx_n_s_skiplist_height;
  PyObject *__pyx_n_u_smallest_seqno;
  PyObject *__pyx_n_u_smallestkey;
  PyObject *__pyx_n_s_snappy_compression;
  PyObject *__pyx_n_u_snappy_compression;
  PyObject *__pyx_n_s_snapshot;
  PyObject *__pyx_n_u_snapshot;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_st;
  PyObject *__pyx_kp_u_state;
  PyObject *__pyx_n_s_state_2;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_n_s_stop_backup;
  PyObject *__pyx_n_u_stop_style;
  PyObject *__pyx_n_u_strategy;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_sync;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_t;
  PyObject *__pyx_n_u_target_level;
  PyObject *__pyx_n_s_tdb_opts;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_u_timestamp;
  PyObject *__pyx_n_s_total_order_seek;
  PyObject *__pyx_n_u_total_order_seek;
  PyObject *__pyx_n_u_total_size;
  PyObject *__pyx_n_s_total_threads;
  PyObject *__pyx_n_s_traceback;
  PyObject *__pyx_n_s_transform;
  PyObject *__pyx_n_s_try_catch_up_with_primary;
  PyObject *__pyx_n_u_universal;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_user_key_len;
  PyObject *__pyx_n_u_valid;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_value_found;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_verify_checksums;
  PyObject *__pyx_n_u_verify_checksums;
  PyObject *__pyx_n_s_wal_dir;
  PyObject *__pyx_n_s_weak_handle;
  PyObject *__pyx_n_s_weakhandle;
  PyObject *__pyx_n_s_weakref;
  PyObject *__pyx_n_s_whole_key_filtering;
  PyObject *__pyx_n_u_window_bits;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_u_write_committed;
  PyObject *__pyx_n_u_write_prepared;
  PyObject *__pyx_n_u_write_unprepared;
  PyObject *__pyx_n_s_xpress_compression;
  PyObject *__pyx_n_u_xpress_compression;
  PyObject *__pyx_n_u_xxhash;
  PyObject *__pyx_n_s_zlib_compression;
  PyObject *__pyx_n_u_zlib_compression;
  PyObject *__pyx_n_s_zstd_compression;
  PyObject *__pyx_n_u_zstd_compression;
  PyObject *__pyx_n_u_zstd_max_train_bytes;
  PyObject *__pyx_n_s_zstdnotfinal_compression;
  PyObject *__pyx_n_u_zstdnotfinal_compression;
  PyObject *__pyx_float_0_75;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_10;
  PyObject *__pyx_int_16;
  PyObject *__pyx_int_50000;
  PyObject *__pyx_int_1000000;
  PyObject *__pyx_int_222419149;
  PyObject *__pyx_int_228825662;
  PyObject *__pyx_int_238750788;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__104;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__108;
  PyObject *__pyx_tuple__110;
  PyObject *__pyx_tuple__112;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__118;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__126;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__132;
  PyObject *__pyx_tuple__133;
  PyObject *__pyx_tuple__135;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__138;
  PyObject *__pyx_tuple__143;
  PyObject *__pyx_tuple__145;
  PyObject *__pyx_tuple__152;
  PyObject *__pyx_tuple__157;
  PyObject *__pyx_tuple__176;
  PyObject *__pyx_tuple__180;
  PyObject *__pyx_tuple__182;
  PyObject *__pyx_tuple__184;
  PyObject *__pyx_tuple__187;
  PyObject *__pyx_tuple__189;
  PyObject *__pyx_tuple__191;
  PyObject *__pyx_tuple__195;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__140;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__142;
  PyObject *__pyx_codeobj__144;
  PyObject *__pyx_codeobj__146;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__148;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__150;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__153;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__155;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__159;
  PyObject *__pyx_codeobj__160;
  PyObject *__pyx_codeobj__161;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__163;
  PyObject *__pyx_codeobj__164;
  PyObject *__pyx_codeobj__165;
  PyObject *__pyx_codeobj__166;
  PyObject *__pyx_codeobj__167;
  PyObject *__pyx_codeobj__168;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__170;
  PyObject *__pyx_codeobj__171;
  PyObject *__pyx_codeobj__172;
  PyObject *__pyx_codeobj__173;
  PyObject *__pyx_codeobj__174;
  PyObject *__pyx_codeobj__175;
  PyObject *__pyx_codeobj__177;
  PyObject *__pyx_codeobj__178;
  PyObject *__pyx_codeobj__179;
  PyObject *__pyx_codeobj__181;
  PyObject *__pyx_codeobj__183;
  PyObject *__pyx_codeobj__185;
  PyObject *__pyx_codeobj__186;
  PyObject *__pyx_codeobj__188;
  PyObject *__pyx_codeobj__190;
  PyObject *__pyx_codeobj__192;
  PyObject *__pyx_codeobj__193;
  PyObject *__pyx_codeobj__194;
  PyObject *__pyx_codeobj__196;
  PyObject *__pyx_codeobj__197;
  PyObject *__pyx_codeobj__198;
  PyObject *__pyx_codeobj__199;
  PyObject *__pyx_codeobj__200;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyComparator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyComparator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyCache);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyCache);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyLRUCache);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PySliceTransform);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyTableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_CompressionType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_CompactionPri);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_Options);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_Options);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_Snapshot);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_Snapshot);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_ReversedIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_WriteBatch);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_DB);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_DB);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_TransactionDB);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_BaseIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_ItemsIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_ValuesIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_KeysIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_Checkpoint);
  Py_CLEAR(clear_module_state->__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);
  Py_CLEAR(clear_module_state->__pyx_type_7rocksdb_8_rocksdb_BackupEngine);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssociativeMergeOperator);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_create_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_delete_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_get_backup_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_purge_old_backups);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_restore_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_restore_latest_back);
  Py_CLEAR(clear_module_state->__pyx_n_s_BackupEngine_stop_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseException);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___reversed);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator_seek_for_prev);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator_seek_to_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator_seek_to_last);
  Py_CLEAR(clear_module_state->__pyx_n_s_BlockBasedTableFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_BlockBasedTableFactory___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_BlockBasedTableFactory___setstat);
  Py_CLEAR(clear_module_state->__pyx_n_s_BloomFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_n_s_BytewiseComparator);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_set_filter_policy_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_set_s_as_comparator);
  Py_CLEAR(clear_module_state->__pyx_n_s_Checkpoint);
  Py_CLEAR(clear_module_state->__pyx_n_s_Checkpoint___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Checkpoint___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Checkpoint_create_checkpoint);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyHandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyHandle___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyHandle___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyHandle___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyHandle___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ColumnFamilyHandle_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyOptions);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyOptions___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ColumnFamilyOptions___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ColumnFamilyOptions_are_in_use_b);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ColumnFamilyOptions_object_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_CompactionPri);
  Py_CLEAR(clear_module_state->__pyx_n_s_CompactionPri___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_CompactionPri___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Comparator);
  Py_CLEAR(clear_module_state->__pyx_n_s_CompressionType);
  Py_CLEAR(clear_module_state->__pyx_n_s_CompressionType___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_CompressionType___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_Corruption);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___parse_read_opts);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB__parse_read_opts);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_build_read_opts_locals_make_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_compact_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_create_column_family);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_drop_column_family);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get_column_family);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get_column_family_meta_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get_live_files_metadata);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get_property);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_iteritems);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_iterkeys);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_iterskeys);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_itersvalues);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_itervalues);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_key_may_exist);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_merge);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_multi_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_try_catch_up_with_primary);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_write);
  Py_CLEAR(clear_module_state->__pyx_n_u_Delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_Error);
  Py_CLEAR(clear_module_state->__pyx_n_s_FilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_n_s_HashLinkListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_HashLinkListMemtableFactory___re);
  Py_CLEAR(clear_module_state->__pyx_n_s_HashLinkListMemtableFactory___se);
  Py_CLEAR(clear_module_state->__pyx_n_s_HashSkipListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_HashSkipListMemtableFactory___re);
  Py_CLEAR(clear_module_state->__pyx_n_s_HashSkipListMemtableFactory___se);
  Py_CLEAR(clear_module_state->__pyx_n_s_IAssociativeMergeOperator);
  Py_CLEAR(clear_module_state->__pyx_n_s_IComparator);
  Py_CLEAR(clear_module_state->__pyx_n_s_IFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_n_s_IMergeOperator);
  Py_CLEAR(clear_module_state->__pyx_n_s_ISliceTransform);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Incomplete);
  Py_CLEAR(clear_module_state->__pyx_n_s_IncreaseParallelism);
  Py_CLEAR(clear_module_state->__pyx_n_s_InvalidArgument);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_read_tier);
  Py_CLEAR(clear_module_state->__pyx_n_s_ItemsIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ItemsIterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeysIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeysIterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_LRUCache);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_u_Merge);
  Py_CLEAR(clear_module_state->__pyx_n_s_MergeInProgress);
  Py_CLEAR(clear_module_state->__pyx_n_s_MergeOperator);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotFound);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplemented);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotSupported);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options_IncreaseParallelism);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Options_object_is_already_used_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_PlainTableFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_PlainTableFactory___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_PlainTableFactory___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_u_Put);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBloomFilterPolicy___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBloomFilterPolicy___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBloomFilterPolicy_create_filte);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBloomFilterPolicy_key_may_matc);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBloomFilterPolicy_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBytewiseComparator___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBytewiseComparator___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBytewiseComparator_compare);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyBytewiseComparator_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyCache___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyCache___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyComparator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyComparator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyFilterPolicy___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyFilterPolicy___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGenericComparator___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGenericComparator___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGenericFilterPolicy___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyGenericFilterPolicy___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyLRUCache___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyLRUCache___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyMemtableFactory___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyMemtableFactory___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyMergeOperator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyMergeOperator___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_PySliceTransform___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PySliceTransform___setstate_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyTableFactory___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PyTableFactory___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator___reversed);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator___setstate_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator_seek_for_prev);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator_seek_to_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReversedIterator_seek_to_last);
  Py_CLEAR(clear_module_state->__pyx_n_s_RocksIOError);
  Py_CLEAR(clear_module_state->__pyx_n_s_SkipListMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_SkipListMemtableFactory___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_SkipListMemtableFactory___setsta);
  Py_CLEAR(clear_module_state->__pyx_n_s_SliceTransform);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_kp_u_These_can_not_be_constructed_fro);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDB);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDBOptions);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDBOptions___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDBOptions___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDB___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDB___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionDB_close);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Transaction_Options_object_is_al);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_checksum_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_compaction_pri_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_compaction_style);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_compaction_style_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_compression_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_encoding_type_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_error_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_index_type_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_type_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_write_policy);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValuesIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValuesIterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_VectorMemtableFactory);
  Py_CLEAR(clear_module_state->__pyx_n_s_VectorMemtableFactory___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_VectorMemtableFactory___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatchIterator___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatchIterator___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_merge);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_put);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Wrong_type_for_path_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u__15);
  Py_CLEAR(clear_module_state->__pyx_n_s__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_s__201);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_n_u_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_dict);
  Py_CLEAR(clear_module_state->__pyx_n_u_ascii);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_backup_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_backup_id);
  Py_CLEAR(clear_module_state->__pyx_n_u_backup_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_backup_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_batch);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin_val);
  Py_CLEAR(clear_module_state->__pyx_n_u_binary_search);
  Py_CLEAR(clear_module_state->__pyx_n_s_bits_per_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_blc);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_cache);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_cache_compressed);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_restart_interval);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_size_deviation);
  Py_CLEAR(clear_module_state->__pyx_n_s_bloom_bits_per_key);
  Py_CLEAR(clear_module_state->__pyx_n_u_bottommost_level_compaction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_bottommost_level_compaction_is_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_bucket_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_by_compensated_size);
  Py_CLEAR(clear_module_state->__pyx_n_u_by_compensated_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_bzip2_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_bzip2_compression);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_backup_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_checkpoint_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_db_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_flush_before_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_num_backups_to_keep);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_prop);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_safe);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_wal_dir);
  Py_CLEAR(clear_module_state->__pyx_n_u_cache);
  Py_CLEAR(clear_module_state->__pyx_n_s_cache_index_and_filter_blocks);
  Py_CLEAR(clear_module_state->__pyx_n_s_capacity);
  Py_CLEAR(clear_module_state->__pyx_n_s_cf_handle);
  Py_CLEAR(clear_module_state->__pyx_n_s_cf_handles);
  Py_CLEAR(clear_module_state->__pyx_n_s_cf_iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_cfhandle);
  Py_CLEAR(clear_module_state->__pyx_n_u_change_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_checkpoint_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_column_families);
  Py_CLEAR(clear_module_state->__pyx_n_s_column_family);
  Py_CLEAR(clear_module_state->__pyx_kp_u_column_family_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_column_family_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_compact_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_compare);
  Py_CLEAR(clear_module_state->__pyx_n_s_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_compression_size_percent);
  Py_CLEAR(clear_module_state->__pyx_n_s_copts);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_u_crc32);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_checkpoint);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_column_family);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_filter);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_db_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_db_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_db_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_delete_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_disable_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_disable_compression);
  Py_CLEAR(clear_module_state->__pyx_n_s_disable_wal);
  Py_CLEAR(clear_module_state->__pyx_n_s_drop_column_family);
  Py_CLEAR(clear_module_state->__pyx_n_s_dst);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_u_enabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_encoding_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_val);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_errors);
  Py_CLEAR(clear_module_state->__pyx_n_s_exists);
  Py_CLEAR(clear_module_state->__pyx_n_s_fetch);
  Py_CLEAR(clear_module_state->__pyx_n_u_fifo);
  Py_CLEAR(clear_module_state->__pyx_n_u_file_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_cache);
  Py_CLEAR(clear_module_state->__pyx_n_u_fill_cache);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter_policy);
  Py_CLEAR(clear_module_state->__pyx_n_s_flush_before_backup);
  Py_CLEAR(clear_module_state->__pyx_n_u_force);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_exc);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_version);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromkeys);
  Py_CLEAR(clear_module_state->__pyx_n_s_full_merge);
  Py_CLEAR(clear_module_state->__pyx_n_s_full_scan_mode);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_backup_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_column_family);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_column_family_meta_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_live_files_metadata);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_property);
  Py_CLEAR(clear_module_state->__pyx_n_s_getfilesystemencoding);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_handle);
  Py_CLEAR(clear_module_state->__pyx_n_s_hash_index_allow_collision);
  Py_CLEAR(clear_module_state->__pyx_n_u_hash_search);
  Py_CLEAR(clear_module_state->__pyx_n_s_hash_table_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_huge_page_tlb_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_kp_u_id_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_if_compaction_filter);
  Py_CLEAR(clear_module_state->__pyx_n_s_ignore_missing_column_families);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_in_domain);
  Py_CLEAR(clear_module_state->__pyx_n_s_in_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_index_sparseness);
  Py_CLEAR(clear_module_state->__pyx_n_s_index_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_interfaces);
  Py_CLEAR(clear_module_state->__pyx_n_u_invalid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_already_an_existing_column_f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_already_used_by_another_Colu);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_no_longer_a_valid_ColumnFami);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_not_of_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_valid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_it);
  Py_CLEAR(clear_module_state->__pyx_n_s_it_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterate_bound);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterate_lower_bound);
  Py_CLEAR(clear_module_state->__pyx_n_u_iterate_lower_bound);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterate_upper_bound);
  Py_CLEAR(clear_module_state->__pyx_n_u_iterate_upper_bound);
  Py_CLEAR(clear_module_state->__pyx_n_s_iteritems);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterkeys);
  Py_CLEAR(clear_module_state->__pyx_n_s_iters);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterskeys);
  Py_CLEAR(clear_module_state->__pyx_n_s_itersvalues);
  Py_CLEAR(clear_module_state->__pyx_n_s_itervalues);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_key_may_exist);
  Py_CLEAR(clear_module_state->__pyx_n_s_key_may_match);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_u_largest_seqno);
  Py_CLEAR(clear_module_state->__pyx_n_u_largestkey);
  Py_CLEAR(clear_module_state->__pyx_n_u_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_column_families);
  Py_CLEAR(clear_module_state->__pyx_n_s_low_pri);
  Py_CLEAR(clear_module_state->__pyx_n_s_lz4_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_lz4_compression);
  Py_CLEAR(clear_module_state->__pyx_n_s_lz4hc_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_lz4hc_compression);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_make_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_u_max_dict_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_u_max_merge_width);
  Py_CLEAR(clear_module_state->__pyx_n_u_max_size_amplification_percent);
  Py_CLEAR(clear_module_state->__pyx_n_s_merge);
  Py_CLEAR(clear_module_state->__pyx_n_s_metadata);
  Py_CLEAR(clear_module_state->__pyx_n_u_min_merge_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_overlapping_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_u_min_overlapping_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_multi_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_u_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_no_block_cache);
  Py_CLEAR(clear_module_state->__pyx_n_s_no_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_no_compression);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_no_slowdown);
  Py_CLEAR(clear_module_state->__pyx_n_u_none);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_backups_to_keep);
  Py_CLEAR(clear_module_state->__pyx_n_s_ob);
  Py_CLEAR(clear_module_state->__pyx_kp_u_offset_i_size_i_is_bigger_than_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_oldest_largest_seq_first);
  Py_CLEAR(clear_module_state->__pyx_n_u_oldest_largest_seq_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_oldest_smallest_seq_first);
  Py_CLEAR(clear_module_state->__pyx_n_u_oldest_smallest_seq_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_opts);
  Py_CLEAR(clear_module_state->__pyx_n_u_parallel_threads);
  Py_CLEAR(clear_module_state->__pyx_n_s_parse_read_opts);
  Py_CLEAR(clear_module_state->__pyx_n_s_partial_merge);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_u_plain);
  Py_CLEAR(clear_module_state->__pyx_n_s_pop);
  Py_CLEAR(clear_module_state->__pyx_n_u_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix_extractor);
  Py_CLEAR(clear_module_state->__pyx_n_s_prop);
  Py_CLEAR(clear_module_state->__pyx_n_s_purge_old_backups);
  Py_CLEAR(clear_module_state->__pyx_n_s_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_py_handle);
  Py_CLEAR(clear_module_state->__pyx_n_s_py_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_CompactionPri);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_CompressionType);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_PyCache);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_PyComparator);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_PyFilterPolicy);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_only);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_tier);
  Py_CLEAR(clear_module_state->__pyx_n_u_read_tier);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref);
  Py_CLEAR(clear_module_state->__pyx_n_s_repair_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore_latest_backup);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_reversed);
  Py_CLEAR(clear_module_state->__pyx_n_s_rocksdb__rocksdb);
  Py_CLEAR(clear_module_state->__pyx_kp_s_rocksdb__rocksdb_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_u_row_cache_must_be_a_Cache_object);
  Py_CLEAR(clear_module_state->__pyx_kp_u_s_is_not_of_this_types_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_safe);
  Py_CLEAR(clear_module_state->__pyx_n_s_secondary_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_for_prev);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_to_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_to_last);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_factory_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_items_cannot_be_converted_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shard_bits);
  Py_CLEAR(clear_module_state->__pyx_n_u_similar_size);
  Py_CLEAR(clear_module_state->__pyx_n_u_size);
  Py_CLEAR(clear_module_state->__pyx_n_u_size_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_u_skip);
  Py_CLEAR(clear_module_state->__pyx_n_s_skiplist_branching_factor);
  Py_CLEAR(clear_module_state->__pyx_n_s_skiplist_height);
  Py_CLEAR(clear_module_state->__pyx_n_u_smallest_seqno);
  Py_CLEAR(clear_module_state->__pyx_n_u_smallestkey);
  Py_CLEAR(clear_module_state->__pyx_n_s_snappy_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_snappy_compression);
  Py_CLEAR(clear_module_state->__pyx_n_s_snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_u_snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_st);
  Py_CLEAR(clear_module_state->__pyx_kp_u_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_backup);
  Py_CLEAR(clear_module_state->__pyx_n_u_stop_style);
  Py_CLEAR(clear_module_state->__pyx_n_u_strategy);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_sync);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_t);
  Py_CLEAR(clear_module_state->__pyx_n_u_target_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_tdb_opts);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_u_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_order_seek);
  Py_CLEAR(clear_module_state->__pyx_n_u_total_order_seek);
  Py_CLEAR(clear_module_state->__pyx_n_u_total_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_threads);
  Py_CLEAR(clear_module_state->__pyx_n_s_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_transform);
  Py_CLEAR(clear_module_state->__pyx_n_s_try_catch_up_with_primary);
  Py_CLEAR(clear_module_state->__pyx_n_u_universal);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_user_key_len);
  Py_CLEAR(clear_module_state->__pyx_n_u_valid);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_value_found);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_verify_checksums);
  Py_CLEAR(clear_module_state->__pyx_n_u_verify_checksums);
  Py_CLEAR(clear_module_state->__pyx_n_s_wal_dir);
  Py_CLEAR(clear_module_state->__pyx_n_s_weak_handle);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakhandle);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakref);
  Py_CLEAR(clear_module_state->__pyx_n_s_whole_key_filtering);
  Py_CLEAR(clear_module_state->__pyx_n_u_window_bits);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_u_write_committed);
  Py_CLEAR(clear_module_state->__pyx_n_u_write_prepared);
  Py_CLEAR(clear_module_state->__pyx_n_u_write_unprepared);
  Py_CLEAR(clear_module_state->__pyx_n_s_xpress_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_xpress_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_xxhash);
  Py_CLEAR(clear_module_state->__pyx_n_s_zlib_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_zlib_compression);
  Py_CLEAR(clear_module_state->__pyx_n_s_zstd_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_zstd_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_zstd_max_train_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_zstdnotfinal_compression);
  Py_CLEAR(clear_module_state->__pyx_n_u_zstdnotfinal_compression);
  Py_CLEAR(clear_module_state->__pyx_float_0_75);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_10);
  Py_CLEAR(clear_module_state->__pyx_int_16);
  Py_CLEAR(clear_module_state->__pyx_int_50000);
  Py_CLEAR(clear_module_state->__pyx_int_1000000);
  Py_CLEAR(clear_module_state->__pyx_int_222419149);
  Py_CLEAR(clear_module_state->__pyx_int_228825662);
  Py_CLEAR(clear_module_state->__pyx_int_238750788);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__104);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__108);
  Py_CLEAR(clear_module_state->__pyx_tuple__110);
  Py_CLEAR(clear_module_state->__pyx_tuple__112);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__118);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__126);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__132);
  Py_CLEAR(clear_module_state->__pyx_tuple__133);
  Py_CLEAR(clear_module_state->__pyx_tuple__135);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__138);
  Py_CLEAR(clear_module_state->__pyx_tuple__143);
  Py_CLEAR(clear_module_state->__pyx_tuple__145);
  Py_CLEAR(clear_module_state->__pyx_tuple__152);
  Py_CLEAR(clear_module_state->__pyx_tuple__157);
  Py_CLEAR(clear_module_state->__pyx_tuple__176);
  Py_CLEAR(clear_module_state->__pyx_tuple__180);
  Py_CLEAR(clear_module_state->__pyx_tuple__182);
  Py_CLEAR(clear_module_state->__pyx_tuple__184);
  Py_CLEAR(clear_module_state->__pyx_tuple__187);
  Py_CLEAR(clear_module_state->__pyx_tuple__189);
  Py_CLEAR(clear_module_state->__pyx_tuple__191);
  Py_CLEAR(clear_module_state->__pyx_tuple__195);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__72);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__140);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__142);
  Py_CLEAR(clear_module_state->__pyx_codeobj__144);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__148);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__150);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__153);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__155);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__159);
  Py_CLEAR(clear_module_state->__pyx_codeobj__160);
  Py_CLEAR(clear_module_state->__pyx_codeobj__161);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__163);
  Py_CLEAR(clear_module_state->__pyx_codeobj__164);
  Py_CLEAR(clear_module_state->__pyx_codeobj__165);
  Py_CLEAR(clear_module_state->__pyx_codeobj__166);
  Py_CLEAR(clear_module_state->__pyx_codeobj__167);
  Py_CLEAR(clear_module_state->__pyx_codeobj__168);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__170);
  Py_CLEAR(clear_module_state->__pyx_codeobj__171);
  Py_CLEAR(clear_module_state->__pyx_codeobj__172);
  Py_CLEAR(clear_module_state->__pyx_codeobj__173);
  Py_CLEAR(clear_module_state->__pyx_codeobj__174);
  Py_CLEAR(clear_module_state->__pyx_codeobj__175);
  Py_CLEAR(clear_module_state->__pyx_codeobj__177);
  Py_CLEAR(clear_module_state->__pyx_codeobj__178);
  Py_CLEAR(clear_module_state->__pyx_codeobj__179);
  Py_CLEAR(clear_module_state->__pyx_codeobj__181);
  Py_CLEAR(clear_module_state->__pyx_codeobj__183);
  Py_CLEAR(clear_module_state->__pyx_codeobj__185);
  Py_CLEAR(clear_module_state->__pyx_codeobj__186);
  Py_CLEAR(clear_module_state->__pyx_codeobj__188);
  Py_CLEAR(clear_module_state->__pyx_codeobj__190);
  Py_CLEAR(clear_module_state->__pyx_codeobj__192);
  Py_CLEAR(clear_module_state->__pyx_codeobj__193);
  Py_CLEAR(clear_module_state->__pyx_codeobj__194);
  Py_CLEAR(clear_module_state->__pyx_codeobj__196);
  Py_CLEAR(clear_module_state->__pyx_codeobj__197);
  Py_CLEAR(clear_module_state->__pyx_codeobj__198);
  Py_CLEAR(clear_module_state->__pyx_codeobj__199);
  Py_CLEAR(clear_module_state->__pyx_codeobj__200);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyComparator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyComparator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyCache);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyCache);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyLRUCache);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PySliceTransform);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyTableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_CompressionType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_CompactionPri);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_Options);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_Options);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_Snapshot);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_Snapshot);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_ReversedIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_WriteBatch);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_DB);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_DB);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_TransactionDB);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_BaseIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_ItemsIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_ValuesIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_KeysIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_Checkpoint);
  Py_VISIT(traverse_module_state->__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);
  Py_VISIT(traverse_module_state->__pyx_type_7rocksdb_8_rocksdb_BackupEngine);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssociativeMergeOperator);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_create_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_delete_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_get_backup_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_purge_old_backups);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_restore_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_restore_latest_back);
  Py_VISIT(traverse_module_state->__pyx_n_s_BackupEngine_stop_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseException);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___reversed);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator_seek_for_prev);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator_seek_to_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator_seek_to_last);
  Py_VISIT(traverse_module_state->__pyx_n_s_BlockBasedTableFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_BlockBasedTableFactory___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_BlockBasedTableFactory___setstat);
  Py_VISIT(traverse_module_state->__pyx_n_s_BloomFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_n_s_BytewiseComparator);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_set_filter_policy_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_set_s_as_comparator);
  Py_VISIT(traverse_module_state->__pyx_n_s_Checkpoint);
  Py_VISIT(traverse_module_state->__pyx_n_s_Checkpoint___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Checkpoint___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Checkpoint_create_checkpoint);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyHandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyHandle___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyHandle___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyHandle___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyHandle___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ColumnFamilyHandle_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyOptions);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyOptions___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ColumnFamilyOptions___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ColumnFamilyOptions_are_in_use_b);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ColumnFamilyOptions_object_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_CompactionPri);
  Py_VISIT(traverse_module_state->__pyx_n_s_CompactionPri___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_CompactionPri___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Comparator);
  Py_VISIT(traverse_module_state->__pyx_n_s_CompressionType);
  Py_VISIT(traverse_module_state->__pyx_n_s_CompressionType___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_CompressionType___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_Corruption);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___parse_read_opts);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB__parse_read_opts);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_build_read_opts_locals_make_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_compact_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_create_column_family);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_drop_column_family);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get_column_family);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get_column_family_meta_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get_live_files_metadata);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get_property);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_iteritems);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_iterkeys);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_iterskeys);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_itersvalues);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_itervalues);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_key_may_exist);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_merge);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_multi_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_try_catch_up_with_primary);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_write);
  Py_VISIT(traverse_module_state->__pyx_n_u_Delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_Error);
  Py_VISIT(traverse_module_state->__pyx_n_s_FilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_n_s_HashLinkListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_HashLinkListMemtableFactory___re);
  Py_VISIT(traverse_module_state->__pyx_n_s_HashLinkListMemtableFactory___se);
  Py_VISIT(traverse_module_state->__pyx_n_s_HashSkipListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_HashSkipListMemtableFactory___re);
  Py_VISIT(traverse_module_state->__pyx_n_s_HashSkipListMemtableFactory___se);
  Py_VISIT(traverse_module_state->__pyx_n_s_IAssociativeMergeOperator);
  Py_VISIT(traverse_module_state->__pyx_n_s_IComparator);
  Py_VISIT(traverse_module_state->__pyx_n_s_IFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_n_s_IMergeOperator);
  Py_VISIT(traverse_module_state->__pyx_n_s_ISliceTransform);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Incomplete);
  Py_VISIT(traverse_module_state->__pyx_n_s_IncreaseParallelism);
  Py_VISIT(traverse_module_state->__pyx_n_s_InvalidArgument);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_read_tier);
  Py_VISIT(traverse_module_state->__pyx_n_s_ItemsIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ItemsIterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeysIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeysIterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_LRUCache);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_u_Merge);
  Py_VISIT(traverse_module_state->__pyx_n_s_MergeInProgress);
  Py_VISIT(traverse_module_state->__pyx_n_s_MergeOperator);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotFound);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplemented);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotSupported);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options_IncreaseParallelism);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Options_object_is_already_used_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_PlainTableFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_PlainTableFactory___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_PlainTableFactory___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_u_Put);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBloomFilterPolicy___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBloomFilterPolicy___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBloomFilterPolicy_create_filte);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBloomFilterPolicy_key_may_matc);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBloomFilterPolicy_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBytewiseComparator___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBytewiseComparator___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBytewiseComparator_compare);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyBytewiseComparator_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyCache___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyCache___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyComparator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyComparator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyFilterPolicy___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyFilterPolicy___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGenericComparator___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGenericComparator___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGenericFilterPolicy___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyGenericFilterPolicy___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyLRUCache___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyLRUCache___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyMemtableFactory___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyMemtableFactory___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyMergeOperator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyMergeOperator___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_PySliceTransform___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PySliceTransform___setstate_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyTableFactory___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PyTableFactory___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator___reversed);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator___setstate_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator_seek_for_prev);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator_seek_to_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReversedIterator_seek_to_last);
  Py_VISIT(traverse_module_state->__pyx_n_s_RocksIOError);
  Py_VISIT(traverse_module_state->__pyx_n_s_SkipListMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_SkipListMemtableFactory___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_SkipListMemtableFactory___setsta);
  Py_VISIT(traverse_module_state->__pyx_n_s_SliceTransform);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_kp_u_These_can_not_be_constructed_fro);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDB);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDBOptions);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDBOptions___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDBOptions___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDB___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDB___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionDB_close);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Transaction_Options_object_is_al);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_checksum_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_compaction_pri_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_compaction_style);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_compaction_style_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_compression_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_encoding_type_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_error_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_index_type_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_type_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_write_policy);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValuesIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValuesIterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_VectorMemtableFactory);
  Py_VISIT(traverse_module_state->__pyx_n_s_VectorMemtableFactory___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_VectorMemtableFactory___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatchIterator___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatchIterator___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_merge);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_put);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Wrong_type_for_path_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u__15);
  Py_VISIT(traverse_module_state->__pyx_n_s__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_s__201);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_n_u_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_dict);
  Py_VISIT(traverse_module_state->__pyx_n_u_ascii);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_backup_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_backup_id);
  Py_VISIT(traverse_module_state->__pyx_n_u_backup_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_backup_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_batch);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin_val);
  Py_VISIT(traverse_module_state->__pyx_n_u_binary_search);
  Py_VISIT(traverse_module_state->__pyx_n_s_bits_per_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_blc);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_cache);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_cache_compressed);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_restart_interval);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_size_deviation);
  Py_VISIT(traverse_module_state->__pyx_n_s_bloom_bits_per_key);
  Py_VISIT(traverse_module_state->__pyx_n_u_bottommost_level_compaction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_bottommost_level_compaction_is_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_bucket_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_by_compensated_size);
  Py_VISIT(traverse_module_state->__pyx_n_u_by_compensated_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_bzip2_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_bzip2_compression);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_backup_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_checkpoint_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_db_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_flush_before_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_num_backups_to_keep);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_prop);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_safe);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_wal_dir);
  Py_VISIT(traverse_module_state->__pyx_n_u_cache);
  Py_VISIT(traverse_module_state->__pyx_n_s_cache_index_and_filter_blocks);
  Py_VISIT(traverse_module_state->__pyx_n_s_capacity);
  Py_VISIT(traverse_module_state->__pyx_n_s_cf_handle);
  Py_VISIT(traverse_module_state->__pyx_n_s_cf_handles);
  Py_VISIT(traverse_module_state->__pyx_n_s_cf_iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_cfhandle);
  Py_VISIT(traverse_module_state->__pyx_n_u_change_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_checkpoint_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_column_families);
  Py_VISIT(traverse_module_state->__pyx_n_s_column_family);
  Py_VISIT(traverse_module_state->__pyx_kp_u_column_family_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_column_family_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_compact_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_compare);
  Py_VISIT(traverse_module_state->__pyx_n_s_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_compression_size_percent);
  Py_VISIT(traverse_module_state->__pyx_n_s_copts);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_u_crc32);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_checkpoint);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_column_family);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_filter);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_db_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_db_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_db_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_delete_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_disable_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_disable_compression);
  Py_VISIT(traverse_module_state->__pyx_n_s_disable_wal);
  Py_VISIT(traverse_module_state->__pyx_n_s_drop_column_family);
  Py_VISIT(traverse_module_state->__pyx_n_s_dst);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_u_enabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_encoding_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_val);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_errors);
  Py_VISIT(traverse_module_state->__pyx_n_s_exists);
  Py_VISIT(traverse_module_state->__pyx_n_s_fetch);
  Py_VISIT(traverse_module_state->__pyx_n_u_fifo);
  Py_VISIT(traverse_module_state->__pyx_n_u_file_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_cache);
  Py_VISIT(traverse_module_state->__pyx_n_u_fill_cache);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter_policy);
  Py_VISIT(traverse_module_state->__pyx_n_s_flush_before_backup);
  Py_VISIT(traverse_module_state->__pyx_n_u_force);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_exc);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_version);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromkeys);
  Py_VISIT(traverse_module_state->__pyx_n_s_full_merge);
  Py_VISIT(traverse_module_state->__pyx_n_s_full_scan_mode);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_backup_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_column_family);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_column_family_meta_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_live_files_metadata);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_property);
  Py_VISIT(traverse_module_state->__pyx_n_s_getfilesystemencoding);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_handle);
  Py_VISIT(traverse_module_state->__pyx_n_s_hash_index_allow_collision);
  Py_VISIT(traverse_module_state->__pyx_n_u_hash_search);
  Py_VISIT(traverse_module_state->__pyx_n_s_hash_table_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_huge_page_tlb_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_kp_u_id_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_if_compaction_filter);
  Py_VISIT(traverse_module_state->__pyx_n_s_ignore_missing_column_families);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_in_domain);
  Py_VISIT(traverse_module_state->__pyx_n_s_in_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_index_sparseness);
  Py_VISIT(traverse_module_state->__pyx_n_s_index_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_interfaces);
  Py_VISIT(traverse_module_state->__pyx_n_u_invalid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_already_an_existing_column_f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_already_used_by_another_Colu);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_no_longer_a_valid_ColumnFami);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_not_of_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_valid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_it);
  Py_VISIT(traverse_module_state->__pyx_n_s_it_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterate_bound);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterate_lower_bound);
  Py_VISIT(traverse_module_state->__pyx_n_u_iterate_lower_bound);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterate_upper_bound);
  Py_VISIT(traverse_module_state->__pyx_n_u_iterate_upper_bound);
  Py_VISIT(traverse_module_state->__pyx_n_s_iteritems);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterkeys);
  Py_VISIT(traverse_module_state->__pyx_n_s_iters);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterskeys);
  Py_VISIT(traverse_module_state->__pyx_n_s_itersvalues);
  Py_VISIT(traverse_module_state->__pyx_n_s_itervalues);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_key_may_exist);
  Py_VISIT(traverse_module_state->__pyx_n_s_key_may_match);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_u_largest_seqno);
  Py_VISIT(traverse_module_state->__pyx_n_u_largestkey);
  Py_VISIT(traverse_module_state->__pyx_n_u_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_column_families);
  Py_VISIT(traverse_module_state->__pyx_n_s_low_pri);
  Py_VISIT(traverse_module_state->__pyx_n_s_lz4_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_lz4_compression);
  Py_VISIT(traverse_module_state->__pyx_n_s_lz4hc_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_lz4hc_compression);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_make_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_u_max_dict_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_u_max_merge_width);
  Py_VISIT(traverse_module_state->__pyx_n_u_max_size_amplification_percent);
  Py_VISIT(traverse_module_state->__pyx_n_s_merge);
  Py_VISIT(traverse_module_state->__pyx_n_s_metadata);
  Py_VISIT(traverse_module_state->__pyx_n_u_min_merge_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_overlapping_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_u_min_overlapping_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_multi_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_u_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_no_block_cache);
  Py_VISIT(traverse_module_state->__pyx_n_s_no_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_no_compression);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_no_slowdown);
  Py_VISIT(traverse_module_state->__pyx_n_u_none);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_backups_to_keep);
  Py_VISIT(traverse_module_state->__pyx_n_s_ob);
  Py_VISIT(traverse_module_state->__pyx_kp_u_offset_i_size_i_is_bigger_than_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_oldest_largest_seq_first);
  Py_VISIT(traverse_module_state->__pyx_n_u_oldest_largest_seq_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_oldest_smallest_seq_first);
  Py_VISIT(traverse_module_state->__pyx_n_u_oldest_smallest_seq_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_opts);
  Py_VISIT(traverse_module_state->__pyx_n_u_parallel_threads);
  Py_VISIT(traverse_module_state->__pyx_n_s_parse_read_opts);
  Py_VISIT(traverse_module_state->__pyx_n_s_partial_merge);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_u_plain);
  Py_VISIT(traverse_module_state->__pyx_n_s_pop);
  Py_VISIT(traverse_module_state->__pyx_n_u_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix_extractor);
  Py_VISIT(traverse_module_state->__pyx_n_s_prop);
  Py_VISIT(traverse_module_state->__pyx_n_s_purge_old_backups);
  Py_VISIT(traverse_module_state->__pyx_n_s_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_py_handle);
  Py_VISIT(traverse_module_state->__pyx_n_s_py_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_CompactionPri);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_CompressionType);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_PyCache);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_PyComparator);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_PyFilterPolicy);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_only);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_tier);
  Py_VISIT(traverse_module_state->__pyx_n_u_read_tier);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref);
  Py_VISIT(traverse_module_state->__pyx_n_s_repair_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore_latest_backup);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_reversed);
  Py_VISIT(traverse_module_state->__pyx_n_s_rocksdb__rocksdb);
  Py_VISIT(traverse_module_state->__pyx_kp_s_rocksdb__rocksdb_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_u_row_cache_must_be_a_Cache_object);
  Py_VISIT(traverse_module_state->__pyx_kp_u_s_is_not_of_this_types_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_safe);
  Py_VISIT(traverse_module_state->__pyx_n_s_secondary_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_for_prev);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_to_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_to_last);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_factory_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_items_cannot_be_converted_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shard_bits);
  Py_VISIT(traverse_module_state->__pyx_n_u_similar_size);
  Py_VISIT(traverse_module_state->__pyx_n_u_size);
  Py_VISIT(traverse_module_state->__pyx_n_u_size_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_u_skip);
  Py_VISIT(traverse_module_state->__pyx_n_s_skiplist_branching_factor);
  Py_VISIT(traverse_module_state->__pyx_n_s_skiplist_height);
  Py_VISIT(traverse_module_state->__pyx_n_u_smallest_seqno);
  Py_VISIT(traverse_module_state->__pyx_n_u_smallestkey);
  Py_VISIT(traverse_module_state->__pyx_n_s_snappy_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_snappy_compression);
  Py_VISIT(traverse_module_state->__pyx_n_s_snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_u_snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_st);
  Py_VISIT(traverse_module_state->__pyx_kp_u_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_backup);
  Py_VISIT(traverse_module_state->__pyx_n_u_stop_style);
  Py_VISIT(traverse_module_state->__pyx_n_u_strategy);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_sync);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_t);
  Py_VISIT(traverse_module_state->__pyx_n_u_target_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_tdb_opts);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_u_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_order_seek);
  Py_VISIT(traverse_module_state->__pyx_n_u_total_order_seek);
  Py_VISIT(traverse_module_state->__pyx_n_u_total_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_threads);
  Py_VISIT(traverse_module_state->__pyx_n_s_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_transform);
  Py_VISIT(traverse_module_state->__pyx_n_s_try_catch_up_with_primary);
  Py_VISIT(traverse_module_state->__pyx_n_u_universal);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_user_key_len);
  Py_VISIT(traverse_module_state->__pyx_n_u_valid);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_value_found);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_verify_checksums);
  Py_VISIT(traverse_module_state->__pyx_n_u_verify_checksums);
  Py_VISIT(traverse_module_state->__pyx_n_s_wal_dir);
  Py_VISIT(traverse_module_state->__pyx_n_s_weak_handle);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakhandle);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakref);
  Py_VISIT(traverse_module_state->__pyx_n_s_whole_key_filtering);
  Py_VISIT(traverse_module_state->__pyx_n_u_window_bits);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_u_write_committed);
  Py_VISIT(traverse_module_state->__pyx_n_u_write_prepared);
  Py_VISIT(traverse_module_state->__pyx_n_u_write_unprepared);
  Py_VISIT(traverse_module_state->__pyx_n_s_xpress_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_xpress_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_xxhash);
  Py_VISIT(traverse_module_state->__pyx_n_s_zlib_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_zlib_compression);
  Py_VISIT(traverse_module_state->__pyx_n_s_zstd_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_zstd_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_zstd_max_train_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_zstdnotfinal_compression);
  Py_VISIT(traverse_module_state->__pyx_n_u_zstdnotfinal_compression);
  Py_VISIT(traverse_module_state->__pyx_float_0_75);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_10);
  Py_VISIT(traverse_module_state->__pyx_int_16);
  Py_VISIT(traverse_module_state->__pyx_int_50000);
  Py_VISIT(traverse_module_state->__pyx_int_1000000);
  Py_VISIT(traverse_module_state->__pyx_int_222419149);
  Py_VISIT(traverse_module_state->__pyx_int_228825662);
  Py_VISIT(traverse_module_state->__pyx_int_238750788);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__104);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__108);
  Py_VISIT(traverse_module_state->__pyx_tuple__110);
  Py_VISIT(traverse_module_state->__pyx_tuple__112);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__118);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__126);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__132);
  Py_VISIT(traverse_module_state->__pyx_tuple__133);
  Py_VISIT(traverse_module_state->__pyx_tuple__135);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__138);
  Py_VISIT(traverse_module_state->__pyx_tuple__143);
  Py_VISIT(traverse_module_state->__pyx_tuple__145);
  Py_VISIT(traverse_module_state->__pyx_tuple__152);
  Py_VISIT(traverse_module_state->__pyx_tuple__157);
  Py_VISIT(traverse_module_state->__pyx_tuple__176);
  Py_VISIT(traverse_module_state->__pyx_tuple__180);
  Py_VISIT(traverse_module_state->__pyx_tuple__182);
  Py_VISIT(traverse_module_state->__pyx_tuple__184);
  Py_VISIT(traverse_module_state->__pyx_tuple__187);
  Py_VISIT(traverse_module_state->__pyx_tuple__189);
  Py_VISIT(traverse_module_state->__pyx_tuple__191);
  Py_VISIT(traverse_module_state->__pyx_tuple__195);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__72);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__140);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__142);
  Py_VISIT(traverse_module_state->__pyx_codeobj__144);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__148);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__150);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__153);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__155);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__159);
  Py_VISIT(traverse_module_state->__pyx_codeobj__160);
  Py_VISIT(traverse_module_state->__pyx_codeobj__161);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__163);
  Py_VISIT(traverse_module_state->__pyx_codeobj__164);
  Py_VISIT(traverse_module_state->__pyx_codeobj__165);
  Py_VISIT(traverse_module_state->__pyx_codeobj__166);
  Py_VISIT(traverse_module_state->__pyx_codeobj__167);
  Py_VISIT(traverse_module_state->__pyx_codeobj__168);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__170);
  Py_VISIT(traverse_module_state->__pyx_codeobj__171);
  Py_VISIT(traverse_module_state->__pyx_codeobj__172);
  Py_VISIT(traverse_module_state->__pyx_codeobj__173);
  Py_VISIT(traverse_module_state->__pyx_codeobj__174);
  Py_VISIT(traverse_module_state->__pyx_codeobj__175);
  Py_VISIT(traverse_module_state->__pyx_codeobj__177);
  Py_VISIT(traverse_module_state->__pyx_codeobj__178);
  Py_VISIT(traverse_module_state->__pyx_codeobj__179);
  Py_VISIT(traverse_module_state->__pyx_codeobj__181);
  Py_VISIT(traverse_module_state->__pyx_codeobj__183);
  Py_VISIT(traverse_module_state->__pyx_codeobj__185);
  Py_VISIT(traverse_module_state->__pyx_codeobj__186);
  Py_VISIT(traverse_module_state->__pyx_codeobj__188);
  Py_VISIT(traverse_module_state->__pyx_codeobj__190);
  Py_VISIT(traverse_module_state->__pyx_codeobj__192);
  Py_VISIT(traverse_module_state->__pyx_codeobj__193);
  Py_VISIT(traverse_module_state->__pyx_codeobj__194);
  Py_VISIT(traverse_module_state->__pyx_codeobj__196);
  Py_VISIT(traverse_module_state->__pyx_codeobj__197);
  Py_VISIT(traverse_module_state->__pyx_codeobj__198);
  Py_VISIT(traverse_module_state->__pyx_codeobj__199);
  Py_VISIT(traverse_module_state->__pyx_codeobj__200);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_7rocksdb_8_rocksdb_PyComparator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyComparator
#define __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator
#define __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator
#define __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy
#define __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy
#define __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy
#define __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator
#define __pyx_type_7rocksdb_8_rocksdb_PyCache __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyCache
#define __pyx_type_7rocksdb_8_rocksdb_PyLRUCache __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyLRUCache
#define __pyx_type_7rocksdb_8_rocksdb_PySliceTransform __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PySliceTransform
#define __pyx_type_7rocksdb_8_rocksdb_PyTableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyTableFactory
#define __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory
#define __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory
#define __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory
#define __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory
#define __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory
#define __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory
#define __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory
#define __pyx_type_7rocksdb_8_rocksdb_CompressionType __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_CompressionType
#define __pyx_type_7rocksdb_8_rocksdb_CompactionPri __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_CompactionPri
#define __pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle
#define __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle
#define __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions
#define __pyx_type_7rocksdb_8_rocksdb_Options __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_Options
#define __pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions
#define __pyx_type_7rocksdb_8_rocksdb_Snapshot __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_Snapshot
#define __pyx_type_7rocksdb_8_rocksdb_ReversedIterator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_ReversedIterator
#define __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator
#define __pyx_type_7rocksdb_8_rocksdb_WriteBatch __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_WriteBatch
#define __pyx_type_7rocksdb_8_rocksdb_DB __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_DB
#define __pyx_type_7rocksdb_8_rocksdb_TransactionDB __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_TransactionDB
#define __pyx_type_7rocksdb_8_rocksdb_BaseIterator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_BaseIterator
#define __pyx_type_7rocksdb_8_rocksdb_ItemsIterator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_ItemsIterator
#define __pyx_type_7rocksdb_8_rocksdb_ValuesIterator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_ValuesIterator
#define __pyx_type_7rocksdb_8_rocksdb_KeysIterator __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_KeysIterator
#define __pyx_type_7rocksdb_8_rocksdb_Checkpoint __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_Checkpoint
#define __pyx_type_7rocksdb_8_rocksdb_BackupEngine __pyx_mstate_global->__pyx_type_7rocksdb_8_rocksdb_BackupEngine
#endif
#define __pyx_ptype_7rocksdb_8_rocksdb_PyComparator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyComparator
#define __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator
#define __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator
#define __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy
#define __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy
#define __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy
#define __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator
#define __pyx_ptype_7rocksdb_8_rocksdb_PyCache __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyCache
#define __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache
#define __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform
#define __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory
#define __pyx_ptype_7rocksdb_8_rocksdb_CompressionType __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_CompressionType
#define __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri
#define __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle
#define __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle
#define __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions
#define __pyx_ptype_7rocksdb_8_rocksdb_Options __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_Options
#define __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions
#define __pyx_ptype_7rocksdb_8_rocksdb_Snapshot __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_Snapshot
#define __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator
#define __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator
#define __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch
#define __pyx_ptype_7rocksdb_8_rocksdb_DB __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_DB
#define __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB
#define __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator
#define __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator
#define __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator
#define __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator
#define __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint
#define __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine __pyx_mstate_global->__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine
#define __pyx_n_s_AssociativeMergeOperator __pyx_mstate_global->__pyx_n_s_AssociativeMergeOperator
#define __pyx_n_s_BackupEngine __pyx_mstate_global->__pyx_n_s_BackupEngine
#define __pyx_n_s_BackupEngine___reduce_cython __pyx_mstate_global->__pyx_n_s_BackupEngine___reduce_cython
#define __pyx_n_s_BackupEngine___setstate_cython __pyx_mstate_global->__pyx_n_s_BackupEngine___setstate_cython
#define __pyx_n_s_BackupEngine_create_backup __pyx_mstate_global->__pyx_n_s_BackupEngine_create_backup
#define __pyx_n_s_BackupEngine_delete_backup __pyx_mstate_global->__pyx_n_s_BackupEngine_delete_backup
#define __pyx_n_s_BackupEngine_get_backup_info __pyx_mstate_global->__pyx_n_s_BackupEngine_get_backup_info
#define __pyx_n_s_BackupEngine_purge_old_backups __pyx_mstate_global->__pyx_n_s_BackupEngine_purge_old_backups
#define __pyx_n_s_BackupEngine_restore_backup __pyx_mstate_global->__pyx_n_s_BackupEngine_restore_backup
#define __pyx_n_s_BackupEngine_restore_latest_back __pyx_mstate_global->__pyx_n_s_BackupEngine_restore_latest_back
#define __pyx_n_s_BackupEngine_stop_backup __pyx_mstate_global->__pyx_n_s_BackupEngine_stop_backup
#define __pyx_n_s_BaseException __pyx_mstate_global->__pyx_n_s_BaseException
#define __pyx_n_s_BaseIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_BaseIterator___reduce_cython
#define __pyx_n_s_BaseIterator___reversed __pyx_mstate_global->__pyx_n_s_BaseIterator___reversed
#define __pyx_n_s_BaseIterator___setstate_cython __pyx_mstate_global->__pyx_n_s_BaseIterator___setstate_cython
#define __pyx_n_s_BaseIterator_get __pyx_mstate_global->__pyx_n_s_BaseIterator_get
#define __pyx_n_s_BaseIterator_seek __pyx_mstate_global->__pyx_n_s_BaseIterator_seek
#define __pyx_n_s_BaseIterator_seek_for_prev __pyx_mstate_global->__pyx_n_s_BaseIterator_seek_for_prev
#define __pyx_n_s_BaseIterator_seek_to_first __pyx_mstate_global->__pyx_n_s_BaseIterator_seek_to_first
#define __pyx_n_s_BaseIterator_seek_to_last __pyx_mstate_global->__pyx_n_s_BaseIterator_seek_to_last
#define __pyx_n_s_BlockBasedTableFactory __pyx_mstate_global->__pyx_n_s_BlockBasedTableFactory
#define __pyx_n_s_BlockBasedTableFactory___reduce __pyx_mstate_global->__pyx_n_s_BlockBasedTableFactory___reduce
#define __pyx_n_s_BlockBasedTableFactory___setstat __pyx_mstate_global->__pyx_n_s_BlockBasedTableFactory___setstat
#define __pyx_n_s_BloomFilterPolicy __pyx_mstate_global->__pyx_n_s_BloomFilterPolicy
#define __pyx_n_s_BytewiseComparator __pyx_mstate_global->__pyx_n_s_BytewiseComparator
#define __pyx_kp_u_Cannot_set_filter_policy_s __pyx_mstate_global->__pyx_kp_u_Cannot_set_filter_policy_s
#define __pyx_kp_u_Cannot_set_s_as_comparator __pyx_mstate_global->__pyx_kp_u_Cannot_set_s_as_comparator
#define __pyx_n_s_Checkpoint __pyx_mstate_global->__pyx_n_s_Checkpoint
#define __pyx_n_s_Checkpoint___reduce_cython __pyx_mstate_global->__pyx_n_s_Checkpoint___reduce_cython
#define __pyx_n_s_Checkpoint___setstate_cython __pyx_mstate_global->__pyx_n_s_Checkpoint___setstate_cython
#define __pyx_n_s_Checkpoint_create_checkpoint __pyx_mstate_global->__pyx_n_s_Checkpoint_create_checkpoint
#define __pyx_n_s_ColumnFamilyHandle __pyx_mstate_global->__pyx_n_s_ColumnFamilyHandle
#define __pyx_n_s_ColumnFamilyHandle___reduce_cyt __pyx_mstate_global->__pyx_n_s_ColumnFamilyHandle___reduce_cyt
#define __pyx_n_s_ColumnFamilyHandle___reduce_cyth __pyx_mstate_global->__pyx_n_s_ColumnFamilyHandle___reduce_cyth
#define __pyx_n_s_ColumnFamilyHandle___setstate_c __pyx_mstate_global->__pyx_n_s_ColumnFamilyHandle___setstate_c
#define __pyx_n_s_ColumnFamilyHandle___setstate_cy __pyx_mstate_global->__pyx_n_s_ColumnFamilyHandle___setstate_cy
#define __pyx_kp_u_ColumnFamilyHandle_name __pyx_mstate_global->__pyx_kp_u_ColumnFamilyHandle_name
#define __pyx_n_s_ColumnFamilyOptions __pyx_mstate_global->__pyx_n_s_ColumnFamilyOptions
#define __pyx_n_s_ColumnFamilyOptions___reduce_cyt __pyx_mstate_global->__pyx_n_s_ColumnFamilyOptions___reduce_cyt
#define __pyx_n_s_ColumnFamilyOptions___setstate_c __pyx_mstate_global->__pyx_n_s_ColumnFamilyOptions___setstate_c
#define __pyx_kp_u_ColumnFamilyOptions_are_in_use_b __pyx_mstate_global->__pyx_kp_u_ColumnFamilyOptions_are_in_use_b
#define __pyx_kp_u_ColumnFamilyOptions_object_for __pyx_mstate_global->__pyx_kp_u_ColumnFamilyOptions_object_for
#define __pyx_n_s_CompactionPri __pyx_mstate_global->__pyx_n_s_CompactionPri
#define __pyx_n_s_CompactionPri___reduce_cython __pyx_mstate_global->__pyx_n_s_CompactionPri___reduce_cython
#define __pyx_n_s_CompactionPri___setstate_cython __pyx_mstate_global->__pyx_n_s_CompactionPri___setstate_cython
#define __pyx_n_s_Comparator __pyx_mstate_global->__pyx_n_s_Comparator
#define __pyx_n_s_CompressionType __pyx_mstate_global->__pyx_n_s_CompressionType
#define __pyx_n_s_CompressionType___reduce_cython __pyx_mstate_global->__pyx_n_s_CompressionType___reduce_cython
#define __pyx_n_s_CompressionType___setstate_cytho __pyx_mstate_global->__pyx_n_s_CompressionType___setstate_cytho
#define __pyx_n_s_Corruption __pyx_mstate_global->__pyx_n_s_Corruption
#define __pyx_n_s_DB __pyx_mstate_global->__pyx_n_s_DB
#define __pyx_n_s_DB___parse_read_opts __pyx_mstate_global->__pyx_n_s_DB___parse_read_opts
#define __pyx_n_s_DB___reduce_cython __pyx_mstate_global->__pyx_n_s_DB___reduce_cython
#define __pyx_n_s_DB___setstate_cython __pyx_mstate_global->__pyx_n_s_DB___setstate_cython
#define __pyx_n_s_DB__parse_read_opts __pyx_mstate_global->__pyx_n_s_DB__parse_read_opts
#define __pyx_n_s_DB_build_read_opts_locals_make_b __pyx_mstate_global->__pyx_n_s_DB_build_read_opts_locals_make_b
#define __pyx_n_s_DB_close __pyx_mstate_global->__pyx_n_s_DB_close
#define __pyx_n_s_DB_compact_range __pyx_mstate_global->__pyx_n_s_DB_compact_range
#define __pyx_n_s_DB_create_column_family __pyx_mstate_global->__pyx_n_s_DB_create_column_family
#define __pyx_n_s_DB_delete __pyx_mstate_global->__pyx_n_s_DB_delete
#define __pyx_n_s_DB_drop_column_family __pyx_mstate_global->__pyx_n_s_DB_drop_column_family
#define __pyx_n_s_DB_get __pyx_mstate_global->__pyx_n_s_DB_get
#define __pyx_n_s_DB_get_column_family __pyx_mstate_global->__pyx_n_s_DB_get_column_family
#define __pyx_n_s_DB_get_column_family_meta_data __pyx_mstate_global->__pyx_n_s_DB_get_column_family_meta_data
#define __pyx_n_s_DB_get_live_files_metadata __pyx_mstate_global->__pyx_n_s_DB_get_live_files_metadata
#define __pyx_n_s_DB_get_property __pyx_mstate_global->__pyx_n_s_DB_get_property
#define __pyx_n_s_DB_iteritems __pyx_mstate_global->__pyx_n_s_DB_iteritems
#define __pyx_n_s_DB_iterkeys __pyx_mstate_global->__pyx_n_s_DB_iterkeys
#define __pyx_n_s_DB_iterskeys __pyx_mstate_global->__pyx_n_s_DB_iterskeys
#define __pyx_n_s_DB_itersvalues __pyx_mstate_global->__pyx_n_s_DB_itersvalues
#define __pyx_n_s_DB_itervalues __pyx_mstate_global->__pyx_n_s_DB_itervalues
#define __pyx_n_s_DB_key_may_exist __pyx_mstate_global->__pyx_n_s_DB_key_may_exist
#define __pyx_n_s_DB_merge __pyx_mstate_global->__pyx_n_s_DB_merge
#define __pyx_n_s_DB_multi_get __pyx_mstate_global->__pyx_n_s_DB_multi_get
#define __pyx_n_s_DB_put __pyx_mstate_global->__pyx_n_s_DB_put
#define __pyx_n_s_DB_snapshot __pyx_mstate_global->__pyx_n_s_DB_snapshot
#define __pyx_n_s_DB_try_catch_up_with_primary __pyx_mstate_global->__pyx_n_s_DB_try_catch_up_with_primary
#define __pyx_n_s_DB_write __pyx_mstate_global->__pyx_n_s_DB_write
#define __pyx_n_u_Delete __pyx_mstate_global->__pyx_n_u_Delete
#define __pyx_n_s_Error __pyx_mstate_global->__pyx_n_s_Error
#define __pyx_n_s_FilterPolicy __pyx_mstate_global->__pyx_n_s_FilterPolicy
#define __pyx_n_s_HashLinkListMemtableFactory __pyx_mstate_global->__pyx_n_s_HashLinkListMemtableFactory
#define __pyx_n_s_HashLinkListMemtableFactory___re __pyx_mstate_global->__pyx_n_s_HashLinkListMemtableFactory___re
#define __pyx_n_s_HashLinkListMemtableFactory___se __pyx_mstate_global->__pyx_n_s_HashLinkListMemtableFactory___se
#define __pyx_n_s_HashSkipListMemtableFactory __pyx_mstate_global->__pyx_n_s_HashSkipListMemtableFactory
#define __pyx_n_s_HashSkipListMemtableFactory___re __pyx_mstate_global->__pyx_n_s_HashSkipListMemtableFactory___re
#define __pyx_n_s_HashSkipListMemtableFactory___se __pyx_mstate_global->__pyx_n_s_HashSkipListMemtableFactory___se
#define __pyx_n_s_IAssociativeMergeOperator __pyx_mstate_global->__pyx_n_s_IAssociativeMergeOperator
#define __pyx_n_s_IComparator __pyx_mstate_global->__pyx_n_s_IComparator
#define __pyx_n_s_IFilterPolicy __pyx_mstate_global->__pyx_n_s_IFilterPolicy
#define __pyx_n_s_IMergeOperator __pyx_mstate_global->__pyx_n_s_IMergeOperator
#define __pyx_n_s_ISliceTransform __pyx_mstate_global->__pyx_n_s_ISliceTransform
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_Incomplete __pyx_mstate_global->__pyx_n_s_Incomplete
#define __pyx_n_s_IncreaseParallelism __pyx_mstate_global->__pyx_n_s_IncreaseParallelism
#define __pyx_n_s_InvalidArgument __pyx_mstate_global->__pyx_n_s_InvalidArgument
#define __pyx_kp_u_Invalid_read_tier __pyx_mstate_global->__pyx_kp_u_Invalid_read_tier
#define __pyx_n_s_ItemsIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_ItemsIterator___reduce_cython
#define __pyx_n_s_ItemsIterator___setstate_cython __pyx_mstate_global->__pyx_n_s_ItemsIterator___setstate_cython
#define __pyx_n_s_KeysIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_KeysIterator___reduce_cython
#define __pyx_n_s_KeysIterator___setstate_cython __pyx_mstate_global->__pyx_n_s_KeysIterator___setstate_cython
#define __pyx_n_s_LRUCache __pyx_mstate_global->__pyx_n_s_LRUCache
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_u_Merge __pyx_mstate_global->__pyx_n_u_Merge
#define __pyx_n_s_MergeInProgress __pyx_mstate_global->__pyx_n_s_MergeInProgress
#define __pyx_n_s_MergeOperator __pyx_mstate_global->__pyx_n_s_MergeOperator
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_s_NotFound __pyx_mstate_global->__pyx_n_s_NotFound
#define __pyx_n_s_NotImplemented __pyx_mstate_global->__pyx_n_s_NotImplemented
#define __pyx_n_s_NotSupported __pyx_mstate_global->__pyx_n_s_NotSupported
#define __pyx_n_s_Options __pyx_mstate_global->__pyx_n_s_Options
#define __pyx_n_s_Options_IncreaseParallelism __pyx_mstate_global->__pyx_n_s_Options_IncreaseParallelism
#define __pyx_n_s_Options___reduce_cython __pyx_mstate_global->__pyx_n_s_Options___reduce_cython
#define __pyx_n_s_Options___setstate_cython __pyx_mstate_global->__pyx_n_s_Options___setstate_cython
#define __pyx_kp_u_Options_object_is_already_used_b __pyx_mstate_global->__pyx_kp_u_Options_object_is_already_used_b
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_PlainTableFactory __pyx_mstate_global->__pyx_n_s_PlainTableFactory
#define __pyx_n_s_PlainTableFactory___reduce_cytho __pyx_mstate_global->__pyx_n_s_PlainTableFactory___reduce_cytho
#define __pyx_n_s_PlainTableFactory___setstate_cyt __pyx_mstate_global->__pyx_n_s_PlainTableFactory___setstate_cyt
#define __pyx_n_u_Put __pyx_mstate_global->__pyx_n_u_Put
#define __pyx_n_s_PyBloomFilterPolicy___reduce_cyt __pyx_mstate_global->__pyx_n_s_PyBloomFilterPolicy___reduce_cyt
#define __pyx_n_s_PyBloomFilterPolicy___setstate_c __pyx_mstate_global->__pyx_n_s_PyBloomFilterPolicy___setstate_c
#define __pyx_n_s_PyBloomFilterPolicy_create_filte __pyx_mstate_global->__pyx_n_s_PyBloomFilterPolicy_create_filte
#define __pyx_n_s_PyBloomFilterPolicy_key_may_matc __pyx_mstate_global->__pyx_n_s_PyBloomFilterPolicy_key_may_matc
#define __pyx_n_s_PyBloomFilterPolicy_name __pyx_mstate_global->__pyx_n_s_PyBloomFilterPolicy_name
#define __pyx_n_s_PyBytewiseComparator___reduce_cy __pyx_mstate_global->__pyx_n_s_PyBytewiseComparator___reduce_cy
#define __pyx_n_s_PyBytewiseComparator___setstate __pyx_mstate_global->__pyx_n_s_PyBytewiseComparator___setstate
#define __pyx_n_s_PyBytewiseComparator_compare __pyx_mstate_global->__pyx_n_s_PyBytewiseComparator_compare
#define __pyx_n_s_PyBytewiseComparator_name __pyx_mstate_global->__pyx_n_s_PyBytewiseComparator_name
#define __pyx_n_s_PyCache___reduce_cython __pyx_mstate_global->__pyx_n_s_PyCache___reduce_cython
#define __pyx_n_s_PyCache___setstate_cython __pyx_mstate_global->__pyx_n_s_PyCache___setstate_cython
#define __pyx_n_s_PyComparator___reduce_cython __pyx_mstate_global->__pyx_n_s_PyComparator___reduce_cython
#define __pyx_n_s_PyComparator___setstate_cython __pyx_mstate_global->__pyx_n_s_PyComparator___setstate_cython
#define __pyx_n_s_PyFilterPolicy___reduce_cython __pyx_mstate_global->__pyx_n_s_PyFilterPolicy___reduce_cython
#define __pyx_n_s_PyFilterPolicy___setstate_cython __pyx_mstate_global->__pyx_n_s_PyFilterPolicy___setstate_cython
#define __pyx_n_s_PyGenericComparator___reduce_cyt __pyx_mstate_global->__pyx_n_s_PyGenericComparator___reduce_cyt
#define __pyx_n_s_PyGenericComparator___setstate_c __pyx_mstate_global->__pyx_n_s_PyGenericComparator___setstate_c
#define __pyx_n_s_PyGenericFilterPolicy___reduce_c __pyx_mstate_global->__pyx_n_s_PyGenericFilterPolicy___reduce_c
#define __pyx_n_s_PyGenericFilterPolicy___setstate __pyx_mstate_global->__pyx_n_s_PyGenericFilterPolicy___setstate
#define __pyx_n_s_PyLRUCache___reduce_cython __pyx_mstate_global->__pyx_n_s_PyLRUCache___reduce_cython
#define __pyx_n_s_PyLRUCache___setstate_cython __pyx_mstate_global->__pyx_n_s_PyLRUCache___setstate_cython
#define __pyx_n_s_PyMemtableFactory___reduce_cytho __pyx_mstate_global->__pyx_n_s_PyMemtableFactory___reduce_cytho
#define __pyx_n_s_PyMemtableFactory___setstate_cyt __pyx_mstate_global->__pyx_n_s_PyMemtableFactory___setstate_cyt
#define __pyx_n_s_PyMergeOperator___reduce_cython __pyx_mstate_global->__pyx_n_s_PyMergeOperator___reduce_cython
#define __pyx_n_s_PyMergeOperator___setstate_cytho __pyx_mstate_global->__pyx_n_s_PyMergeOperator___setstate_cytho
#define __pyx_n_s_PySliceTransform___reduce_cython __pyx_mstate_global->__pyx_n_s_PySliceTransform___reduce_cython
#define __pyx_n_s_PySliceTransform___setstate_cyth __pyx_mstate_global->__pyx_n_s_PySliceTransform___setstate_cyth
#define __pyx_n_s_PyTableFactory___reduce_cython __pyx_mstate_global->__pyx_n_s_PyTableFactory___reduce_cython
#define __pyx_n_s_PyTableFactory___setstate_cython __pyx_mstate_global->__pyx_n_s_PyTableFactory___setstate_cython
#define __pyx_n_s_ReversedIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_ReversedIterator___reduce_cython
#define __pyx_n_s_ReversedIterator___reversed __pyx_mstate_global->__pyx_n_s_ReversedIterator___reversed
#define __pyx_n_s_ReversedIterator___setstate_cyth __pyx_mstate_global->__pyx_n_s_ReversedIterator___setstate_cyth
#define __pyx_n_s_ReversedIterator_get __pyx_mstate_global->__pyx_n_s_ReversedIterator_get
#define __pyx_n_s_ReversedIterator_seek __pyx_mstate_global->__pyx_n_s_ReversedIterator_seek
#define __pyx_n_s_ReversedIterator_seek_for_prev __pyx_mstate_global->__pyx_n_s_ReversedIterator_seek_for_prev
#define __pyx_n_s_ReversedIterator_seek_to_first __pyx_mstate_global->__pyx_n_s_ReversedIterator_seek_to_first
#define __pyx_n_s_ReversedIterator_seek_to_last __pyx_mstate_global->__pyx_n_s_ReversedIterator_seek_to_last
#define __pyx_n_s_RocksIOError __pyx_mstate_global->__pyx_n_s_RocksIOError
#define __pyx_n_s_SkipListMemtableFactory __pyx_mstate_global->__pyx_n_s_SkipListMemtableFactory
#define __pyx_n_s_SkipListMemtableFactory___reduce __pyx_mstate_global->__pyx_n_s_SkipListMemtableFactory___reduce
#define __pyx_n_s_SkipListMemtableFactory___setsta __pyx_mstate_global->__pyx_n_s_SkipListMemtableFactory___setsta
#define __pyx_n_s_SliceTransform __pyx_mstate_global->__pyx_n_s_SliceTransform
#define __pyx_n_s_Snapshot___reduce_cython __pyx_mstate_global->__pyx_n_s_Snapshot___reduce_cython
#define __pyx_n_s_Snapshot___setstate_cython __pyx_mstate_global->__pyx_n_s_Snapshot___setstate_cython
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_kp_u_These_can_not_be_constructed_fro __pyx_mstate_global->__pyx_kp_u_These_can_not_be_constructed_fro
#define __pyx_n_s_TransactionDB __pyx_mstate_global->__pyx_n_s_TransactionDB
#define __pyx_n_s_TransactionDBOptions __pyx_mstate_global->__pyx_n_s_TransactionDBOptions
#define __pyx_n_s_TransactionDBOptions___reduce_cy __pyx_mstate_global->__pyx_n_s_TransactionDBOptions___reduce_cy
#define __pyx_n_s_TransactionDBOptions___setstate __pyx_mstate_global->__pyx_n_s_TransactionDBOptions___setstate
#define __pyx_n_s_TransactionDB___reduce_cython __pyx_mstate_global->__pyx_n_s_TransactionDB___reduce_cython
#define __pyx_n_s_TransactionDB___setstate_cython __pyx_mstate_global->__pyx_n_s_TransactionDB___setstate_cython
#define __pyx_n_s_TransactionDB_close __pyx_mstate_global->__pyx_n_s_TransactionDB_close
#define __pyx_kp_u_Transaction_Options_object_is_al __pyx_mstate_global->__pyx_kp_u_Transaction_Options_object_is_al
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_Unknown_checksum_s __pyx_mstate_global->__pyx_kp_u_Unknown_checksum_s
#define __pyx_kp_u_Unknown_compaction_pri_s __pyx_mstate_global->__pyx_kp_u_Unknown_compaction_pri_s
#define __pyx_kp_u_Unknown_compaction_style __pyx_mstate_global->__pyx_kp_u_Unknown_compaction_style
#define __pyx_kp_u_Unknown_compaction_style_2 __pyx_mstate_global->__pyx_kp_u_Unknown_compaction_style_2
#define __pyx_kp_u_Unknown_compression_s __pyx_mstate_global->__pyx_kp_u_Unknown_compression_s
#define __pyx_kp_u_Unknown_encoding_type_s __pyx_mstate_global->__pyx_kp_u_Unknown_encoding_type_s
#define __pyx_kp_u_Unknown_error_s __pyx_mstate_global->__pyx_kp_u_Unknown_error_s
#define __pyx_kp_u_Unknown_index_type_s __pyx_mstate_global->__pyx_kp_u_Unknown_index_type_s
#define __pyx_kp_u_Unknown_type_s __pyx_mstate_global->__pyx_kp_u_Unknown_type_s
#define __pyx_kp_u_Unknown_write_policy __pyx_mstate_global->__pyx_kp_u_Unknown_write_policy
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_ValuesIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_ValuesIterator___reduce_cython
#define __pyx_n_s_ValuesIterator___setstate_cython __pyx_mstate_global->__pyx_n_s_ValuesIterator___setstate_cython
#define __pyx_n_s_VectorMemtableFactory __pyx_mstate_global->__pyx_n_s_VectorMemtableFactory
#define __pyx_n_s_VectorMemtableFactory___reduce_c __pyx_mstate_global->__pyx_n_s_VectorMemtableFactory___reduce_c
#define __pyx_n_s_VectorMemtableFactory___setstate __pyx_mstate_global->__pyx_n_s_VectorMemtableFactory___setstate
#define __pyx_n_s_WriteBatch __pyx_mstate_global->__pyx_n_s_WriteBatch
#define __pyx_n_s_WriteBatchIterator___reduce_cyth __pyx_mstate_global->__pyx_n_s_WriteBatchIterator___reduce_cyth
#define __pyx_n_s_WriteBatchIterator___setstate_cy __pyx_mstate_global->__pyx_n_s_WriteBatchIterator___setstate_cy
#define __pyx_n_s_WriteBatch___reduce_cython __pyx_mstate_global->__pyx_n_s_WriteBatch___reduce_cython
#define __pyx_n_s_WriteBatch___setstate_cython __pyx_mstate_global->__pyx_n_s_WriteBatch___setstate_cython
#define __pyx_n_s_WriteBatch_clear __pyx_mstate_global->__pyx_n_s_WriteBatch_clear
#define __pyx_n_s_WriteBatch_count __pyx_mstate_global->__pyx_n_s_WriteBatch_count
#define __pyx_n_s_WriteBatch_data __pyx_mstate_global->__pyx_n_s_WriteBatch_data
#define __pyx_n_s_WriteBatch_delete __pyx_mstate_global->__pyx_n_s_WriteBatch_delete
#define __pyx_n_s_WriteBatch_merge __pyx_mstate_global->__pyx_n_s_WriteBatch_merge
#define __pyx_n_s_WriteBatch_put __pyx_mstate_global->__pyx_n_s_WriteBatch_put
#define __pyx_kp_u_Wrong_type_for_path_s __pyx_mstate_global->__pyx_kp_u_Wrong_type_for_path_s
#define __pyx_kp_u__15 __pyx_mstate_global->__pyx_kp_u__15
#define __pyx_n_s__16 __pyx_mstate_global->__pyx_n_s__16
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_s__201 __pyx_mstate_global->__pyx_n_s__201
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_n_u_all __pyx_mstate_global->__pyx_n_u_all
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_as_dict __pyx_mstate_global->__pyx_n_s_as_dict
#define __pyx_n_u_ascii __pyx_mstate_global->__pyx_n_u_ascii
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_backup_dir __pyx_mstate_global->__pyx_n_s_backup_dir
#define __pyx_n_s_backup_id __pyx_mstate_global->__pyx_n_s_backup_id
#define __pyx_n_u_backup_id __pyx_mstate_global->__pyx_n_u_backup_id
#define __pyx_n_s_backup_info __pyx_mstate_global->__pyx_n_s_backup_info
#define __pyx_n_s_batch __pyx_mstate_global->__pyx_n_s_batch
#define __pyx_n_s_begin __pyx_mstate_global->__pyx_n_s_begin
#define __pyx_n_s_begin_ptr __pyx_mstate_global->__pyx_n_s_begin_ptr
#define __pyx_n_s_begin_val __pyx_mstate_global->__pyx_n_s_begin_val
#define __pyx_n_u_binary_search __pyx_mstate_global->__pyx_n_u_binary_search
#define __pyx_n_s_bits_per_key __pyx_mstate_global->__pyx_n_s_bits_per_key
#define __pyx_n_s_blc __pyx_mstate_global->__pyx_n_s_blc
#define __pyx_n_s_block_cache __pyx_mstate_global->__pyx_n_s_block_cache
#define __pyx_n_s_block_cache_compressed __pyx_mstate_global->__pyx_n_s_block_cache_compressed
#define __pyx_n_s_block_restart_interval __pyx_mstate_global->__pyx_n_s_block_restart_interval
#define __pyx_n_s_block_size __pyx_mstate_global->__pyx_n_s_block_size
#define __pyx_n_s_block_size_deviation __pyx_mstate_global->__pyx_n_s_block_size_deviation
#define __pyx_n_s_bloom_bits_per_key __pyx_mstate_global->__pyx_n_s_bloom_bits_per_key
#define __pyx_n_u_bottommost_level_compaction __pyx_mstate_global->__pyx_n_u_bottommost_level_compaction
#define __pyx_kp_u_bottommost_level_compaction_is_n __pyx_mstate_global->__pyx_kp_u_bottommost_level_compaction_is_n
#define __pyx_n_s_bucket_count __pyx_mstate_global->__pyx_n_s_bucket_count
#define __pyx_n_s_by_compensated_size __pyx_mstate_global->__pyx_n_s_by_compensated_size
#define __pyx_n_u_by_compensated_size __pyx_mstate_global->__pyx_n_u_by_compensated_size
#define __pyx_n_s_bzip2_compression __pyx_mstate_global->__pyx_n_s_bzip2_compression
#define __pyx_n_u_bzip2_compression __pyx_mstate_global->__pyx_n_u_bzip2_compression
#define __pyx_n_s_c_backup_id __pyx_mstate_global->__pyx_n_s_c_backup_id
#define __pyx_n_s_c_checkpoint_dir __pyx_mstate_global->__pyx_n_s_c_checkpoint_dir
#define __pyx_n_s_c_db_dir __pyx_mstate_global->__pyx_n_s_c_db_dir
#define __pyx_n_s_c_flush_before_backup __pyx_mstate_global->__pyx_n_s_c_flush_before_backup
#define __pyx_n_s_c_key __pyx_mstate_global->__pyx_n_s_c_key
#define __pyx_n_s_c_keys __pyx_mstate_global->__pyx_n_s_c_keys
#define __pyx_n_s_c_name __pyx_mstate_global->__pyx_n_s_c_name
#define __pyx_n_s_c_num_backups_to_keep __pyx_mstate_global->__pyx_n_s_c_num_backups_to_keep
#define __pyx_n_s_c_options __pyx_mstate_global->__pyx_n_s_c_options
#define __pyx_n_s_c_prop __pyx_mstate_global->__pyx_n_s_c_prop
#define __pyx_n_s_c_safe __pyx_mstate_global->__pyx_n_s_c_safe
#define __pyx_n_s_c_value __pyx_mstate_global->__pyx_n_s_c_value
#define __pyx_n_s_c_wal_dir __pyx_mstate_global->__pyx_n_s_c_wal_dir
#define __pyx_n_u_cache __pyx_mstate_global->__pyx_n_u_cache
#define __pyx_n_s_cache_index_and_filter_blocks __pyx_mstate_global->__pyx_n_s_cache_index_and_filter_blocks
#define __pyx_n_s_capacity __pyx_mstate_global->__pyx_n_s_capacity
#define __pyx_n_s_cf_handle __pyx_mstate_global->__pyx_n_s_cf_handle
#define __pyx_n_s_cf_handles __pyx_mstate_global->__pyx_n_s_cf_handles
#define __pyx_n_s_cf_iter __pyx_mstate_global->__pyx_n_s_cf_iter
#define __pyx_n_s_cfhandle __pyx_mstate_global->__pyx_n_s_cfhandle
#define __pyx_n_u_change_level __pyx_mstate_global->__pyx_n_u_change_level
#define __pyx_n_s_checkpoint_dir __pyx_mstate_global->__pyx_n_s_checkpoint_dir
#define __pyx_n_s_checksum __pyx_mstate_global->__pyx_n_s_checksum
#define __pyx_n_s_clear __pyx_mstate_global->__pyx_n_s_clear
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_column_families __pyx_mstate_global->__pyx_n_s_column_families
#define __pyx_n_s_column_family __pyx_mstate_global->__pyx_n_s_column_family
#define __pyx_kp_u_column_family_name __pyx_mstate_global->__pyx_kp_u_column_family_name
#define __pyx_kp_u_column_family_options __pyx_mstate_global->__pyx_kp_u_column_family_options
#define __pyx_n_s_compact_range __pyx_mstate_global->__pyx_n_s_compact_range
#define __pyx_n_s_compare __pyx_mstate_global->__pyx_n_s_compare
#define __pyx_n_s_compression __pyx_mstate_global->__pyx_n_s_compression
#define __pyx_n_u_compression_size_percent __pyx_mstate_global->__pyx_n_u_compression_size_percent
#define __pyx_n_s_copts __pyx_mstate_global->__pyx_n_s_copts
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_u_crc32 __pyx_mstate_global->__pyx_n_u_crc32
#define __pyx_n_s_create_backup __pyx_mstate_global->__pyx_n_s_create_backup
#define __pyx_n_s_create_checkpoint __pyx_mstate_global->__pyx_n_s_create_checkpoint
#define __pyx_n_s_create_column_family __pyx_mstate_global->__pyx_n_s_create_column_family
#define __pyx_n_s_create_filter __pyx_mstate_global->__pyx_n_s_create_filter
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_db __pyx_mstate_global->__pyx_n_s_db
#define __pyx_n_s_db_dir __pyx_mstate_global->__pyx_n_s_db_dir
#define __pyx_n_s_db_name __pyx_mstate_global->__pyx_n_s_db_name
#define __pyx_n_s_db_path __pyx_mstate_global->__pyx_n_s_db_path
#define __pyx_n_s_delete __pyx_mstate_global->__pyx_n_s_delete
#define __pyx_n_s_delete_backup __pyx_mstate_global->__pyx_n_s_delete_backup
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_disable_compression __pyx_mstate_global->__pyx_n_s_disable_compression
#define __pyx_n_u_disable_compression __pyx_mstate_global->__pyx_n_u_disable_compression
#define __pyx_n_s_disable_wal __pyx_mstate_global->__pyx_n_s_disable_wal
#define __pyx_n_s_drop_column_family __pyx_mstate_global->__pyx_n_s_drop_column_family
#define __pyx_n_s_dst __pyx_mstate_global->__pyx_n_s_dst
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_u_enabled __pyx_mstate_global->__pyx_n_u_enabled
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_encoding_type __pyx_mstate_global->__pyx_n_s_encoding_type
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_end_ptr __pyx_mstate_global->__pyx_n_s_end_ptr
#define __pyx_n_s_end_val __pyx_mstate_global->__pyx_n_s_end_val
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_errors __pyx_mstate_global->__pyx_n_s_errors
#define __pyx_n_s_exists __pyx_mstate_global->__pyx_n_s_exists
#define __pyx_n_s_fetch __pyx_mstate_global->__pyx_n_s_fetch
#define __pyx_n_u_fifo __pyx_mstate_global->__pyx_n_u_fifo
#define __pyx_n_u_file_count __pyx_mstate_global->__pyx_n_u_file_count
#define __pyx_n_s_fill_cache __pyx_mstate_global->__pyx_n_s_fill_cache
#define __pyx_n_u_fill_cache __pyx_mstate_global->__pyx_n_u_fill_cache
#define __pyx_n_s_filter __pyx_mstate_global->__pyx_n_s_filter
#define __pyx_n_s_filter_policy __pyx_mstate_global->__pyx_n_s_filter_policy
#define __pyx_n_s_flush_before_backup __pyx_mstate_global->__pyx_n_s_flush_before_backup
#define __pyx_n_u_force __pyx_mstate_global->__pyx_n_u_force
#define __pyx_n_s_format_exc __pyx_mstate_global->__pyx_n_s_format_exc
#define __pyx_n_s_format_version __pyx_mstate_global->__pyx_n_s_format_version
#define __pyx_n_s_fromkeys __pyx_mstate_global->__pyx_n_s_fromkeys
#define __pyx_n_s_full_merge __pyx_mstate_global->__pyx_n_s_full_merge
#define __pyx_n_s_full_scan_mode __pyx_mstate_global->__pyx_n_s_full_scan_mode
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_get_backup_info __pyx_mstate_global->__pyx_n_s_get_backup_info
#define __pyx_n_s_get_column_family __pyx_mstate_global->__pyx_n_s_get_column_family
#define __pyx_n_s_get_column_family_meta_data __pyx_mstate_global->__pyx_n_s_get_column_family_meta_data
#define __pyx_n_s_get_live_files_metadata __pyx_mstate_global->__pyx_n_s_get_live_files_metadata
#define __pyx_n_s_get_property __pyx_mstate_global->__pyx_n_s_get_property
#define __pyx_n_s_getfilesystemencoding __pyx_mstate_global->__pyx_n_s_getfilesystemencoding
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_handle __pyx_mstate_global->__pyx_n_s_handle
#define __pyx_n_s_hash_index_allow_collision __pyx_mstate_global->__pyx_n_s_hash_index_allow_collision
#define __pyx_n_u_hash_search __pyx_mstate_global->__pyx_n_u_hash_search
#define __pyx_n_s_hash_table_ratio __pyx_mstate_global->__pyx_n_s_hash_table_ratio
#define __pyx_n_s_huge_page_tlb_size __pyx_mstate_global->__pyx_n_s_huge_page_tlb_size
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_kp_u_id_2 __pyx_mstate_global->__pyx_kp_u_id_2
#define __pyx_n_u_if_compaction_filter __pyx_mstate_global->__pyx_n_u_if_compaction_filter
#define __pyx_n_s_ignore_missing_column_families __pyx_mstate_global->__pyx_n_s_ignore_missing_column_families
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_in_domain __pyx_mstate_global->__pyx_n_s_in_domain
#define __pyx_n_s_in_range __pyx_mstate_global->__pyx_n_s_in_range
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_index_sparseness __pyx_mstate_global->__pyx_n_s_index_sparseness
#define __pyx_n_s_index_type __pyx_mstate_global->__pyx_n_s_index_type
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_interfaces __pyx_mstate_global->__pyx_n_s_interfaces
#define __pyx_n_u_invalid __pyx_mstate_global->__pyx_n_u_invalid
#define __pyx_kp_u_is_already_an_existing_column_f __pyx_mstate_global->__pyx_kp_u_is_already_an_existing_column_f
#define __pyx_kp_u_is_already_used_by_another_Colu __pyx_mstate_global->__pyx_kp_u_is_already_used_by_another_Colu
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_is_no_longer_a_valid_ColumnFami __pyx_mstate_global->__pyx_kp_u_is_no_longer_a_valid_ColumnFami
#define __pyx_kp_u_is_not_of_type __pyx_mstate_global->__pyx_kp_u_is_not_of_type
#define __pyx_n_s_is_valid __pyx_mstate_global->__pyx_n_s_is_valid
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_it __pyx_mstate_global->__pyx_n_s_it
#define __pyx_n_s_it_ptr __pyx_mstate_global->__pyx_n_s_it_ptr
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_iterate_bound __pyx_mstate_global->__pyx_n_s_iterate_bound
#define __pyx_n_s_iterate_lower_bound __pyx_mstate_global->__pyx_n_s_iterate_lower_bound
#define __pyx_n_u_iterate_lower_bound __pyx_mstate_global->__pyx_n_u_iterate_lower_bound
#define __pyx_n_s_iterate_upper_bound __pyx_mstate_global->__pyx_n_s_iterate_upper_bound
#define __pyx_n_u_iterate_upper_bound __pyx_mstate_global->__pyx_n_u_iterate_upper_bound
#define __pyx_n_s_iteritems __pyx_mstate_global->__pyx_n_s_iteritems
#define __pyx_n_s_iterkeys __pyx_mstate_global->__pyx_n_s_iterkeys
#define __pyx_n_s_iters __pyx_mstate_global->__pyx_n_s_iters
#define __pyx_n_s_iterskeys __pyx_mstate_global->__pyx_n_s_iterskeys
#define __pyx_n_s_itersvalues __pyx_mstate_global->__pyx_n_s_itersvalues
#define __pyx_n_s_itervalues __pyx_mstate_global->__pyx_n_s_itervalues
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_key_may_exist __pyx_mstate_global->__pyx_n_s_key_may_exist
#define __pyx_n_s_key_may_match __pyx_mstate_global->__pyx_n_s_key_may_match
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_u_largest_seqno __pyx_mstate_global->__pyx_n_u_largest_seqno
#define __pyx_n_u_largestkey __pyx_mstate_global->__pyx_n_u_largestkey
#define __pyx_n_u_level __pyx_mstate_global->__pyx_n_u_level
#define __pyx_n_s_list_column_families __pyx_mstate_global->__pyx_n_s_list_column_families
#define __pyx_n_s_low_pri __pyx_mstate_global->__pyx_n_s_low_pri
#define __pyx_n_s_lz4_compression __pyx_mstate_global->__pyx_n_s_lz4_compression
#define __pyx_n_u_lz4_compression __pyx_mstate_global->__pyx_n_u_lz4_compression
#define __pyx_n_s_lz4hc_compression __pyx_mstate_global->__pyx_n_s_lz4hc_compression
#define __pyx_n_u_lz4hc_compression __pyx_mstate_global->__pyx_n_u_lz4hc_compression
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_make_bytes __pyx_mstate_global->__pyx_n_s_make_bytes
#define __pyx_n_u_max_dict_bytes __pyx_mstate_global->__pyx_n_u_max_dict_bytes
#define __pyx_n_u_max_merge_width __pyx_mstate_global->__pyx_n_u_max_merge_width
#define __pyx_n_u_max_size_amplification_percent __pyx_mstate_global->__pyx_n_u_max_size_amplification_percent
#define __pyx_n_s_merge __pyx_mstate_global->__pyx_n_s_merge
#define __pyx_n_s_metadata __pyx_mstate_global->__pyx_n_s_metadata
#define __pyx_n_u_min_merge_width __pyx_mstate_global->__pyx_n_u_min_merge_width
#define __pyx_n_s_min_overlapping_ratio __pyx_mstate_global->__pyx_n_s_min_overlapping_ratio
#define __pyx_n_u_min_overlapping_ratio __pyx_mstate_global->__pyx_n_u_min_overlapping_ratio
#define __pyx_n_s_multi_get __pyx_mstate_global->__pyx_n_s_multi_get
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_u_name __pyx_mstate_global->__pyx_n_u_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_no_block_cache __pyx_mstate_global->__pyx_n_s_no_block_cache
#define __pyx_n_s_no_compression __pyx_mstate_global->__pyx_n_s_no_compression
#define __pyx_n_u_no_compression __pyx_mstate_global->__pyx_n_u_no_compression
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_no_slowdown __pyx_mstate_global->__pyx_n_s_no_slowdown
#define __pyx_n_u_none __pyx_mstate_global->__pyx_n_u_none
#define __pyx_n_s_num_backups_to_keep __pyx_mstate_global->__pyx_n_s_num_backups_to_keep
#define __pyx_n_s_ob __pyx_mstate_global->__pyx_n_s_ob
#define __pyx_kp_u_offset_i_size_i_is_bigger_than_s __pyx_mstate_global->__pyx_kp_u_offset_i_size_i_is_bigger_than_s
#define __pyx_n_s_oldest_largest_seq_first __pyx_mstate_global->__pyx_n_s_oldest_largest_seq_first
#define __pyx_n_u_oldest_largest_seq_first __pyx_mstate_global->__pyx_n_u_oldest_largest_seq_first
#define __pyx_n_s_oldest_smallest_seq_first __pyx_mstate_global->__pyx_n_s_oldest_smallest_seq_first
#define __pyx_n_u_oldest_smallest_seq_first __pyx_mstate_global->__pyx_n_u_oldest_smallest_seq_first
#define __pyx_n_s_opts __pyx_mstate_global->__pyx_n_s_opts
#define __pyx_n_u_parallel_threads __pyx_mstate_global->__pyx_n_u_parallel_threads
#define __pyx_n_s_parse_read_opts __pyx_mstate_global->__pyx_n_s_parse_read_opts
#define __pyx_n_s_partial_merge __pyx_mstate_global->__pyx_n_s_partial_merge
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_u_plain __pyx_mstate_global->__pyx_n_u_plain
#define __pyx_n_s_pop __pyx_mstate_global->__pyx_n_s_pop
#define __pyx_n_u_prefix __pyx_mstate_global->__pyx_n_u_prefix
#define __pyx_n_s_prefix_extractor __pyx_mstate_global->__pyx_n_s_prefix_extractor
#define __pyx_n_s_prop __pyx_mstate_global->__pyx_n_s_prop
#define __pyx_n_s_purge_old_backups __pyx_mstate_global->__pyx_n_s_purge_old_backups
#define __pyx_n_s_put __pyx_mstate_global->__pyx_n_s_put
#define __pyx_n_s_py_handle __pyx_mstate_global->__pyx_n_s_py_handle
#define __pyx_n_s_py_options __pyx_mstate_global->__pyx_n_s_py_options
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_CompactionPri __pyx_mstate_global->__pyx_n_s_pyx_unpickle_CompactionPri
#define __pyx_n_s_pyx_unpickle_CompressionType __pyx_mstate_global->__pyx_n_s_pyx_unpickle_CompressionType
#define __pyx_n_s_pyx_unpickle_PyCache __pyx_mstate_global->__pyx_n_s_pyx_unpickle_PyCache
#define __pyx_n_s_pyx_unpickle_PyComparator __pyx_mstate_global->__pyx_n_s_pyx_unpickle_PyComparator
#define __pyx_n_s_pyx_unpickle_PyFilterPolicy __pyx_mstate_global->__pyx_n_s_pyx_unpickle_PyFilterPolicy
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_read_only __pyx_mstate_global->__pyx_n_s_read_only
#define __pyx_n_s_read_tier __pyx_mstate_global->__pyx_n_s_read_tier
#define __pyx_n_u_read_tier __pyx_mstate_global->__pyx_n_u_read_tier
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_ref __pyx_mstate_global->__pyx_n_s_ref
#define __pyx_n_s_repair_db __pyx_mstate_global->__pyx_n_s_repair_db
#define __pyx_n_s_res __pyx_mstate_global->__pyx_n_s_res
#define __pyx_n_s_restore_backup __pyx_mstate_global->__pyx_n_s_restore_backup
#define __pyx_n_s_restore_latest_backup __pyx_mstate_global->__pyx_n_s_restore_latest_backup
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_ret_dict __pyx_mstate_global->__pyx_n_s_ret_dict
#define __pyx_n_s_ret_list __pyx_mstate_global->__pyx_n_s_ret_list
#define __pyx_n_s_reversed __pyx_mstate_global->__pyx_n_s_reversed
#define __pyx_n_s_rocksdb__rocksdb __pyx_mstate_global->__pyx_n_s_rocksdb__rocksdb
#define __pyx_kp_s_rocksdb__rocksdb_pyx __pyx_mstate_global->__pyx_kp_s_rocksdb__rocksdb_pyx
#define __pyx_kp_u_row_cache_must_be_a_Cache_object __pyx_mstate_global->__pyx_kp_u_row_cache_must_be_a_Cache_object
#define __pyx_kp_u_s_is_not_of_this_types_s __pyx_mstate_global->__pyx_kp_u_s_is_not_of_this_types_s
#define __pyx_n_s_safe __pyx_mstate_global->__pyx_n_s_safe
#define __pyx_n_s_secondary_path __pyx_mstate_global->__pyx_n_s_secondary_path
#define __pyx_n_s_seek __pyx_mstate_global->__pyx_n_s_seek
#define __pyx_n_s_seek_for_prev __pyx_mstate_global->__pyx_n_s_seek_for_prev
#define __pyx_n_s_seek_to_first __pyx_mstate_global->__pyx_n_s_seek_to_first
#define __pyx_n_s_seek_to_last __pyx_mstate_global->__pyx_n_s_seek_to_last
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_factory_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self_factory_cannot_be_converted
#define __pyx_kp_s_self_items_cannot_be_converted_t __pyx_mstate_global->__pyx_kp_s_self_items_cannot_be_converted_t
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shard_bits __pyx_mstate_global->__pyx_n_s_shard_bits
#define __pyx_n_u_similar_size __pyx_mstate_global->__pyx_n_u_similar_size
#define __pyx_n_u_size __pyx_mstate_global->__pyx_n_u_size
#define __pyx_n_u_size_ratio __pyx_mstate_global->__pyx_n_u_size_ratio
#define __pyx_n_u_skip __pyx_mstate_global->__pyx_n_u_skip
#define __pyx_n_s_skiplist_branching_factor __pyx_mstate_global->__pyx_n_s_skiplist_branching_factor
#define __pyx_n_s_skiplist_height __pyx_mstate_global->__pyx_n_s_skiplist_height
#define __pyx_n_u_smallest_seqno __pyx_mstate_global->__pyx_n_u_smallest_seqno
#define __pyx_n_u_smallestkey __pyx_mstate_global->__pyx_n_u_smallestkey
#define __pyx_n_s_snappy_compression __pyx_mstate_global->__pyx_n_s_snappy_compression
#define __pyx_n_u_snappy_compression __pyx_mstate_global->__pyx_n_u_snappy_compression
#define __pyx_n_s_snapshot __pyx_mstate_global->__pyx_n_s_snapshot
#define __pyx_n_u_snapshot __pyx_mstate_global->__pyx_n_u_snapshot
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_st __pyx_mstate_global->__pyx_n_s_st
#define __pyx_kp_u_state __pyx_mstate_global->__pyx_kp_u_state
#define __pyx_n_s_state_2 __pyx_mstate_global->__pyx_n_s_state_2
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_n_s_stop_backup __pyx_mstate_global->__pyx_n_s_stop_backup
#define __pyx_n_u_stop_style __pyx_mstate_global->__pyx_n_u_stop_style
#define __pyx_n_u_strategy __pyx_mstate_global->__pyx_n_u_strategy
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_sync __pyx_mstate_global->__pyx_n_s_sync
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t
#define __pyx_n_u_target_level __pyx_mstate_global->__pyx_n_u_target_level
#define __pyx_n_s_tdb_opts __pyx_mstate_global->__pyx_n_s_tdb_opts
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_u_timestamp __pyx_mstate_global->__pyx_n_u_timestamp
#define __pyx_n_s_total_order_seek __pyx_mstate_global->__pyx_n_s_total_order_seek
#define __pyx_n_u_total_order_seek __pyx_mstate_global->__pyx_n_u_total_order_seek
#define __pyx_n_u_total_size __pyx_mstate_global->__pyx_n_u_total_size
#define __pyx_n_s_total_threads __pyx_mstate_global->__pyx_n_s_total_threads
#define __pyx_n_s_traceback __pyx_mstate_global->__pyx_n_s_traceback
#define __pyx_n_s_transform __pyx_mstate_global->__pyx_n_s_transform
#define __pyx_n_s_try_catch_up_with_primary __pyx_mstate_global->__pyx_n_s_try_catch_up_with_primary
#define __pyx_n_u_universal __pyx_mstate_global->__pyx_n_u_universal
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_user_key_len __pyx_mstate_global->__pyx_n_s_user_key_len
#define __pyx_n_u_valid __pyx_mstate_global->__pyx_n_u_valid
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_value_found __pyx_mstate_global->__pyx_n_s_value_found
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_verify_checksums __pyx_mstate_global->__pyx_n_s_verify_checksums
#define __pyx_n_u_verify_checksums __pyx_mstate_global->__pyx_n_u_verify_checksums
#define __pyx_n_s_wal_dir __pyx_mstate_global->__pyx_n_s_wal_dir
#define __pyx_n_s_weak_handle __pyx_mstate_global->__pyx_n_s_weak_handle
#define __pyx_n_s_weakhandle __pyx_mstate_global->__pyx_n_s_weakhandle
#define __pyx_n_s_weakref __pyx_mstate_global->__pyx_n_s_weakref
#define __pyx_n_s_whole_key_filtering __pyx_mstate_global->__pyx_n_s_whole_key_filtering
#define __pyx_n_u_window_bits __pyx_mstate_global->__pyx_n_u_window_bits
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_u_write_committed __pyx_mstate_global->__pyx_n_u_write_committed
#define __pyx_n_u_write_prepared __pyx_mstate_global->__pyx_n_u_write_prepared
#define __pyx_n_u_write_unprepared __pyx_mstate_global->__pyx_n_u_write_unprepared
#define __pyx_n_s_xpress_compression __pyx_mstate_global->__pyx_n_s_xpress_compression
#define __pyx_n_u_xpress_compression __pyx_mstate_global->__pyx_n_u_xpress_compression
#define __pyx_n_u_xxhash __pyx_mstate_global->__pyx_n_u_xxhash
#define __pyx_n_s_zlib_compression __pyx_mstate_global->__pyx_n_s_zlib_compression
#define __pyx_n_u_zlib_compression __pyx_mstate_global->__pyx_n_u_zlib_compression
#define __pyx_n_s_zstd_compression __pyx_mstate_global->__pyx_n_s_zstd_compression
#define __pyx_n_u_zstd_compression __pyx_mstate_global->__pyx_n_u_zstd_compression
#define __pyx_n_u_zstd_max_train_bytes __pyx_mstate_global->__pyx_n_u_zstd_max_train_bytes
#define __pyx_n_s_zstdnotfinal_compression __pyx_mstate_global->__pyx_n_s_zstdnotfinal_compression
#define __pyx_n_u_zstdnotfinal_compression __pyx_mstate_global->__pyx_n_u_zstdnotfinal_compression
#define __pyx_float_0_75 __pyx_mstate_global->__pyx_float_0_75
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_10 __pyx_mstate_global->__pyx_int_10
#define __pyx_int_16 __pyx_mstate_global->__pyx_int_16
#define __pyx_int_50000 __pyx_mstate_global->__pyx_int_50000
#define __pyx_int_1000000 __pyx_mstate_global->__pyx_int_1000000
#define __pyx_int_222419149 __pyx_mstate_global->__pyx_int_222419149
#define __pyx_int_228825662 __pyx_mstate_global->__pyx_int_228825662
#define __pyx_int_238750788 __pyx_mstate_global->__pyx_int_238750788
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__104 __pyx_mstate_global->__pyx_tuple__104
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__108 __pyx_mstate_global->__pyx_tuple__108
#define __pyx_tuple__110 __pyx_mstate_global->__pyx_tuple__110
#define __pyx_tuple__112 __pyx_mstate_global->__pyx_tuple__112
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__118 __pyx_mstate_global->__pyx_tuple__118
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__126 __pyx_mstate_global->__pyx_tuple__126
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__132 __pyx_mstate_global->__pyx_tuple__132
#define __pyx_tuple__133 __pyx_mstate_global->__pyx_tuple__133
#define __pyx_tuple__135 __pyx_mstate_global->__pyx_tuple__135
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__138 __pyx_mstate_global->__pyx_tuple__138
#define __pyx_tuple__143 __pyx_mstate_global->__pyx_tuple__143
#define __pyx_tuple__145 __pyx_mstate_global->__pyx_tuple__145
#define __pyx_tuple__152 __pyx_mstate_global->__pyx_tuple__152
#define __pyx_tuple__157 __pyx_mstate_global->__pyx_tuple__157
#define __pyx_tuple__176 __pyx_mstate_global->__pyx_tuple__176
#define __pyx_tuple__180 __pyx_mstate_global->__pyx_tuple__180
#define __pyx_tuple__182 __pyx_mstate_global->__pyx_tuple__182
#define __pyx_tuple__184 __pyx_mstate_global->__pyx_tuple__184
#define __pyx_tuple__187 __pyx_mstate_global->__pyx_tuple__187
#define __pyx_tuple__189 __pyx_mstate_global->__pyx_tuple__189
#define __pyx_tuple__191 __pyx_mstate_global->__pyx_tuple__191
#define __pyx_tuple__195 __pyx_mstate_global->__pyx_tuple__195
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__72 __pyx_mstate_global->__pyx_codeobj__72
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__140 __pyx_mstate_global->__pyx_codeobj__140
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__142 __pyx_mstate_global->__pyx_codeobj__142
#define __pyx_codeobj__144 __pyx_mstate_global->__pyx_codeobj__144
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__148 __pyx_mstate_global->__pyx_codeobj__148
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__150 __pyx_mstate_global->__pyx_codeobj__150
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__153 __pyx_mstate_global->__pyx_codeobj__153
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__155 __pyx_mstate_global->__pyx_codeobj__155
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__159 __pyx_mstate_global->__pyx_codeobj__159
#define __pyx_codeobj__160 __pyx_mstate_global->__pyx_codeobj__160
#define __pyx_codeobj__161 __pyx_mstate_global->__pyx_codeobj__161
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__163 __pyx_mstate_global->__pyx_codeobj__163
#define __pyx_codeobj__164 __pyx_mstate_global->__pyx_codeobj__164
#define __pyx_codeobj__165 __pyx_mstate_global->__pyx_codeobj__165
#define __pyx_codeobj__166 __pyx_mstate_global->__pyx_codeobj__166
#define __pyx_codeobj__167 __pyx_mstate_global->__pyx_codeobj__167
#define __pyx_codeobj__168 __pyx_mstate_global->__pyx_codeobj__168
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__170 __pyx_mstate_global->__pyx_codeobj__170
#define __pyx_codeobj__171 __pyx_mstate_global->__pyx_codeobj__171
#define __pyx_codeobj__172 __pyx_mstate_global->__pyx_codeobj__172
#define __pyx_codeobj__173 __pyx_mstate_global->__pyx_codeobj__173
#define __pyx_codeobj__174 __pyx_mstate_global->__pyx_codeobj__174
#define __pyx_codeobj__175 __pyx_mstate_global->__pyx_codeobj__175
#define __pyx_codeobj__177 __pyx_mstate_global->__pyx_codeobj__177
#define __pyx_codeobj__178 __pyx_mstate_global->__pyx_codeobj__178
#define __pyx_codeobj__179 __pyx_mstate_global->__pyx_codeobj__179
#define __pyx_codeobj__181 __pyx_mstate_global->__pyx_codeobj__181
#define __pyx_codeobj__183 __pyx_mstate_global->__pyx_codeobj__183
#define __pyx_codeobj__185 __pyx_mstate_global->__pyx_codeobj__185
#define __pyx_codeobj__186 __pyx_mstate_global->__pyx_codeobj__186
#define __pyx_codeobj__188 __pyx_mstate_global->__pyx_codeobj__188
#define __pyx_codeobj__190 __pyx_mstate_global->__pyx_codeobj__190
#define __pyx_codeobj__192 __pyx_mstate_global->__pyx_codeobj__192
#define __pyx_codeobj__193 __pyx_mstate_global->__pyx_codeobj__193
#define __pyx_codeobj__194 __pyx_mstate_global->__pyx_codeobj__194
#define __pyx_codeobj__196 __pyx_mstate_global->__pyx_codeobj__196
#define __pyx_codeobj__197 __pyx_mstate_global->__pyx_codeobj__197
#define __pyx_codeobj__198 __pyx_mstate_global->__pyx_codeobj__198
#define __pyx_codeobj__199 __pyx_mstate_global->__pyx_codeobj__199
#define __pyx_codeobj__200 __pyx_mstate_global->__pyx_codeobj__200
/* #### Code section: module_code ### */

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((int)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real", 0);

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("imag", 0);

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":80
 * 
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):             # <<<<<<<<<<<<<<
 *     if st.ok():
 *         return
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_check_status(rocksdb::Status const &__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_status", 0);

  /* "rocksdb/_rocksdb.pyx":81
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):
 *     if st.ok():             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = (__pyx_v_st.ok() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":82
 * cdef check_status(const Status& st):
 *     if st.ok():
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if st.IsNotFound():
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":81
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):
 *     if st.ok():             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":84
 *         return
 * 
 *     if st.IsNotFound():             # <<<<<<<<<<<<<<
 *         raise NotFound(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsNotFound() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":85
 * 
 *     if st.IsNotFound():
 *         raise NotFound(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsCorruption():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NotFound); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 85, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 85, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":84
 *         return
 * 
 *     if st.IsNotFound():             # <<<<<<<<<<<<<<
 *         raise NotFound(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":87
 *         raise NotFound(st.ToString())
 * 
 *     if st.IsCorruption():             # <<<<<<<<<<<<<<
 *         raise Corruption(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsCorruption() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":88
 * 
 *     if st.IsCorruption():
 *         raise Corruption(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsNotSupported():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Corruption); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":87
 *         raise NotFound(st.ToString())
 * 
 *     if st.IsCorruption():             # <<<<<<<<<<<<<<
 *         raise Corruption(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":90
 *         raise Corruption(st.ToString())
 * 
 *     if st.IsNotSupported():             # <<<<<<<<<<<<<<
 *         raise NotSupported(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsNotSupported() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":91
 * 
 *     if st.IsNotSupported():
 *         raise NotSupported(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsInvalidArgument():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NotSupported); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 91, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":90
 *         raise Corruption(st.ToString())
 * 
 *     if st.IsNotSupported():             # <<<<<<<<<<<<<<
 *         raise NotSupported(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":93
 *         raise NotSupported(st.ToString())
 * 
 *     if st.IsInvalidArgument():             # <<<<<<<<<<<<<<
 *         raise InvalidArgument(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsInvalidArgument() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":94
 * 
 *     if st.IsInvalidArgument():
 *         raise InvalidArgument(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsIOError():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 94, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 94, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":93
 *         raise NotSupported(st.ToString())
 * 
 *     if st.IsInvalidArgument():             # <<<<<<<<<<<<<<
 *         raise InvalidArgument(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":96
 *         raise InvalidArgument(st.ToString())
 * 
 *     if st.IsIOError():             # <<<<<<<<<<<<<<
 *         raise RocksIOError(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsIOError() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":97
 * 
 *     if st.IsIOError():
 *         raise RocksIOError(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsMergeInProgress():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_RocksIOError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 97, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":96
 *         raise InvalidArgument(st.ToString())
 * 
 *     if st.IsIOError():             # <<<<<<<<<<<<<<
 *         raise RocksIOError(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":99
 *         raise RocksIOError(st.ToString())
 * 
 *     if st.IsMergeInProgress():             # <<<<<<<<<<<<<<
 *         raise MergeInProgress(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsMergeInProgress() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":100
 * 
 *     if st.IsMergeInProgress():
 *         raise MergeInProgress(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsIncomplete():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_MergeInProgress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 100, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 100, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":99
 *         raise RocksIOError(st.ToString())
 * 
 *     if st.IsMergeInProgress():             # <<<<<<<<<<<<<<
 *         raise MergeInProgress(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":102
 *         raise MergeInProgress(st.ToString())
 * 
 *     if st.IsIncomplete():             # <<<<<<<<<<<<<<
 *         raise Incomplete(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsIncomplete() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":103
 * 
 *     if st.IsIncomplete():
 *         raise Incomplete(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     raise Exception("Unknown error: %s" % st.ToString())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Incomplete); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 103, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 103, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":102
 *         raise MergeInProgress(st.ToString())
 * 
 *     if st.IsIncomplete():             # <<<<<<<<<<<<<<
 *         raise Incomplete(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":105
 *         raise Incomplete(st.ToString())
 * 
 *     raise Exception("Unknown error: %s" % st.ToString())             # <<<<<<<<<<<<<<
 * ######################################################
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_st.ToString();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 105, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Unknown_error_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 105, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":80
 * 
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):             # <<<<<<<<<<<<<<
 *     if st.ok():
 *         return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":109
 * 
 * 
 * cdef string bytes_to_string(path) except *:             # <<<<<<<<<<<<<<
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 */

static std::string __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(PyObject *__pyx_v_path) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_string", 0);

  /* "rocksdb/_rocksdb.pyx":110
 * 
 * cdef string bytes_to_string(path) except *:
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))             # <<<<<<<<<<<<<<
 * 
 * cdef string_to_bytes(string ob):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_path); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_t_2 = PyBytes_Size(__pyx_v_path); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 110, __pyx_L1_error)
  try {
    __pyx_t_3 = std::string(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 110, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":109
 * 
 * 
 * cdef string bytes_to_string(path) except *:             # <<<<<<<<<<<<<<
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.bytes_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":112
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 * cdef string_to_bytes(string ob):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_bytes(std::string __pyx_v_ob) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_bytes", 0);

  /* "rocksdb/_rocksdb.pyx":113
 * 
 * cdef string_to_bytes(string ob):
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())             # <<<<<<<<<<<<<<
 * 
 * cdef Slice bytes_to_slice(ob) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_ob.c_str(), __pyx_v_ob.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":112
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 * cdef string_to_bytes(string ob):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.string_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":115
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 * cdef Slice bytes_to_slice(ob) except *:             # <<<<<<<<<<<<<<
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 */

static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(PyObject *__pyx_v_ob) {
  rocksdb::Slice __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_slice", 0);

  /* "rocksdb/_rocksdb.pyx":116
 * 
 * cdef Slice bytes_to_slice(ob) except *:
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))             # <<<<<<<<<<<<<<
 * 
 * cdef Slice* bytes_to_new_slice(ob) except *:
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_ob); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_t_2 = PyBytes_Size(__pyx_v_ob); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_r = rocksdb::Slice(__pyx_t_1, __pyx_t_2);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":115
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 * cdef Slice bytes_to_slice(ob) except *:             # <<<<<<<<<<<<<<
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.bytes_to_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":118
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 * cdef Slice* bytes_to_new_slice(ob) except *:             # <<<<<<<<<<<<<<
 *     return new Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 */

static rocksdb::Slice *__pyx_f_7rocksdb_8_rocksdb_bytes_to_new_slice(PyObject *__pyx_v_ob) {
  rocksdb::Slice *__pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_new_slice", 0);

  /* "rocksdb/_rocksdb.pyx":119
 * 
 * cdef Slice* bytes_to_new_slice(ob) except *:
 *     return new Slice(PyBytes_AsString(ob), PyBytes_Size(ob))             # <<<<<<<<<<<<<<
 * 
 * cdef slice_to_bytes(Slice sl):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_ob); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_t_2 = PyBytes_Size(__pyx_v_ob); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_r = new rocksdb::Slice(__pyx_t_1, __pyx_t_2);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":118
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 * cdef Slice* bytes_to_new_slice(ob) except *:             # <<<<<<<<<<<<<<
 *     return new Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.bytes_to_new_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":121
 *     return new Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 * cdef slice_to_bytes(Slice sl):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(sl.data(), sl.size())
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(rocksdb::Slice __pyx_v_sl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("slice_to_bytes", 0);

  /* "rocksdb/_rocksdb.pyx":122
 * 
 * cdef slice_to_bytes(Slice sl):
 *     return PyBytes_FromStringAndSize(sl.data(), sl.size())             # <<<<<<<<<<<<<<
 * 
 * ## only for filsystem paths
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_sl.data(), __pyx_v_sl.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":121
 *     return new Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 * cdef slice_to_bytes(Slice sl):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(sl.data(), sl.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.slice_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":125
 * 
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:             # <<<<<<<<<<<<<<
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 */

static std::string __pyx_f_7rocksdb_8_rocksdb_path_to_string(PyObject *__pyx_v_path) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("path_to_string", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "rocksdb/_rocksdb.pyx":126
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:
 *     if isinstance(path, bytes):             # <<<<<<<<<<<<<<
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_path); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":127
 * cdef string path_to_string(object path) except *:
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)             # <<<<<<<<<<<<<<
 *     if isinstance(path, unicode):
 *         path = path.encode(sys.getfilesystemencoding())
 */
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":126
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:
 *     if isinstance(path, bytes):             # <<<<<<<<<<<<<<
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):
 */
  }

  /* "rocksdb/_rocksdb.pyx":128
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):             # <<<<<<<<<<<<<<
 *         path = path.encode(sys.getfilesystemencoding())
 *         return bytes_to_string(path)
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_path); 
  if (likely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":129
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):
 *         path = path.encode(sys.getfilesystemencoding())             # <<<<<<<<<<<<<<
 *         return bytes_to_string(path)
 *     else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_sys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getfilesystemencoding); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":130
 *     if isinstance(path, unicode):
 *         path = path.encode(sys.getfilesystemencoding())
 *         return bytes_to_string(path)             # <<<<<<<<<<<<<<
 *     else:
 *        raise TypeError("Wrong type for path: %s" % path)
 */
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":128
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):             # <<<<<<<<<<<<<<
 *         path = path.encode(sys.getfilesystemencoding())
 *         return bytes_to_string(path)
 */
  }

  /* "rocksdb/_rocksdb.pyx":132
 *         return bytes_to_string(path)
 *     else:
 *        raise TypeError("Wrong type for path: %s" % path)             # <<<<<<<<<<<<<<
 * 
 * cdef object string_to_path(string path):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Wrong_type_for_path_s, __pyx_v_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 132, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":125
 * 
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:             # <<<<<<<<<<<<<<
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.path_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":134
 *        raise TypeError("Wrong type for path: %s" % path)
 * 
 * cdef object string_to_path(string path):             # <<<<<<<<<<<<<<
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_path(std::string __pyx_v_path) {
  PyObject *__pyx_v_fs_encoding = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_path", 0);

  /* "rocksdb/_rocksdb.pyx":135
 * 
 * cdef object string_to_path(string path):
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')             # <<<<<<<<<<<<<<
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getfilesystemencoding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_ascii};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_fs_encoding = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":136
 * cdef object string_to_path(string path):
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")             # <<<<<<<<<<<<<<
 * 
 * ## Here comes the stuff for the comparator
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_fs_encoding); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_t_1 = PyUnicode_Decode(__pyx_v_path.c_str(), __pyx_v_path.size(), __pyx_t_6, ((char *)"replace")); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":134
 *        raise TypeError("Wrong type for path: %s" % path)
 * 
 * cdef object string_to_path(string path):             # <<<<<<<<<<<<<<
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.string_to_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fs_encoding);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":141
 * @cython.internal
 * cdef class PyComparator(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":142
 * cdef class PyComparator(object):
 *     cdef object get_ob(self):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":141
 * @cython.internal
 * cdef class PyComparator(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":144
 *         return None
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */

static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_comparator(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self) {
  rocksdb::Comparator const *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_comparator", 0);

  /* "rocksdb/_rocksdb.pyx":145
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":144
 *         return None
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":147
 *         return NULL
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12PyComparator_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyComparator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12PyComparator___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12PyComparator___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_PyComparator); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PyComparator__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PyComparator); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyComparator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyComparator__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12PyComparator_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 16, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyComparator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12PyComparator_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12PyComparator_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PyComparator__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyComparator__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyComparator__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyComparator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":155
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 155, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ob)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 155, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 155, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, PyObject *__pyx_v_ob) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::string __pyx_t_9;
  py_rocks::ComparatorWrapper *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":156
 * 
 *     def __cinit__(self, object ob):
 *         self.comparator_ptr = NULL             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, IComparator):
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 */
  __pyx_v_self->comparator_ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":157
 *     def __cinit__(self, object ob):
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IComparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "rocksdb/_rocksdb.pyx":158
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))             # <<<<<<<<<<<<<<
 * 
 *         self.ob = ob
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_ob), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_not_of_type);
    __pyx_t_4 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_is_not_of_type);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_is_not_of_type);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_IComparator); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 158, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":157
 *     def __cinit__(self, object ob):
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":160
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 * 
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = new comparator.ComparatorWrapper(
 *                 bytes_to_string(ob.name()),
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":162
 *         self.ob = ob
 *         self.comparator_ptr = new comparator.ComparatorWrapper(
 *                 bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                 <void*>ob,
 *                 compare_callback)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_9 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":161
 * 
 *         self.ob = ob
 *         self.comparator_ptr = new comparator.ComparatorWrapper(             # <<<<<<<<<<<<<<
 *                 bytes_to_string(ob.name()),
 *                 <void*>ob,
 */
  try {
    __pyx_t_10 = new py_rocks::ComparatorWrapper(__pyx_t_9, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_compare_callback);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 161, __pyx_L1_error)
  }
  __pyx_v_self->comparator_ptr = __pyx_t_10;

  /* "rocksdb/_rocksdb.pyx":155
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":166
 *                 compare_callback)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.comparator_ptr == NULL:
 *             del self.comparator_ptr
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":167
 * 
 *     def __dealloc__(self):
 *         if not self.comparator_ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.comparator_ptr
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->comparator_ptr == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":168
 *     def __dealloc__(self):
 *         if not self.comparator_ptr == NULL:
 *             del self.comparator_ptr             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
    delete __pyx_v_self->comparator_ptr;

    /* "rocksdb/_rocksdb.pyx":167
 * 
 *     def __dealloc__(self):
 *         if not self.comparator_ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.comparator_ptr
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":166
 *                 compare_callback)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.comparator_ptr == NULL:
 *             del self.comparator_ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":170
 *             del self.comparator_ptr
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":171
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":170
 *             del self.comparator_ptr
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":173
 *         return self.ob
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 */

static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  rocksdb::Comparator const *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_comparator", 0);

  /* "rocksdb/_rocksdb.pyx":174
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 *         return <comparator.Comparator*> self.comparator_ptr             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = ((rocksdb::Comparator *)__pyx_v_self->comparator_ptr);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":173
 *         return self.ob
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":176
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr.set_info_log(info_log)
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":177
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         self.comparator_ptr.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  try {
    __pyx_v_self->comparator_ptr->set_info_log(__pyx_v_info_log);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 177, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":176
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr.set_info_log(info_log)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyGenericComparator_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_4__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyGenericComparator_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_6__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":183
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 183, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Comparator const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":184
 * 
 *     def __cinit__(self):
 *         self.comparator_ptr = comparator.BytewiseComparator()             # <<<<<<<<<<<<<<
 * 
 *     def name(self):
 */
  try {
    __pyx_t_1 = rocksdb::BytewiseComparator();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 184, __pyx_L1_error)
  }
  __pyx_v_self->comparator_ptr = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":183
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":186
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name = {"name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 186, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("name", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "name", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_2name(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("name", 0);

  /* "rocksdb/_rocksdb.pyx":187
 * 
 *     def name(self):
 *         return PyBytes_FromString(self.comparator_ptr.Name())             # <<<<<<<<<<<<<<
 * 
 *     def compare(self, a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_self->comparator_ptr->Name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":186
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":189
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare = {"compare", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compare (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 189, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("compare", 1, 2, 2, 1); __PYX_ERR(0, 189, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "compare") < 0)) __PYX_ERR(0, 189, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compare", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 189, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_4compare(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_4compare(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compare", 0);

  /* "rocksdb/_rocksdb.pyx":190
 * 
 *     def compare(self, a, b):
 *         return self.comparator_ptr.Compare(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(a),
 *             bytes_to_slice(b))
 */
  __Pyx_XDECREF(__pyx_r);

  /* "rocksdb/_rocksdb.pyx":191
 *     def compare(self, a, b):
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),             # <<<<<<<<<<<<<<
 *             bytes_to_slice(b))
 * 
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":192
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 *             bytes_to_slice(b))             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":190
 * 
 *     def compare(self, a, b):
 *         return self.comparator_ptr.Compare(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(a),
 *             bytes_to_slice(b))
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->comparator_ptr->Compare(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":189
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":194
 *             bytes_to_slice(b))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *        return self
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":195
 * 
 *     cdef object get_ob(self):
 *        return self             # <<<<<<<<<<<<<<
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":194
 *             bytes_to_slice(b))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *        return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":197
 *        return self
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr
 * 
 */

static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  rocksdb::Comparator const *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_comparator", 0);

  /* "rocksdb/_rocksdb.pyx":198
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 *         return self.comparator_ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->comparator_ptr;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":197
 *        return self
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_6__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_8__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":202
 * 
 * 
 * cdef int compare_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static int __pyx_f_7rocksdb_8_rocksdb_compare_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_a, rocksdb::Slice const &__pyx_v_b) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char const *__pyx_t_12;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("compare_callback", 0);

  /* "rocksdb/_rocksdb.pyx":209
 *     const Slice& b) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":210
 * 
 *     try:
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_compare); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_a); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 210, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_b); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 210, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_9;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":209
 *     const Slice& b) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "rocksdb/_rocksdb.pyx":211
 *     try:
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("rocksdb._rocksdb.compare_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 211, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":212
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_traceback); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 212, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 212, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_8, };
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 212, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_v_tb = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "rocksdb/_rocksdb.pyx":213
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
        if (unlikely(__pyx_v_tb == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 213, __pyx_L14_error)
        }
        __pyx_t_11 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L14_error)
        try {
          rocksdb::Log(__pyx_v_log, ((char const *)"Error in compare callback: %s"), __pyx_t_11);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 213, __pyx_L14_error)
        }

        /* "rocksdb/_rocksdb.pyx":214
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * BytewiseComparator = PyBytewiseComparator
 */
        __pyx_t_6 = __Pyx_PyObject_Str(__pyx_v_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 214, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__pyx_t_6 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 214, __pyx_L14_error)
        }
        __pyx_t_12 = __Pyx_PyBytes_AsString(__pyx_t_6); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L14_error)
        try {
          __pyx_v_error_msg.assign(__pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 214, __pyx_L14_error)
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":211
 *     try:
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "rocksdb/_rocksdb.pyx":209
 *     const Slice& b) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":202
 * 
 * 
 * cdef int compare_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("rocksdb._rocksdb.compare_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":224
 * @cython.internal
 * cdef class PyFilterPolicy(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":225
 * cdef class PyFilterPolicy(object):
 *     cdef object get_ob(self):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":224
 * @cython.internal
 * cdef class PyFilterPolicy(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":227
 *         return None
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[ConstFilterPolicy]()
 * 
 */

static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_policy(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self) {
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_policy", 0);

  /* "rocksdb/_rocksdb.pyx":228
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 *         return shared_ptr[ConstFilterPolicy]()             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  try {
    __pyx_t_1 = std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 228, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":227
 *         return None
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[ConstFilterPolicy]()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyFilterPolicy.get_policy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":230
 *         return shared_ptr[ConstFilterPolicy]()
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_14PyFilterPolicy_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyFilterPolicy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_14PyFilterPolicy___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyFilterPolicy___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_PyFilterPolicy); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PyFilterPolicy__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PyFilterPolicy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyFilterPolicy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyFilterPolicy__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_14PyFilterPolicy_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 16, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyFilterPolicy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_14PyFilterPolicy_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyFilterPolicy_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PyFilterPolicy__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyFilterPolicy__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyFilterPolicy__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyFilterPolicy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":238
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, IFilterPolicy):
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 238, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ob)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 238, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 238, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, PyObject *__pyx_v_ob) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::string __pyx_t_9;
  py_rocks::FilterPolicyWrapper *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":239
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, IFilterPolicy):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IFilterPolicy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "rocksdb/_rocksdb.pyx":240
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, IFilterPolicy):
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))             # <<<<<<<<<<<<<<
 * 
 *         self.ob = ob
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_ob), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_not_of_type);
    __pyx_t_4 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_is_not_of_type);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_is_not_of_type);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_IFilterPolicy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 240, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":239
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, IFilterPolicy):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":242
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 * 
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         self.policy.reset(new filter_policy.FilterPolicyWrapper(
 *                 bytes_to_string(ob.name()),
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":244
 *         self.ob = ob
 *         self.policy.reset(new filter_policy.FilterPolicyWrapper(
 *                 bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                 <void*>ob,
 *                 create_filter_callback,
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_9 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":243
 * 
 *         self.ob = ob
 *         self.policy.reset(new filter_policy.FilterPolicyWrapper(             # <<<<<<<<<<<<<<
 *                 bytes_to_string(ob.name()),
 *                 <void*>ob,
 */
  try {
    __pyx_t_10 = new py_rocks::FilterPolicyWrapper(__pyx_t_9, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_create_filter_callback, __pyx_f_7rocksdb_8_rocksdb_key_may_match_callback);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 243, __pyx_L1_error)
  }
  try {
    __pyx_v_self->policy.reset(__pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 243, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":238
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, IFilterPolicy):
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":249
 *                 key_may_match_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":250
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":249
 *                 key_may_match_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":252
 *         return self.ob
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 */

static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self) {
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_policy", 0);

  /* "rocksdb/_rocksdb.pyx":253
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = ((std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy> )__pyx_v_self->policy);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":252
 *         return self.ob
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":255
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.policy.get().set_info_log(info_log)
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  py_rocks::FilterPolicyWrapper *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":256
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         self.policy.get().set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 256, __pyx_L1_error)
  }
  try {
    __pyx_t_1->set_info_log(__pyx_v_info_log);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 256, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":255
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.policy.get().set_info_log(info_log)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":259
 * 
 * 
 * cdef void create_filter_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static void __pyx_f_7rocksdb_8_rocksdb_create_filter_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const *__pyx_v_keys, int __pyx_v_n, std::string *__pyx_v_dst) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  int __pyx_7genexpr__pyx_v_i;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::string __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  char *__pyx_t_14;
  char const *__pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("create_filter_callback", 0);

  /* "rocksdb/_rocksdb.pyx":267
 *     string* dst) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":268
 * 
 *     try:
 *         ret = (<object>ctx).create_filter(             # <<<<<<<<<<<<<<
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_create_filter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      { /* enter inner scope */

        /* "rocksdb/_rocksdb.pyx":269
 *     try:
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])             # <<<<<<<<<<<<<<
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 269, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_v_n;
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_7genexpr__pyx_v_i = __pyx_t_9;
          __pyx_t_10 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_keys[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 269, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 269, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      } /* exit inner scope */
      __pyx_t_10 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_ret = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":270
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_11 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_ret); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L3_error)
      try {
        __pyx_v_dst->append(__pyx_t_11);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 270, __pyx_L3_error)
      }

      /* "rocksdb/_rocksdb.pyx":267
 *     string* dst) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "rocksdb/_rocksdb.pyx":271
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("rocksdb._rocksdb.create_filter_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 271, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":272
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_traceback); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 272, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 272, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_12, };
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 272, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __pyx_v_tb = __pyx_t_10;
        __pyx_t_10 = 0;

        /* "rocksdb/_rocksdb.pyx":273
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
        if (unlikely(__pyx_v_tb == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 273, __pyx_L16_error)
        }
        __pyx_t_14 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L16_error)
        try {
          rocksdb::Log(__pyx_v_log, ((char const *)"Error in create filter callback: %s"), __pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 273, __pyx_L16_error)
        }

        /* "rocksdb/_rocksdb.pyx":274
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool key_may_match_callback(
 */
        __pyx_t_10 = __Pyx_PyObject_Str(__pyx_v_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 274, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (unlikely(__pyx_t_10 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 274, __pyx_L16_error)
        }
        __pyx_t_15 = __Pyx_PyBytes_AsString(__pyx_t_10); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L16_error)
        try {
          __pyx_v_error_msg.assign(__pyx_t_15);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 274, __pyx_L16_error)
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":271
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          goto __pyx_L17;
        }
        __pyx_L16_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
          }
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_16;
          goto __pyx_L5_except_error;
        }
        __pyx_L17:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "rocksdb/_rocksdb.pyx":267
 *     string* dst) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "rocksdb/_rocksdb.pyx":259
 * 
 * 
 * cdef void create_filter_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("rocksdb._rocksdb.create_filter_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "rocksdb/_rocksdb.pyx":276
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool key_may_match_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_key_may_match_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const &__pyx_v_filt) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  bool __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  char *__pyx_t_12;
  char const *__pyx_t_13;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("key_may_match_callback", 0);

  /* "rocksdb/_rocksdb.pyx":283
 *     const Slice& filt) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":284
 * 
 *     try:
 *         return (<object>ctx).key_may_match(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_key_may_match); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "rocksdb/_rocksdb.pyx":285
 *     try:
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(filt))
 *     except BaseException as error:
 */
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":286
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_filt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 286, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":284
 * 
 *     try:
 *         return (<object>ctx).key_may_match(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 */
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_10 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_10;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":283
 *     const Slice& filt) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "rocksdb/_rocksdb.pyx":287
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("rocksdb._rocksdb.key_may_match_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 287, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":288
 *             slice_to_bytes(filt))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_traceback); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 288, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 288, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_8, };
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_v_tb = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "rocksdb/_rocksdb.pyx":289
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
        if (unlikely(__pyx_v_tb == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 289, __pyx_L14_error)
        }
        __pyx_t_12 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L14_error)
        try {
          rocksdb::Log(__pyx_v_log, ((char const *)"Error in key_mach_match callback: %s"), __pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 289, __pyx_L14_error)
        }

        /* "rocksdb/_rocksdb.pyx":290
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
        __pyx_t_6 = __Pyx_PyObject_Str(__pyx_v_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__pyx_t_6 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 290, __pyx_L14_error)
        }
        __pyx_t_13 = __Pyx_PyBytes_AsString(__pyx_t_6); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L14_error)
        try {
          __pyx_v_error_msg.assign(__pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 290, __pyx_L14_error)
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":287
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_9 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "rocksdb/_rocksdb.pyx":283
 *     const Slice& filt) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":276
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool key_may_match_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("rocksdb._rocksdb.key_may_match_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":296
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 *     def __cinit__(self, int bits_per_key):             # <<<<<<<<<<<<<<
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_bits_per_key;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 296, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bits_per_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bits_per_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 296, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_bits_per_key = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_bits_per_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 296, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), __pyx_v_bits_per_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, int __pyx_v_bits_per_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::FilterPolicy const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":297
 * 
 *     def __cinit__(self, int bits_per_key):
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))             # <<<<<<<<<<<<<<
 * 
 *     def name(self):
 */
  try {
    __pyx_t_1 = rocksdb::NewBloomFilterPolicy(__pyx_v_bits_per_key);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  try {
    __pyx_v_self->policy.reset(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 297, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":296
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 *     def __cinit__(self, int bits_per_key):             # <<<<<<<<<<<<<<
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":299
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name = {"name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 299, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("name", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "name", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_2name(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_1;
  const char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("name", 0);

  /* "rocksdb/_rocksdb.pyx":300
 * 
 *     def name(self):
 *         return PyBytes_FromString(self.policy.get().Name())             # <<<<<<<<<<<<<<
 * 
 *     def create_filter(self, keys):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_1->Name();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  __pyx_t_3 = PyBytes_FromString(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":299
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":302
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 *     def create_filter(self, keys):             # <<<<<<<<<<<<<<
 *         cdef string dst
 *         cdef vector[Slice] c_keys
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter = {"create_filter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_keys = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_filter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 302, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keys,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_keys)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "create_filter") < 0)) __PYX_ERR(0, 302, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_keys = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_filter", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 302, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.create_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_4create_filter(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), __pyx_v_keys);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_4create_filter(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_keys) {
  std::string __pyx_v_dst;
  std::vector<rocksdb::Slice>  __pyx_v_c_keys;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  rocksdb::Slice __pyx_t_5;
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_filter", 0);

  /* "rocksdb/_rocksdb.pyx":306
 *         cdef vector[Slice] c_keys
 * 
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_keys)) || PyTuple_CheckExact(__pyx_v_keys)) {
    __pyx_t_1 = __pyx_v_keys; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 306, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 306, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 306, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":307
 * 
 *         for key in keys:
 *             c_keys.push_back(bytes_to_slice(key))             # <<<<<<<<<<<<<<
 * 
 *         self.policy.get().CreateFilter(
 */
    __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
    try {
      __pyx_v_c_keys.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 307, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":306
 *         cdef vector[Slice] c_keys
 * 
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":309
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 *         self.policy.get().CreateFilter(             # <<<<<<<<<<<<<<
 *             vector_data(c_keys),
 *             <int>c_keys.size(),
 */
  try {
    __pyx_t_6 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 309, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":312
 *             vector_data(c_keys),
 *             <int>c_keys.size(),
 *             cython.address(dst))             # <<<<<<<<<<<<<<
 * 
 *         return string_to_bytes(dst)
 */
  try {
    __pyx_t_6->CreateFilter(py_rocks::vector_data(__pyx_v_c_keys), ((int)__pyx_v_c_keys.size()), (&__pyx_v_dst));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 309, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":314
 *             cython.address(dst))
 * 
 *         return string_to_bytes(dst)             # <<<<<<<<<<<<<<
 * 
 *     def key_may_match(self, key, filter_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_dst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":302
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 *     def create_filter(self, keys):             # <<<<<<<<<<<<<<
 *         cdef string dst
 *         cdef vector[Slice] c_keys
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.create_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":316
 *         return string_to_bytes(dst)
 * 
 *     def key_may_match(self, key, filter_):             # <<<<<<<<<<<<<<
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match = {"key_may_match", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_filter_ = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("key_may_match (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 316, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_filter,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filter)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("key_may_match", 1, 2, 2, 1); __PYX_ERR(0, 316, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "key_may_match") < 0)) __PYX_ERR(0, 316, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_filter_ = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("key_may_match", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 316, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.key_may_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_6key_may_match(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), __pyx_v_key, __pyx_v_filter_);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_6key_may_match(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_filter_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  rocksdb::Slice __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("key_may_match", 0);

  /* "rocksdb/_rocksdb.pyx":317
 * 
 *     def key_may_match(self, key, filter_):
 *         return self.policy.get().KeyMayMatch(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(key),
 *             bytes_to_slice(filter_))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 317, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":318
 *     def key_may_match(self, key, filter_):
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),             # <<<<<<<<<<<<<<
 *             bytes_to_slice(filter_))
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":319
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 *             bytes_to_slice(filter_))             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_filter_); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":317
 * 
 *     def key_may_match(self, key, filter_):
 *         return self.policy.get().KeyMayMatch(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(key),
 *             bytes_to_slice(filter_))
 */
  try {
    __pyx_t_4 = __pyx_t_1->KeyMayMatch(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":316
 *         return string_to_bytes(dst)
 * 
 *     def key_may_match(self, key, filter_):             # <<<<<<<<<<<<<<
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.key_may_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":321
 *             bytes_to_slice(filter_))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":322
 * 
 *     cdef object get_ob(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":321
 *             bytes_to_slice(filter_))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":324
 *         return self
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return self.policy
 * 
 */

static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_policy", 0);

  /* "rocksdb/_rocksdb.pyx":325
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 *         return self.policy             # <<<<<<<<<<<<<<
 * 
 * BloomFilterPolicy = PyBloomFilterPolicy
 */
  __pyx_r = __pyx_v_self->policy;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":324
 *         return self
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return self.policy
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_8__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_10__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":338
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 338, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ob)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 338, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self, PyObject *__pyx_v_ob) {
  PyObject *__pyx_v_msg = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  py_rocks::AssociativeMergeOperatorWrapper *__pyx_t_7;
  py_rocks::MergeOperatorWrapper *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":339
 * 
 *     def __cinit__(self, object ob):
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         if isinstance(ob, IAssociativeMergeOperator):
 *             self.merge_op.reset(
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":340
 *     def __cinit__(self, object ob):
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IAssociativeMergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":344
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.AssociativeMergeOperatorWrapper(
 *                         bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                         <void*>(ob),
 *                         merge_callback))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":343
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.AssociativeMergeOperatorWrapper(             # <<<<<<<<<<<<<<
 *                         bytes_to_string(ob.name()),
 *                         <void*>(ob),
 */
    try {
      __pyx_t_7 = new py_rocks::AssociativeMergeOperatorWrapper(__pyx_t_6, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_merge_callback);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 343, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":341
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):
 *             self.merge_op.reset(             # <<<<<<<<<<<<<<
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.AssociativeMergeOperatorWrapper(
 */
    try {
      __pyx_v_self->merge_op.reset(((rocksdb::MergeOperator *)__pyx_t_7));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 341, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":340
 *     def __cinit__(self, object ob):
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":348
 *                         merge_callback))
 * 
 *         elif isinstance(ob, IMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IMergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "rocksdb/_rocksdb.pyx":352
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.MergeOperatorWrapper(
 *                         bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                         <void*>ob,
 *                         <void*>ob,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":351
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.MergeOperatorWrapper(             # <<<<<<<<<<<<<<
 *                         bytes_to_string(ob.name()),
 *                         <void*>ob,
 */
    try {
      __pyx_t_8 = new py_rocks::MergeOperatorWrapper(__pyx_t_6, ((void *)__pyx_v_ob), ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_full_merge_callback, __pyx_f_7rocksdb_8_rocksdb_partial_merge_callback);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 351, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":349
 * 
 *         elif isinstance(ob, IMergeOperator):
 *             self.merge_op.reset(             # <<<<<<<<<<<<<<
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.MergeOperatorWrapper(
 */
    try {
      __pyx_v_self->merge_op.reset(((rocksdb::MergeOperator *)__pyx_t_8));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 349, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":348
 *                         merge_callback))
 * 
 *         elif isinstance(ob, IMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":375
 *                 #  raise TypeError(msg)
 *         else:
 *             msg = "%s is not of this types %s"             # <<<<<<<<<<<<<<
 *             msg %= (ob, (IAssociativeMergeOperator, IMergeOperator))
 *             raise TypeError(msg)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_u_s_is_not_of_this_types_s);
    __pyx_v_msg = __pyx_kp_u_s_is_not_of_this_types_s;

    /* "rocksdb/_rocksdb.pyx":376
 *         else:
 *             msg = "%s is not of this types %s"
 *             msg %= (ob, (IAssociativeMergeOperator, IMergeOperator))             # <<<<<<<<<<<<<<
 *             raise TypeError(msg)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_IAssociativeMergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IMergeOperator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_ob);
    __Pyx_GIVEREF(__pyx_v_ob);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ob)) __PYX_ERR(0, 376, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyUnicode_Format(__pyx_v_msg, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_msg, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":377
 *             msg = "%s is not of this types %s"
 *             msg %= (ob, (IAssociativeMergeOperator, IMergeOperator))
 *             raise TypeError(msg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_v_msg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 377, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":338
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":380
 * 
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":381
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":380
 * 
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":383
 *         return self.ob
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):             # <<<<<<<<<<<<<<
 *         return self.merge_op
 * 
 */

static std::shared_ptr<rocksdb::MergeOperator>  __pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_operator(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self) {
  std::shared_ptr<rocksdb::MergeOperator>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_operator", 0);

  /* "rocksdb/_rocksdb.pyx":384
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):
 *         return self.merge_op             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool merge_callback(
 */
  __pyx_r = __pyx_v_self->merge_op;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":383
 *         return self.ob
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):             # <<<<<<<<<<<<<<
 *         return self.merge_op
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_15PyMergeOperator_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_15PyMergeOperator_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":386
 *         return self.merge_op
 * 
 * cdef cpp_bool merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_merge_callback(void *__pyx_v_ctx, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const *__pyx_v_existing_value, rocksdb::Slice const &__pyx_v_value, std::string *__pyx_v_new_value, rocksdb::Logger *__pyx_v_log) {
  PyObject *__pyx_v_py_existing_value = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  std::string __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("merge_callback", 0);

  /* "rocksdb/_rocksdb.pyx":394
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
  __pyx_t_1 = (__pyx_v_existing_value == NULL);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":395
 * 
 *     if existing_value == NULL:
 *         py_existing_value = None             # <<<<<<<<<<<<<<
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_py_existing_value = Py_None;

    /* "rocksdb/_rocksdb.pyx":394
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":397
 *         py_existing_value = None
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((*__pyx_v_existing_value)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_existing_value = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":399
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":400
 * 
 *     try:
 *         ret = (<object>ctx).merge(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             py_existing_value,
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_merge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 400, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":401
 *     try:
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             py_existing_value,
 *             slice_to_bytes(value))
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 401, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rocksdb/_rocksdb.pyx":403
 *             slice_to_bytes(key),
 *             py_existing_value,
 *             slice_to_bytes(value))             # <<<<<<<<<<<<<<
 * 
 *         if ret[0]:
 */
      __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 403, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_10 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_9, __pyx_t_7, __pyx_v_py_existing_value, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_10, 3+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_ret = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "rocksdb/_rocksdb.pyx":405
 *             slice_to_bytes(value))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 405, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":406
 * 
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        try {
          __pyx_v_new_value->assign(__pyx_t_11);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 406, __pyx_L4_error)
        }

        /* "rocksdb/_rocksdb.pyx":407
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L8_try_return;

        /* "rocksdb/_rocksdb.pyx":405
 *             slice_to_bytes(value))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      }

      /* "rocksdb/_rocksdb.pyx":408
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
      __pyx_r = 0;
      goto __pyx_L8_try_return;

      /* "rocksdb/_rocksdb.pyx":399
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "rocksdb/_rocksdb.pyx":410
 *         return False
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)
 */
    /*except:*/ {
      __Pyx_AddTraceback("rocksdb._rocksdb.merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_8) < 0) __PYX_ERR(0, 410, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "rocksdb/_rocksdb.pyx":411
 * 
 *     except:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)
 *         return False
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_traceback); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 411, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 411, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_10 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_9, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 411, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __pyx_v_tb = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":412
 *     except:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      if (unlikely(__pyx_v_tb == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
        __PYX_ERR(0, 412, __pyx_L6_except_error)
      }
      __pyx_t_13 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L6_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in merge_callback: %s"), __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 412, __pyx_L6_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":413
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool full_merge_callback(
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_except_return;
    }

    /* "rocksdb/_rocksdb.pyx":399
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":386
 *         return self.merge_op
 * 
 * cdef cpp_bool merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("rocksdb._rocksdb.merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_existing_value);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":415
 *         return False
 * 
 * cdef cpp_bool full_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_full_merge_callback(void *__pyx_v_ctx, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const *__pyx_v_existing_value, std::deque<std::string>  const &__pyx_v_op_list, std::string *__pyx_v_new_value, rocksdb::Logger *__pyx_v_log) {
  PyObject *__pyx_v_py_existing_value = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_tb = NULL;
  size_t __pyx_8genexpr1__pyx_v_i;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  std::string __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  char *__pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("full_merge_callback", 0);

  /* "rocksdb/_rocksdb.pyx":423
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
  __pyx_t_1 = (__pyx_v_existing_value == NULL);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":424
 * 
 *     if existing_value == NULL:
 *         py_existing_value = None             # <<<<<<<<<<<<<<
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_py_existing_value = Py_None;

    /* "rocksdb/_rocksdb.pyx":423
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":426
 *         py_existing_value = None
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((*__pyx_v_existing_value)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_existing_value = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":428
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":429
 * 
 *     try:
 *         ret = (<object>ctx).full_merge(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             py_existing_value,
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_full_merge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":430
 *     try:
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             py_existing_value,
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 430, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rocksdb/_rocksdb.pyx":431
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 *             py_existing_value,             # <<<<<<<<<<<<<<
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 * 
 */
      { /* enter inner scope */

        /* "rocksdb/_rocksdb.pyx":432
 *             slice_to_bytes(key),
 *             py_existing_value,
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])             # <<<<<<<<<<<<<<
 * 
 *         if ret[0]:
 */
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 432, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __pyx_v_op_list.size();
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_8genexpr1__pyx_v_i = __pyx_t_11;
          __pyx_t_12 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes((__pyx_v_op_list[__pyx_8genexpr1__pyx_v_i])); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 432, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 432, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
      } /* exit inner scope */
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_13 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_12, __pyx_t_7, __pyx_v_py_existing_value, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_13, 3+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_ret = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "rocksdb/_rocksdb.pyx":434
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 434, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":435
 * 
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        try {
          __pyx_v_new_value->assign(__pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 435, __pyx_L4_error)
        }

        /* "rocksdb/_rocksdb.pyx":436
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L8_try_return;

        /* "rocksdb/_rocksdb.pyx":434
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      }

      /* "rocksdb/_rocksdb.pyx":437
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
      __pyx_r = 0;
      goto __pyx_L8_try_return;

      /* "rocksdb/_rocksdb.pyx":428
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "rocksdb/_rocksdb.pyx":439
 *         return False
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)
 */
    /*except:*/ {
      __Pyx_AddTraceback("rocksdb._rocksdb.full_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_8) < 0) __PYX_ERR(0, 439, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "rocksdb/_rocksdb.pyx":440
 * 
 *     except:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)
 *         return False
 */
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_traceback); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 440, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 440, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
          __pyx_t_13 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_12, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __pyx_v_tb = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":441
 *     except:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      if (unlikely(__pyx_v_tb == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
        __PYX_ERR(0, 441, __pyx_L6_except_error)
      }
      __pyx_t_16 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_16) && PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L6_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in full_merge_callback: %s"), __pyx_t_16);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 441, __pyx_L6_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":442
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool partial_merge_callback(
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_except_return;
    }

    /* "rocksdb/_rocksdb.pyx":428
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 */
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":415
 *         return False
 * 
 * cdef cpp_bool full_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("rocksdb._rocksdb.full_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_existing_value);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":444
 *         return False
 * 
 * cdef cpp_bool partial_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_partial_merge_callback(void *__pyx_v_ctx, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const &__pyx_v_left_op, rocksdb::Slice const &__pyx_v_right_op, std::string *__pyx_v_new_value, rocksdb::Logger *__pyx_v_log) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  std::string __pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("partial_merge_callback", 0);

  /* "rocksdb/_rocksdb.pyx":452
 *     logger.Logger* log) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":453
 * 
 *     try:
 *         ret = (<object>ctx).partial_merge(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             slice_to_bytes(left_op),
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_partial_merge); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "rocksdb/_rocksdb.pyx":454
 *     try:
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(left_op),
 *             slice_to_bytes(right_op))
 */
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 454, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":455
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 *             slice_to_bytes(left_op),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(right_op))
 * 
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_left_op); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 455, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rocksdb/_rocksdb.pyx":456
 *             slice_to_bytes(key),
 *             slice_to_bytes(left_op),
 *             slice_to_bytes(right_op))             # <<<<<<<<<<<<<<
 * 
 *         if ret[0]:
 */
      __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_right_op); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 456, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_9, __pyx_t_6, __pyx_t_7, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 3+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 453, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_ret = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":458
 *             slice_to_bytes(right_op))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 458, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 458, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_11) {

        /* "rocksdb/_rocksdb.pyx":459
 * 
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        try {
          __pyx_v_new_value->assign(__pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 459, __pyx_L3_error)
        }

        /* "rocksdb/_rocksdb.pyx":460
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L7_try_return;

        /* "rocksdb/_rocksdb.pyx":458
 *             slice_to_bytes(right_op))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      }

      /* "rocksdb/_rocksdb.pyx":461
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
      __pyx_r = 0;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":452
 *     logger.Logger* log) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "rocksdb/_rocksdb.pyx":463
 *         return False
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)
 */
    /*except:*/ {
      __Pyx_AddTraceback("rocksdb._rocksdb.partial_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 463, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "rocksdb/_rocksdb.pyx":464
 * 
 *     except:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)
 *         return False
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_traceback); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 464, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_10 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_10 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_6, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 464, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_v_tb = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":465
 *     except:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         return False
 * ##############################################
 */
      if (unlikely(__pyx_v_tb == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
        __PYX_ERR(0, 465, __pyx_L5_except_error)
      }
      __pyx_t_13 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in partial_merge_callback: %s"), __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 465, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":466
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)
 *         return False             # <<<<<<<<<<<<<<
 * ##############################################
 * 
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }

    /* "rocksdb/_rocksdb.pyx":452
 *     logger.Logger* log) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":444
 *         return False
 * 
 * cdef cpp_bool partial_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("rocksdb._rocksdb.partial_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":472
 * @cython.internal
 * cdef class PyCache(object):
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[cache.Cache]()
 * 
 */

static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_7PyCache_get_cache(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self) {
  std::shared_ptr<rocksdb::Cache>  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<rocksdb::Cache>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cache", 0);

  /* "rocksdb/_rocksdb.pyx":473
 * cdef class PyCache(object):
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return shared_ptr[cache.Cache]()             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  try {
    __pyx_t_1 = std::shared_ptr<rocksdb::Cache> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 473, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":472
 * @cython.internal
 * cdef class PyCache(object):
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[cache.Cache]()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyCache.get_cache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7PyCache_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_7PyCache_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7PyCache_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7PyCache_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyCache.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7PyCache___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7PyCache___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_PyCache); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PyCache__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PyCache); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyCache.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyCache__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7PyCache_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_7PyCache_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7PyCache_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7PyCache_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 16, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyCache.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7PyCache_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7PyCache_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PyCache__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyCache__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyCache__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyCache.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":479
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 *     def __cinit__(self, capacity, shard_bits=None):             # <<<<<<<<<<<<<<
 *         if shard_bits is not None:
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_capacity = 0;
  PyObject *__pyx_v_shard_bits = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 479, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_capacity,&__pyx_n_s_shard_bits,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_capacity)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_shard_bits);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 479, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_capacity = values[0];
    __pyx_v_shard_bits = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 479, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)__pyx_v_self), __pyx_v_capacity, __pyx_v_shard_bits);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self, PyObject *__pyx_v_capacity, PyObject *__pyx_v_shard_bits) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":480
 * 
 *     def __cinit__(self, capacity, shard_bits=None):
 *         if shard_bits is not None:             # <<<<<<<<<<<<<<
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_shard_bits != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":481
 *     def __cinit__(self, capacity, shard_bits=None):
 *         if shard_bits is not None:
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)             # <<<<<<<<<<<<<<
 *         else:
 *             self.cache_ob = cache.NewLRUCache(capacity)
 */
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_capacity); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_shard_bits); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L1_error)
    __pyx_v_self->cache_ob = rocksdb::NewLRUCache(__pyx_t_2, __pyx_t_3);

    /* "rocksdb/_rocksdb.pyx":480
 * 
 *     def __cinit__(self, capacity, shard_bits=None):
 *         if shard_bits is not None:             # <<<<<<<<<<<<<<
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":483
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 *         else:
 *             self.cache_ob = cache.NewLRUCache(capacity)             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_capacity); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
    __pyx_v_self->cache_ob = rocksdb::NewLRUCache(__pyx_t_2);
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":479
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 *     def __cinit__(self, capacity, shard_bits=None):             # <<<<<<<<<<<<<<
 *         if shard_bits is not None:
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":485
 *             self.cache_ob = cache.NewLRUCache(capacity)
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return self.cache_ob
 * 
 */

static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_10PyLRUCache_get_cache(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self) {
  std::shared_ptr<rocksdb::Cache>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cache", 0);

  /* "rocksdb/_rocksdb.pyx":486
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return self.cache_ob             # <<<<<<<<<<<<<<
 * 
 * LRUCache = PyLRUCache
 */
  __pyx_r = __pyx_v_self->cache_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":485
 *             self.cache_ob = cache.NewLRUCache(capacity)
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return self.cache_ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10PyLRUCache_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10PyLRUCache_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":497
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, ISliceTransform):
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 497, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ob)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 497, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 497, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, PyObject *__pyx_v_ob) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::string __pyx_t_9;
  py_rocks::SliceTransformWrapper *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":498
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, ISliceTransform):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ISliceTransform); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "rocksdb/_rocksdb.pyx":499
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, ISliceTransform):
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))             # <<<<<<<<<<<<<<
 * 
 *         self.ob = ob
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_ob), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_not_of_type);
    __pyx_t_4 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_is_not_of_type);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_is_not_of_type);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ISliceTransform); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 499, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":498
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, ISliceTransform):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":501
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 * 
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         self.transfomer.reset(
 *             <slice_transform.SliceTransform*>
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":505
 *             <slice_transform.SliceTransform*>
 *                 new slice_transform.SliceTransformWrapper(
 *                     bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                     <void*>ob,
 *                     slice_transform_callback,
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_9 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":504
 *         self.transfomer.reset(
 *             <slice_transform.SliceTransform*>
 *                 new slice_transform.SliceTransformWrapper(             # <<<<<<<<<<<<<<
 *                     bytes_to_string(ob.name()),
 *                     <void*>ob,
 */
  try {
    __pyx_t_10 = new py_rocks::SliceTransformWrapper(__pyx_t_9, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_slice_transform_callback, __pyx_f_7rocksdb_8_rocksdb_slice_in_domain_callback, __pyx_f_7rocksdb_8_rocksdb_slice_in_range_callback);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 504, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":502
 * 
 *         self.ob = ob
 *         self.transfomer.reset(             # <<<<<<<<<<<<<<
 *             <slice_transform.SliceTransform*>
 *                 new slice_transform.SliceTransformWrapper(
 */
  try {
    __pyx_v_self->transfomer.reset(((rocksdb::SliceTransform *)__pyx_t_10));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 502, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":497
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, ISliceTransform):
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":511
 *                     slice_in_range_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":512
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":511
 *                     slice_in_range_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":514
 *         return self.ob
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):             # <<<<<<<<<<<<<<
 *         return self.transfomer
 * 
 */

static std::shared_ptr<rocksdb::SliceTransform>  __pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_transformer(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self) {
  std::shared_ptr<rocksdb::SliceTransform>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_transformer", 0);

  /* "rocksdb/_rocksdb.pyx":515
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):
 *         return self.transfomer             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = __pyx_v_self->transfomer;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":514
 *         return self.ob
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):             # <<<<<<<<<<<<<<
 *         return self.transfomer
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":517
 *         return self.transfomer
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  py_rocks::SliceTransformWrapper *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::SliceTransform *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":519
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()             # <<<<<<<<<<<<<<
 *         ptr.set_info_log(info_log)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->transfomer.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 519, __pyx_L1_error)
  }
  __pyx_v_ptr = ((py_rocks::SliceTransformWrapper *)__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":520
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()
 *         ptr.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_ptr->set_info_log(__pyx_v_info_log);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 520, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":517
 *         return self.transfomer
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16PySliceTransform_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16PySliceTransform_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":523
 * 
 * 
 * cdef Slice slice_transform_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_slice_transform_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_src) {
  size_t __pyx_v_offset;
  size_t __pyx_v_size;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  rocksdb::Slice __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  char const *__pyx_t_14;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("slice_transform_callback", 0);

  /* "rocksdb/_rocksdb.pyx":532
 *     cdef size_t size
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":533
 * 
 *     try:
 *         ret = (<object>ctx).transform(slice_to_bytes(src))             # <<<<<<<<<<<<<<
 *         offset = ret[0]
 *         size = ret[1]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_transform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 533, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_src); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 533, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_ret = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":534
 *     try:
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]             # <<<<<<<<<<<<<<
 *         size = ret[1]
 *         if (offset + size) > src.size():
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_offset = __pyx_t_9;

      /* "rocksdb/_rocksdb.pyx":535
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 *         size = ret[1]             # <<<<<<<<<<<<<<
 *         if (offset + size) > src.size():
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_size = __pyx_t_9;

      /* "rocksdb/_rocksdb.pyx":536
 *         offset = ret[0]
 *         size = ret[1]
 *         if (offset + size) > src.size():             # <<<<<<<<<<<<<<
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 *             raise Exception(msg  % (offset, size, src.size()))
 */
      __pyx_t_10 = ((__pyx_v_offset + __pyx_v_size) > __pyx_v_src.size());
      if (unlikely(__pyx_t_10)) {

        /* "rocksdb/_rocksdb.pyx":537
 *         size = ret[1]
 *         if (offset + size) > src.size():
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"             # <<<<<<<<<<<<<<
 *             raise Exception(msg  % (offset, size, src.size()))
 * 
 */
        __Pyx_INCREF(__pyx_kp_u_offset_i_size_i_is_bigger_than_s);
        __pyx_v_msg = __pyx_kp_u_offset_i_size_i_is_bigger_than_s;

        /* "rocksdb/_rocksdb.pyx":538
 *         if (offset + size) > src.size():
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 *             raise Exception(msg  % (offset, size, src.size()))             # <<<<<<<<<<<<<<
 * 
 *         return Slice(src.data() + offset, size)
 */
        __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 538, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_src.size()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4)) __PYX_ERR(0, 538, __pyx_L3_error);
        __Pyx_GIVEREF(__pyx_t_5);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5)) __PYX_ERR(0, 538, __pyx_L3_error);
        __Pyx_GIVEREF(__pyx_t_6);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6)) __PYX_ERR(0, 538, __pyx_L3_error);
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_6 = PyUnicode_Format(__pyx_v_msg, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 538, __pyx_L3_error)

        /* "rocksdb/_rocksdb.pyx":536
 *         offset = ret[0]
 *         size = ret[1]
 *         if (offset + size) > src.size():             # <<<<<<<<<<<<<<
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 *             raise Exception(msg  % (offset, size, src.size()))
 */
      }

      /* "rocksdb/_rocksdb.pyx":540
 *             raise Exception(msg  % (offset, size, src.size()))
 * 
 *         return Slice(src.data() + offset, size)             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_r = rocksdb::Slice((__pyx_v_src.data() + __pyx_v_offset), __pyx_v_size);
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":532
 *     cdef size_t size
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "rocksdb/_rocksdb.pyx":541
 * 
 *         return Slice(src.data() + offset, size)
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("rocksdb._rocksdb.slice_transform_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 541, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_error = __pyx_t_6;
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":542
 *         return Slice(src.data() + offset, size)
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 542, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 542, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_11, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __pyx_v_tb = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "rocksdb/_rocksdb.pyx":543
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
        if (unlikely(__pyx_v_tb == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 543, __pyx_L15_error)
        }
        __pyx_t_13 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L15_error)
        try {
          rocksdb::Log(__pyx_v_log, ((char const *)"Error in slice transform callback: %s"), __pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 543, __pyx_L15_error)
        }

        /* "rocksdb/_rocksdb.pyx":544
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool slice_in_domain_callback(
 */
        __pyx_t_4 = __Pyx_PyObject_Str(__pyx_v_error); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__pyx_t_4 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 544, __pyx_L15_error)
        }
        __pyx_t_14 = __Pyx_PyBytes_AsString(__pyx_t_4); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L15_error)
        try {
          __pyx_v_error_msg.assign(__pyx_t_14);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 544, __pyx_L15_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":541
 * 
 *         return Slice(src.data() + offset, size)
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          goto __pyx_L16;
        }
        __pyx_L15_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __pyx_t_8 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
          }
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
          __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_16;
          goto __pyx_L5_except_error;
        }
        __pyx_L16:;
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "rocksdb/_rocksdb.pyx":532
 *     cdef size_t size
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":523
 * 
 * 
 * cdef Slice slice_transform_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("rocksdb._rocksdb.slice_transform_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":546
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_domain_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_domain_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_src) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  bool __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  char *__pyx_t_12;
  char const *__pyx_t_13;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("slice_in_domain_callback", 0);

  /* "rocksdb/_rocksdb.pyx":552
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":553
 * 
 *     try:
 *         return (<object>ctx).in_domain(slice_to_bytes(src))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_in_domain); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_src); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 553, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_9;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":552
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "rocksdb/_rocksdb.pyx":554
 *     try:
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("rocksdb._rocksdb.slice_in_domain_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 554, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":555
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_traceback); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 555, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 555, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 555, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_v_tb = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "rocksdb/_rocksdb.pyx":556
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
        if (unlikely(__pyx_v_tb == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 556, __pyx_L14_error)
        }
        __pyx_t_12 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L14_error)
        try {
          rocksdb::Log(__pyx_v_log, ((char const *)"Error in slice transform callback: %s"), __pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 556, __pyx_L14_error)
        }

        /* "rocksdb/_rocksdb.pyx":557
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool slice_in_range_callback(
 */
        __pyx_t_7 = __Pyx_PyObject_Str(__pyx_v_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 557, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__pyx_t_7 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 557, __pyx_L14_error)
        }
        __pyx_t_13 = __Pyx_PyBytes_AsString(__pyx_t_7); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 557, __pyx_L14_error)
        try {
          __pyx_v_error_msg.assign(__pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 557, __pyx_L14_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":554
 *     try:
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_8 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "rocksdb/_rocksdb.pyx":552
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":546
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_domain_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("rocksdb._rocksdb.slice_in_domain_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":559
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_range_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_range_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_src) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  bool __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  char *__pyx_t_12;
  char const *__pyx_t_13;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("slice_in_range_callback", 0);

  /* "rocksdb/_rocksdb.pyx":565
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":566
 * 
 *     try:
 *         return (<object>ctx).in_range(slice_to_bytes(src))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_in_range); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_src); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_9;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":565
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "rocksdb/_rocksdb.pyx":567
 *     try:
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("rocksdb._rocksdb.slice_in_range_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 567, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":568
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_traceback); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 568, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 568, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 568, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_v_tb = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "rocksdb/_rocksdb.pyx":569
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * ###########################################
 */
        if (unlikely(__pyx_v_tb == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 569, __pyx_L14_error)
        }
        __pyx_t_12 = __Pyx_PyBytes_AsWritableString(__pyx_v_tb); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 569, __pyx_L14_error)
        try {
          rocksdb::Log(__pyx_v_log, ((char const *)"Error in slice transform callback: %s"), __pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 569, __pyx_L14_error)
        }

        /* "rocksdb/_rocksdb.pyx":570
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * ###########################################
 * 
 */
        __pyx_t_7 = __Pyx_PyObject_Str(__pyx_v_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 570, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__pyx_t_7 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
          __PYX_ERR(0, 570, __pyx_L14_error)
        }
        __pyx_t_13 = __Pyx_PyBytes_AsString(__pyx_t_7); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L14_error)
        try {
          __pyx_v_error_msg.assign(__pyx_t_13);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 570, __pyx_L14_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "rocksdb/_rocksdb.pyx":567
 *     try:
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transform callback: %s", <bytes>tb)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_8 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_error); __pyx_v_error = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "rocksdb/_rocksdb.pyx":565
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":559
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_range_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("rocksdb._rocksdb.slice_in_range_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":578
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 *     cdef shared_ptr[table_factory.TableFactory] get_table_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

static std::shared_ptr<rocksdb::TableFactory>  __pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_get_table_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self) {
  std::shared_ptr<rocksdb::TableFactory>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_table_factory", 0);

  /* "rocksdb/_rocksdb.pyx":579
 * 
 *     cdef shared_ptr[table_factory.TableFactory] get_table_factory(self):
 *         return self.factory             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = __pyx_v_self->factory;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":578
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 *     cdef shared_ptr[table_factory.TableFactory] get_table_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":581
 *         return self.factory
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_14PyTableFactory_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyTableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_14PyTableFactory___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyTableFactory___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyTableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_14PyTableFactory_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyTableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_14PyTableFactory_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14PyTableFactory_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyTableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":587
 *     cdef PyFilterPolicy py_filter_policy
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index_type = 0;
  PyBoolObject *__pyx_v_hash_index_allow_collision = 0;
  PyObject *__pyx_v_checksum = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache_compressed = 0;
  PyObject *__pyx_v_filter_policy = 0;
  PyObject *__pyx_v_no_block_cache = 0;
  PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_block_size_deviation = 0;
  PyObject *__pyx_v_block_restart_interval = 0;
  PyObject *__pyx_v_whole_key_filtering = 0;
  PyObject *__pyx_v_cache_index_and_filter_blocks = 0;
  PyObject *__pyx_v_format_version = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 587, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index_type,&__pyx_n_s_hash_index_allow_collision,&__pyx_n_s_checksum,&__pyx_n_s_block_cache,&__pyx_n_s_block_cache_compressed,&__pyx_n_s_filter_policy,&__pyx_n_s_no_block_cache,&__pyx_n_s_block_size,&__pyx_n_s_block_size_deviation,&__pyx_n_s_block_restart_interval,&__pyx_n_s_whole_key_filtering,&__pyx_n_s_cache_index_and_filter_blocks,&__pyx_n_s_format_version,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_u_binary_search));

    /* "rocksdb/_rocksdb.pyx":589
 *     def __init__(self,
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,             # <<<<<<<<<<<<<<
 *             checksum='crc32',
 *             PyCache block_cache=None,
 */
    values[1] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((PyBoolObject *)Py_True));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_u_crc32));

    /* "rocksdb/_rocksdb.pyx":591
 *             py_bool hash_index_allow_collision=True,
 *             checksum='crc32',
 *             PyCache block_cache=None,             # <<<<<<<<<<<<<<
 *             PyCache block_cache_compressed=None,
 *             filter_policy=None,
 */
    values[3] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None));

    /* "rocksdb/_rocksdb.pyx":592
 *             checksum='crc32',
 *             PyCache block_cache=None,
 *             PyCache block_cache_compressed=None,             # <<<<<<<<<<<<<<
 *             filter_policy=None,
 *             no_block_cache=False,
 */
    values[4] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None));

    /* "rocksdb/_rocksdb.pyx":593
 *             PyCache block_cache=None,
 *             PyCache block_cache_compressed=None,
 *             filter_policy=None,             # <<<<<<<<<<<<<<
 *             no_block_cache=False,
 *             block_size=None,
 */
    values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":594
 *             PyCache block_cache_compressed=None,
 *             filter_policy=None,
 *             no_block_cache=False,             # <<<<<<<<<<<<<<
 *             block_size=None,
 *             block_size_deviation=None,
 */
    values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));

    /* "rocksdb/_rocksdb.pyx":595
 *             filter_policy=None,
 *             no_block_cache=False,
 *             block_size=None,             # <<<<<<<<<<<<<<
 *             block_size_deviation=None,
 *             block_restart_interval=None,
 */
    values[7] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":596
 *             no_block_cache=False,
 *             block_size=None,
 *             block_size_deviation=None,             # <<<<<<<<<<<<<<
 *             block_restart_interval=None,
 *             whole_key_filtering=None,
 */
    values[8] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":597
 *             block_size=None,
 *             block_size_deviation=None,
 *             block_restart_interval=None,             # <<<<<<<<<<<<<<
 *             whole_key_filtering=None,
 *             cache_index_and_filter_blocks=None,
 */
    values[9] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":598
 *             block_size_deviation=None,
 *             block_restart_interval=None,
 *             whole_key_filtering=None,             # <<<<<<<<<<<<<<
 *             cache_index_and_filter_blocks=None,
 *             format_version=None,
 */
    values[10] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":599
 *             block_restart_interval=None,
 *             whole_key_filtering=None,
 *             cache_index_and_filter_blocks=None,             # <<<<<<<<<<<<<<
 *             format_version=None,
 *         ):
 */
    values[11] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":600
 *             whole_key_filtering=None,
 *             cache_index_and_filter_blocks=None,
 *             format_version=None,             # <<<<<<<<<<<<<<
 *         ):
 * 
 */
    values[12] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 13: values[12] = __Pyx_Arg_VARARGS(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = __Pyx_Arg_VARARGS(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_VARARGS(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_VARARGS(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index_type);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hash_index_allow_collision);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_checksum);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_block_cache);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_block_cache_compressed);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filter_policy);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_block_cache);
          if (value) { values[6] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_block_size);
          if (value) { values[7] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_block_size_deviation);
          if (value) { values[8] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_block_restart_interval);
          if (value) { values[9] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_whole_key_filtering);
          if (value) { values[10] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cache_index_and_filter_blocks);
          if (value) { values[11] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_format_version);
          if (value) { values[12] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 587, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 13: values[12] = __Pyx_Arg_VARARGS(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = __Pyx_Arg_VARARGS(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_VARARGS(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_VARARGS(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index_type = values[0];
    __pyx_v_hash_index_allow_collision = ((PyBoolObject *)values[1]);
    __pyx_v_checksum = values[2];
    __pyx_v_block_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)values[3]);
    __pyx_v_block_cache_compressed = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)values[4]);
    __pyx_v_filter_policy = values[5];
    __pyx_v_no_block_cache = values[6];
    __pyx_v_block_size = values[7];
    __pyx_v_block_size_deviation = values[8];
    __pyx_v_block_restart_interval = values[9];
    __pyx_v_whole_key_filtering = values[10];
    __pyx_v_cache_index_and_filter_blocks = values[11];
    __pyx_v_format_version = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 13, __pyx_nargs); __PYX_ERR(0, 587, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hash_index_allow_collision), __pyx_ptype_7cpython_4bool_bool, 1, "hash_index_allow_collision", 0))) __PYX_ERR(0, 589, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_cache), __pyx_ptype_7rocksdb_8_rocksdb_PyCache, 1, "block_cache", 0))) __PYX_ERR(0, 591, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_cache_compressed), __pyx_ptype_7rocksdb_8_rocksdb_PyCache, 1, "block_cache_compressed", 0))) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)__pyx_v_self), __pyx_v_index_type, __pyx_v_hash_index_allow_collision, __pyx_v_checksum, __pyx_v_block_cache, __pyx_v_block_cache_compressed, __pyx_v_filter_policy, __pyx_v_no_block_cache, __pyx_v_block_size, __pyx_v_block_size_deviation, __pyx_v_block_restart_interval, __pyx_v_whole_key_filtering, __pyx_v_cache_index_and_filter_blocks, __pyx_v_format_version);

  /* "rocksdb/_rocksdb.pyx":587
 *     cdef PyFilterPolicy py_filter_policy
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, PyObject *__pyx_v_index_type, PyBoolObject *__pyx_v_hash_index_allow_collision, PyObject *__pyx_v_checksum, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache_compressed, PyObject *__pyx_v_filter_policy, PyObject *__pyx_v_no_block_cache, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_size_deviation, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_whole_key_filtering, PyObject *__pyx_v_cache_index_and_filter_blocks, PyObject *__pyx_v_format_version) {
  rocksdb::BlockBasedTableOptions __pyx_v_table_options;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<rocksdb::Cache>  __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_t_7;
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":605
 *         cdef table_factory.BlockBasedTableOptions table_options
 * 
 *         if index_type == 'binary_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_index_type, __pyx_n_u_binary_search, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 605, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":606
 * 
 *         if index_type == 'binary_search':
 *             table_options.index_type = table_factory.kBinarySearch             # <<<<<<<<<<<<<<
 *         elif index_type == 'hash_search':
 *             table_options.index_type = table_factory.kHashSearch
 */
    __pyx_v_table_options.index_type = rocksdb::BlockBasedTableOptions::IndexType::kBinarySearch;

    /* "rocksdb/_rocksdb.pyx":605
 *         cdef table_factory.BlockBasedTableOptions table_options
 * 
 *         if index_type == 'binary_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":607
 *         if index_type == 'binary_search':
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kHashSearch
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_index_type, __pyx_n_u_hash_search, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":608
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':
 *             table_options.index_type = table_factory.kHashSearch             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown index_type: %s" % index_type)
 */
    __pyx_v_table_options.index_type = rocksdb::BlockBasedTableOptions::IndexType::kHashSearch;

    /* "rocksdb/_rocksdb.pyx":607
 *         if index_type == 'binary_search':
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kHashSearch
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":610
 *             table_options.index_type = table_factory.kHashSearch
 *         else:
 *             raise ValueError("Unknown index_type: %s" % index_type)             # <<<<<<<<<<<<<<
 * 
 *         if hash_index_allow_collision:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unknown_index_type_s, __pyx_v_index_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 610, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":612
 *             raise ValueError("Unknown index_type: %s" % index_type)
 * 
 *         if hash_index_allow_collision:             # <<<<<<<<<<<<<<
 *             table_options.hash_index_allow_collision = True
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_hash_index_allow_collision)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 612, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":613
 * 
 *         if hash_index_allow_collision:
 *             table_options.hash_index_allow_collision = True             # <<<<<<<<<<<<<<
 *         else:
 *             table_options.hash_index_allow_collision = False
 */
    __pyx_v_table_options.hash_index_allow_collision = 1;

    /* "rocksdb/_rocksdb.pyx":612
 *             raise ValueError("Unknown index_type: %s" % index_type)
 * 
 *         if hash_index_allow_collision:             # <<<<<<<<<<<<<<
 *             table_options.hash_index_allow_collision = True
 *         else:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":615
 *             table_options.hash_index_allow_collision = True
 *         else:
 *             table_options.hash_index_allow_collision = False             # <<<<<<<<<<<<<<
 * 
 *         if checksum == 'crc32':
 */
  /*else*/ {
    __pyx_v_table_options.hash_index_allow_collision = 0;
  }
  __pyx_L4:;

  /* "rocksdb/_rocksdb.pyx":617
 *             table_options.hash_index_allow_collision = False
 * 
 *         if checksum == 'crc32':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_checksum, __pyx_n_u_crc32, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 617, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":618
 * 
 *         if checksum == 'crc32':
 *             table_options.checksum = table_factory.kCRC32c             # <<<<<<<<<<<<<<
 *         elif checksum == 'xxhash':
 *             table_options.checksum = table_factory.kxxHash
 */
    __pyx_v_table_options.checksum = rocksdb::kCRC32c;

    /* "rocksdb/_rocksdb.pyx":617
 *             table_options.hash_index_allow_collision = False
 * 
 *         if checksum == 'crc32':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":619
 *         if checksum == 'crc32':
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kxxHash
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_checksum, __pyx_n_u_xxhash, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 619, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":620
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':
 *             table_options.checksum = table_factory.kxxHash             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown checksum: %s" % checksum)
 */
    __pyx_v_table_options.checksum = rocksdb::kxxHash;

    /* "rocksdb/_rocksdb.pyx":619
 *         if checksum == 'crc32':
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kxxHash
 *         else:
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":622
 *             table_options.checksum = table_factory.kxxHash
 *         else:
 *             raise ValueError("Unknown checksum: %s" % checksum)             # <<<<<<<<<<<<<<
 * 
 *         if block_cache is not None:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unknown_checksum_s, __pyx_v_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 622, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "rocksdb/_rocksdb.pyx":624
 *             raise ValueError("Unknown checksum: %s" % checksum)
 * 
 *         if block_cache is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache = block_cache.get_cache()
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_block_cache) != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":625
 * 
 *         if block_cache is not None:
 *             table_options.block_cache = block_cache.get_cache()             # <<<<<<<<<<<<<<
 * 
 *         if block_cache_compressed is not None:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *)__pyx_v_block_cache->__pyx_vtab)->get_cache(__pyx_v_block_cache); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L1_error)
    __pyx_v_table_options.block_cache = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "rocksdb/_rocksdb.pyx":624
 *             raise ValueError("Unknown checksum: %s" % checksum)
 * 
 *         if block_cache is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache = block_cache.get_cache()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":627
 *             table_options.block_cache = block_cache.get_cache()
 * 
 *         if block_cache_compressed is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_block_cache_compressed) != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":628
 * 
 *         if block_cache_compressed is not None:
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()             # <<<<<<<<<<<<<<
 * 
 *         if no_block_cache:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *)__pyx_v_block_cache_compressed->__pyx_vtab)->get_cache(__pyx_v_block_cache_compressed); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
    __pyx_v_table_options.block_cache_compressed = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "rocksdb/_rocksdb.pyx":627
 *             table_options.block_cache = block_cache.get_cache()
 * 
 *         if block_cache_compressed is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":630
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()
 * 
 *         if no_block_cache:             # <<<<<<<<<<<<<<
 *             table_options.no_block_cache = True
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_no_block_cache); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 630, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":631
 * 
 *         if no_block_cache:
 *             table_options.no_block_cache = True             # <<<<<<<<<<<<<<
 *         else:
 *             table_options.no_block_cache = False
 */
    __pyx_v_table_options.no_block_cache = 1;

    /* "rocksdb/_rocksdb.pyx":630
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()
 * 
 *         if no_block_cache:             # <<<<<<<<<<<<<<
 *             table_options.no_block_cache = True
 *         else:
 */
    goto __pyx_L8;
  }

  /* "rocksdb/_rocksdb.pyx":633
 *             table_options.no_block_cache = True
 *         else:
 *             table_options.no_block_cache = False             # <<<<<<<<<<<<<<
 * 
 *         # If the following options are None use the rocksdb default.
 */
  /*else*/ {
    __pyx_v_table_options.no_block_cache = 0;
  }
  __pyx_L8:;

  /* "rocksdb/_rocksdb.pyx":636
 * 
 *         # If the following options are None use the rocksdb default.
 *         if block_size is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size = block_size
 * 
 */
  __pyx_t_1 = (__pyx_v_block_size != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":637
 *         # If the following options are None use the rocksdb default.
 *         if block_size is not None:
 *             table_options.block_size = block_size             # <<<<<<<<<<<<<<
 * 
 *         if block_size_deviation is not None:
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_block_size); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
    __pyx_v_table_options.block_size = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":636
 * 
 *         # If the following options are None use the rocksdb default.
 *         if block_size is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size = block_size
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":639
 *             table_options.block_size = block_size
 * 
 *         if block_size_deviation is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size_deviation = block_size_deviation
 * 
 */
  __pyx_t_1 = (__pyx_v_block_size_deviation != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":640
 * 
 *         if block_size_deviation is not None:
 *             table_options.block_size_deviation = block_size_deviation             # <<<<<<<<<<<<<<
 * 
 *         if block_restart_interval is not None:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_block_size_deviation); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L1_error)
    __pyx_v_table_options.block_size_deviation = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":639
 *             table_options.block_size = block_size
 * 
 *         if block_size_deviation is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size_deviation = block_size_deviation
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":642
 *             table_options.block_size_deviation = block_size_deviation
 * 
 *         if block_restart_interval is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_restart_interval = block_restart_interval
 * 
 */
  __pyx_t_1 = (__pyx_v_block_restart_interval != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":643
 * 
 *         if block_restart_interval is not None:
 *             table_options.block_restart_interval = block_restart_interval             # <<<<<<<<<<<<<<
 * 
 *         if whole_key_filtering is not None:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_block_restart_interval); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
    __pyx_v_table_options.block_restart_interval = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":642
 *             table_options.block_size_deviation = block_size_deviation
 * 
 *         if block_restart_interval is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_restart_interval = block_restart_interval
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":645
 *             table_options.block_restart_interval = block_restart_interval
 * 
 *         if whole_key_filtering is not None:             # <<<<<<<<<<<<<<
 *             if whole_key_filtering:
 *                 table_options.whole_key_filtering = True
 */
  __pyx_t_1 = (__pyx_v_whole_key_filtering != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":646
 * 
 *         if whole_key_filtering is not None:
 *             if whole_key_filtering:             # <<<<<<<<<<<<<<
 *                 table_options.whole_key_filtering = True
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_whole_key_filtering); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 646, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":647
 *         if whole_key_filtering is not None:
 *             if whole_key_filtering:
 *                 table_options.whole_key_filtering = True             # <<<<<<<<<<<<<<
 *             else:
 *                 table_options.whole_key_filtering = False
 */
      __pyx_v_table_options.whole_key_filtering = 1;

      /* "rocksdb/_rocksdb.pyx":646
 * 
 *         if whole_key_filtering is not None:
 *             if whole_key_filtering:             # <<<<<<<<<<<<<<
 *                 table_options.whole_key_filtering = True
 *             else:
 */
      goto __pyx_L13;
    }

    /* "rocksdb/_rocksdb.pyx":649
 *                 table_options.whole_key_filtering = True
 *             else:
 *                 table_options.whole_key_filtering = False             # <<<<<<<<<<<<<<
 * 
 *         if cache_index_and_filter_blocks is not None:
 */
    /*else*/ {
      __pyx_v_table_options.whole_key_filtering = 0;
    }
    __pyx_L13:;

    /* "rocksdb/_rocksdb.pyx":645
 *             table_options.block_restart_interval = block_restart_interval
 * 
 *         if whole_key_filtering is not None:             # <<<<<<<<<<<<<<
 *             if whole_key_filtering:
 *                 table_options.whole_key_filtering = True
 */
  }

  /* "rocksdb/_rocksdb.pyx":651
 *                 table_options.whole_key_filtering = False
 * 
 *         if cache_index_and_filter_blocks is not None:             # <<<<<<<<<<<<<<
 *             if cache_index_and_filter_blocks:
 *                 table_options.cache_index_and_filter_blocks = True
 */
  __pyx_t_1 = (__pyx_v_cache_index_and_filter_blocks != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":652
 * 
 *         if cache_index_and_filter_blocks is not None:
 *             if cache_index_and_filter_blocks:             # <<<<<<<<<<<<<<
 *                 table_options.cache_index_and_filter_blocks = True
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_cache_index_and_filter_blocks); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 652, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":653
 *         if cache_index_and_filter_blocks is not None:
 *             if cache_index_and_filter_blocks:
 *                 table_options.cache_index_and_filter_blocks = True             # <<<<<<<<<<<<<<
 *             else:
 *                 table_options.cache_index_and_filter_blocks = False
 */
      __pyx_v_table_options.cache_index_and_filter_blocks = 1;

      /* "rocksdb/_rocksdb.pyx":652
 * 
 *         if cache_index_and_filter_blocks is not None:
 *             if cache_index_and_filter_blocks:             # <<<<<<<<<<<<<<
 *                 table_options.cache_index_and_filter_blocks = True
 *             else:
 */
      goto __pyx_L15;
    }

    /* "rocksdb/_rocksdb.pyx":655
 *                 table_options.cache_index_and_filter_blocks = True
 *             else:
 *                 table_options.cache_index_and_filter_blocks = False             # <<<<<<<<<<<<<<
 * 
 *         if format_version is not None:
 */
    /*else*/ {
      __pyx_v_table_options.cache_index_and_filter_blocks = 0;
    }
    __pyx_L15:;

    /* "rocksdb/_rocksdb.pyx":651
 *                 table_options.whole_key_filtering = False
 * 
 *         if cache_index_and_filter_blocks is not None:             # <<<<<<<<<<<<<<
 *             if cache_index_and_filter_blocks:
 *                 table_options.cache_index_and_filter_blocks = True
 */
  }

  /* "rocksdb/_rocksdb.pyx":657
 *                 table_options.cache_index_and_filter_blocks = False
 * 
 *         if format_version is not None:             # <<<<<<<<<<<<<<
 *             table_options.format_version = format_version
 * 
 */
  __pyx_t_1 = (__pyx_v_format_version != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":658
 * 
 *         if format_version is not None:
 *             table_options.format_version = format_version             # <<<<<<<<<<<<<<
 * 
 *         # Set the filter_policy
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_format_version); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L1_error)
    __pyx_v_table_options.format_version = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":657
 *                 table_options.cache_index_and_filter_blocks = False
 * 
 *         if format_version is not None:             # <<<<<<<<<<<<<<
 *             table_options.format_version = format_version
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":661
 * 
 *         # Set the filter_policy
 *         self.py_filter_policy = None             # <<<<<<<<<<<<<<
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_filter_policy);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_filter_policy);
  __pyx_v_self->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)Py_None);

  /* "rocksdb/_rocksdb.pyx":662
 *         # Set the filter_policy
 *         self.py_filter_policy = None
 *         if filter_policy is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 */
  __pyx_t_1 = (__pyx_v_filter_policy != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":663
 *         self.py_filter_policy = None
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):             # <<<<<<<<<<<<<<
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_filter_policy, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy); 
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":664
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 *                 self.py_filter_policy = filter_policy
 */
      if (!(likely(__Pyx_TypeTest(__pyx_v_filter_policy, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)))) __PYX_ERR(0, 664, __pyx_L1_error)
      __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_filter_policy)->__pyx_vtab)->get_policy(((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_filter_policy)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 664, __pyx_L1_error)
      try {
        __pyx_t_8 = __pyx_t_7.get();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 664, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_t_8 == NULL);
      if (unlikely(__pyx_t_1)) {

        /* "rocksdb/_rocksdb.pyx":665
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)             # <<<<<<<<<<<<<<
 *                 self.py_filter_policy = filter_policy
 *             else:
 */
        __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Cannot_set_filter_policy_s, __pyx_v_filter_policy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 665, __pyx_L1_error)

        /* "rocksdb/_rocksdb.pyx":664
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 *                 self.py_filter_policy = filter_policy
 */
      }

      /* "rocksdb/_rocksdb.pyx":666
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 *                 self.py_filter_policy = filter_policy             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_filter_policy = PyGenericFilterPolicy(filter_policy)
 */
      if (!(likely(((__pyx_v_filter_policy) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_filter_policy, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy))))) __PYX_ERR(0, 666, __pyx_L1_error)
      __pyx_t_3 = __pyx_v_filter_policy;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->py_filter_policy);
      __Pyx_DECREF((PyObject *)__pyx_v_self->py_filter_policy);
      __pyx_v_self->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "rocksdb/_rocksdb.pyx":663
 *         self.py_filter_policy = None
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):             # <<<<<<<<<<<<<<
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 */
      goto __pyx_L18;
    }

    /* "rocksdb/_rocksdb.pyx":668
 *                 self.py_filter_policy = filter_policy
 *             else:
 *                 self.py_filter_policy = PyGenericFilterPolicy(filter_policy)             # <<<<<<<<<<<<<<
 * 
 *             table_options.filter_policy = self.py_filter_policy.get_policy()
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy), __pyx_v_filter_policy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->py_filter_policy);
      __Pyx_DECREF((PyObject *)__pyx_v_self->py_filter_policy);
      __pyx_v_self->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L18:;

    /* "rocksdb/_rocksdb.pyx":670
 *                 self.py_filter_policy = PyGenericFilterPolicy(filter_policy)
 * 
 *             table_options.filter_policy = self.py_filter_policy.get_policy()             # <<<<<<<<<<<<<<
 * 
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_self->py_filter_policy->__pyx_vtab)->get_policy(__pyx_v_self->py_filter_policy); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L1_error)
    __pyx_v_table_options.filter_policy = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

    /* "rocksdb/_rocksdb.pyx":662
 *         # Set the filter_policy
 *         self.py_filter_policy = None
 *         if filter_policy is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 */
  }

  /* "rocksdb/_rocksdb.pyx":672
 *             table_options.filter_policy = self.py_filter_policy.get_policy()
 * 
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewBlockBasedTableFactory(__pyx_v_table_options));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 672, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":587
 *     cdef PyFilterPolicy py_filter_policy
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":674
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         if self.py_filter_policy is not None:
 *             self.py_filter_policy.set_info_log(info_log)
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_22BlockBasedTableFactory_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":675
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         if self.py_filter_policy is not None:             # <<<<<<<<<<<<<<
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->py_filter_policy) != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":676
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         if self.py_filter_policy is not None:
 *             self.py_filter_policy.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_self->py_filter_policy->__pyx_vtab)->set_info_log(__pyx_v_self->py_filter_policy, __pyx_v_info_log); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":675
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         if self.py_filter_policy is not None:             # <<<<<<<<<<<<<<
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":674
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         if self.py_filter_policy is not None:
 *             self.py_filter_policy.set_info_log(info_log)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_22BlockBasedTableFactory_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_22BlockBasedTableFactory_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":679
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             user_key_len=0,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_user_key_len = 0;
  PyObject *__pyx_v_bloom_bits_per_key = 0;
  PyObject *__pyx_v_hash_table_ratio = 0;
  PyObject *__pyx_v_index_sparseness = 0;
  PyObject *__pyx_v_huge_page_tlb_size = 0;
  PyObject *__pyx_v_encoding_type = 0;
  PyBoolObject *__pyx_v_full_scan_mode = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 679, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_user_key_len,&__pyx_n_s_bloom_bits_per_key,&__pyx_n_s_hash_table_ratio,&__pyx_n_s_index_sparseness,&__pyx_n_s_huge_page_tlb_size,&__pyx_n_s_encoding_type,&__pyx_n_s_full_scan_mode,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_10));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_float_0_75));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_10));
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_u_plain));

    /* "rocksdb/_rocksdb.pyx":687
 *             huge_page_tlb_size=0,
 *             encoding_type='plain',
 *             py_bool full_scan_mode=False):             # <<<<<<<<<<<<<<
 * 
 *         cdef table_factory.PlainTableOptions table_options
 */
    values[6] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_user_key_len);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bloom_bits_per_key);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hash_table_ratio);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_index_sparseness);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_huge_page_tlb_size);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_encoding_type);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_full_scan_mode);
          if (value) { values[6] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 679, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_user_key_len = values[0];
    __pyx_v_bloom_bits_per_key = values[1];
    __pyx_v_hash_table_ratio = values[2];
    __pyx_v_index_sparseness = values[3];
    __pyx_v_huge_page_tlb_size = values[4];
    __pyx_v_encoding_type = values[5];
    __pyx_v_full_scan_mode = ((PyBoolObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 7, __pyx_nargs); __PYX_ERR(0, 679, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_full_scan_mode), __pyx_ptype_7cpython_4bool_bool, 1, "full_scan_mode", 0))) __PYX_ERR(0, 687, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *)__pyx_v_self), __pyx_v_user_key_len, __pyx_v_bloom_bits_per_key, __pyx_v_hash_table_ratio, __pyx_v_index_sparseness, __pyx_v_huge_page_tlb_size, __pyx_v_encoding_type, __pyx_v_full_scan_mode);

  /* "rocksdb/_rocksdb.pyx":679
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             user_key_len=0,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self, PyObject *__pyx_v_user_key_len, PyObject *__pyx_v_bloom_bits_per_key, PyObject *__pyx_v_hash_table_ratio, PyObject *__pyx_v_index_sparseness, PyObject *__pyx_v_huge_page_tlb_size, PyObject *__pyx_v_encoding_type, PyBoolObject *__pyx_v_full_scan_mode) {
  rocksdb::PlainTableOptions __pyx_v_table_options;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  bool __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":691
 *         cdef table_factory.PlainTableOptions table_options
 * 
 *         table_options.user_key_len = user_key_len             # <<<<<<<<<<<<<<
 *         table_options.bloom_bits_per_key = bloom_bits_per_key
 *         table_options.hash_table_ratio = hash_table_ratio
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_user_key_len); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_v_table_options.user_key_len = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":692
 * 
 *         table_options.user_key_len = user_key_len
 *         table_options.bloom_bits_per_key = bloom_bits_per_key             # <<<<<<<<<<<<<<
 *         table_options.hash_table_ratio = hash_table_ratio
 *         table_options.index_sparseness = index_sparseness
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_bloom_bits_per_key); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
  __pyx_v_table_options.bloom_bits_per_key = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":693
 *         table_options.user_key_len = user_key_len
 *         table_options.bloom_bits_per_key = bloom_bits_per_key
 *         table_options.hash_table_ratio = hash_table_ratio             # <<<<<<<<<<<<<<
 *         table_options.index_sparseness = index_sparseness
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_hash_table_ratio); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L1_error)
  __pyx_v_table_options.hash_table_ratio = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":694
 *         table_options.bloom_bits_per_key = bloom_bits_per_key
 *         table_options.hash_table_ratio = hash_table_ratio
 *         table_options.index_sparseness = index_sparseness             # <<<<<<<<<<<<<<
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_index_sparseness); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L1_error)
  __pyx_v_table_options.index_sparseness = __pyx_t_4;

  /* "rocksdb/_rocksdb.pyx":695
 *         table_options.hash_table_ratio = hash_table_ratio
 *         table_options.index_sparseness = index_sparseness
 *         table_options.huge_page_tlb_size = huge_page_tlb_size             # <<<<<<<<<<<<<<
 * 
 *         if encoding_type == 'plain':
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_huge_page_tlb_size); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L1_error)
  __pyx_v_table_options.huge_page_tlb_size = __pyx_t_4;

  /* "rocksdb/_rocksdb.pyx":697
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 * 
 *         if encoding_type == 'plain':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':
 */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_encoding_type, __pyx_n_u_plain, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 697, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":698
 * 
 *         if encoding_type == 'plain':
 *             table_options.encoding_type = table_factory.kPlain             # <<<<<<<<<<<<<<
 *         elif encoding_type == 'prefix':
 *             table_options.encoding_type = table_factory.kPrefix
 */
    __pyx_v_table_options.encoding_type = rocksdb::kPlain;

    /* "rocksdb/_rocksdb.pyx":697
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 * 
 *         if encoding_type == 'plain':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":699
 *         if encoding_type == 'plain':
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPrefix
 *         else:
 */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_encoding_type, __pyx_n_u_prefix, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 699, __pyx_L1_error)
  if (likely(__pyx_t_5)) {

    /* "rocksdb/_rocksdb.pyx":700
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':
 *             table_options.encoding_type = table_factory.kPrefix             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown encoding_type: %s" % encoding_type)
 */
    __pyx_v_table_options.encoding_type = rocksdb::kPrefix;

    /* "rocksdb/_rocksdb.pyx":699
 *         if encoding_type == 'plain':
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPrefix
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":702
 *             table_options.encoding_type = table_factory.kPrefix
 *         else:
 *             raise ValueError("Unknown encoding_type: %s" % encoding_type)             # <<<<<<<<<<<<<<
 * 
 *         table_options.full_scan_mode = full_scan_mode
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unknown_encoding_type_s, __pyx_v_encoding_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 702, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":704
 *             raise ValueError("Unknown encoding_type: %s" % encoding_type)
 * 
 *         table_options.full_scan_mode = full_scan_mode             # <<<<<<<<<<<<<<
 * 
 *         self.factory.reset( table_factory.NewPlainTableFactory(table_options))
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_full_scan_mode)); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L1_error)
  __pyx_v_table_options.full_scan_mode = __pyx_t_8;

  /* "rocksdb/_rocksdb.pyx":706
 *         table_options.full_scan_mode = full_scan_mode
 * 
 *         self.factory.reset( table_factory.NewPlainTableFactory(table_options))             # <<<<<<<<<<<<<<
 * #############################################
 * 
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewPlainTableFactory(__pyx_v_table_options));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 706, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":679
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             user_key_len=0,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_17PlainTableFactory_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_17PlainTableFactory_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":714
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] get_memtable_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

static std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_f_7rocksdb_8_rocksdb_17PyMemtableFactory_get_memtable_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self) {
  std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_memtable_factory", 0);

  /* "rocksdb/_rocksdb.pyx":715
 * 
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] get_memtable_factory(self):
 *         return self.factory             # <<<<<<<<<<<<<<
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 */
  __pyx_r = __pyx_v_self->factory;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":714
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] get_memtable_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_17PyMemtableFactory_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_17PyMemtableFactory___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PyMemtableFactory___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_17PyMemtableFactory_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_17PyMemtableFactory_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_17PyMemtableFactory_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":718
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 718, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":719
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(self):
 *         self.factory.reset(memtablerep.NewSkipListFactory())             # <<<<<<<<<<<<<<
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(py_rocks::NewSkipListFactory());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 719, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":718
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_23SkipListMemtableFactory_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_23SkipListMemtableFactory_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":722
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 *     def __init__(self, count=0):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_count = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 722, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_count);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 722, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 722, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 722, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *)__pyx_v_self), __pyx_v_count);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self, PyObject *__pyx_v_count) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":723
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 *     def __init__(self, count=0):
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))             # <<<<<<<<<<<<<<
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_count); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.factory.reset(py_rocks::NewVectorRepFactory(__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 723, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":722
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 *     def __init__(self, count=0):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_21VectorMemtableFactory_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_21VectorMemtableFactory_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":726
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             bucket_count=1000000,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bucket_count = 0;
  PyObject *__pyx_v_skiplist_height = 0;
  PyObject *__pyx_v_skiplist_branching_factor = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 726, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bucket_count,&__pyx_n_s_skiplist_height,&__pyx_n_s_skiplist_branching_factor,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_1000000));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_4));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_4));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bucket_count);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_skiplist_height);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_skiplist_branching_factor);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 726, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bucket_count = values[0];
    __pyx_v_skiplist_height = values[1];
    __pyx_v_skiplist_branching_factor = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 726, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *)__pyx_v_self), __pyx_v_bucket_count, __pyx_v_skiplist_height, __pyx_v_skiplist_branching_factor);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count, PyObject *__pyx_v_skiplist_height, PyObject *__pyx_v_skiplist_branching_factor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int32_t __pyx_t_2;
  int32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":734
 *         self.factory.reset(
 *             memtablerep.NewHashSkipListRepFactory(
 *                 bucket_count,             # <<<<<<<<<<<<<<
 *                 skiplist_height,
 *                 skiplist_branching_factor))
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_bucket_count); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":735
 *             memtablerep.NewHashSkipListRepFactory(
 *                 bucket_count,
 *                 skiplist_height,             # <<<<<<<<<<<<<<
 *                 skiplist_branching_factor))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int32_t(__pyx_v_skiplist_height); if (unlikely((__pyx_t_2 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":736
 *                 bucket_count,
 *                 skiplist_height,
 *                 skiplist_branching_factor))             # <<<<<<<<<<<<<<
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 */
  __pyx_t_3 = __Pyx_PyInt_As_int32_t(__pyx_v_skiplist_branching_factor); if (unlikely((__pyx_t_3 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":732
 *             skiplist_branching_factor=4):
 * 
 *         self.factory.reset(             # <<<<<<<<<<<<<<
 *             memtablerep.NewHashSkipListRepFactory(
 *                 bucket_count,
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewHashSkipListRepFactory(__pyx_t_1, __pyx_t_2, __pyx_t_3));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 732, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":726
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             bucket_count=1000000,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":739
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 *     def __init__(self, bucket_count=50000):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 * ##################################
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bucket_count = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 739, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bucket_count,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_50000));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bucket_count);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 739, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bucket_count = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 739, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *)__pyx_v_self), __pyx_v_bucket_count);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":740
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 *     def __init__(self, bucket_count=50000):
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))             # <<<<<<<<<<<<<<
 * ##################################
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_bucket_count); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewHashLinkListRepFactory(__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 740, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":739
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 *     def __init__(self, bucket_count=50000):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 * ##################################
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_2__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_4__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_factory_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_15CompressionType_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.CompressionType.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_15CompressionType___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15CompressionType___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_CompressionType); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CompressionType__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_CompressionType); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.CompressionType.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompressionType__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_15CompressionType_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 16, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.CompressionType.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_15CompressionType_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_15CompressionType_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CompressionType__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompressionType__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompressionType__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.CompressionType.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13CompactionPri_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.CompactionPri.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13CompactionPri___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13CompactionPri___reduce_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_CompactionPri); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CompactionPri__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_CompactionPri); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.CompactionPri.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompactionPri__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13CompactionPri_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 16, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.CompactionPri.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13CompactionPri_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13CompactionPri_2__setstate_cython__(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CompactionPri__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompactionPri__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompactionPri__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.CompactionPri.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":769
 *     cdef object weak_handle
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.handle = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 769, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":770
 * 
 *     def __cinit__(self):
 *         self.handle = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->handle = NULL;

  /* "rocksdb/_rocksdb.pyx":769
 *     cdef object weak_handle
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.handle = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":772
 *         self.handle = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.handle == NULL:
 *             del self.handle
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":773
 * 
 *     def __dealloc__(self):
 *         if not self.handle == NULL:             # <<<<<<<<<<<<<<
 *             del self.handle
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->handle == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":774
 *     def __dealloc__(self):
 *         if not self.handle == NULL:
 *             del self.handle             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    delete __pyx_v_self->handle;

    /* "rocksdb/_rocksdb.pyx":773
 * 
 *     def __dealloc__(self):
 *         if not self.handle == NULL:             # <<<<<<<<<<<<<<
 *             del self.handle
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":772
 *         self.handle = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.handle == NULL:
 *             del self.handle
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":777
 * 
 *     @staticmethod
 *     cdef from_handle_ptr(db.ColumnFamilyHandle* handle):             # <<<<<<<<<<<<<<
 *         inst = <_ColumnFamilyHandle>_ColumnFamilyHandle.__new__(_ColumnFamilyHandle)
 *         inst.handle = handle
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_from_handle_ptr(rocksdb::ColumnFamilyHandle *__pyx_v_handle) {
  struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_handle_ptr", 0);

  /* "rocksdb/_rocksdb.pyx":778
 *     @staticmethod
 *     cdef from_handle_ptr(db.ColumnFamilyHandle* handle):
 *         inst = <_ColumnFamilyHandle>_ColumnFamilyHandle.__new__(_ColumnFamilyHandle)             # <<<<<<<<<<<<<<
 *         inst.handle = handle
 *         return inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7rocksdb_8_rocksdb__ColumnFamilyHandle(((PyTypeObject *)__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_inst = ((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":779
 *     cdef from_handle_ptr(db.ColumnFamilyHandle* handle):
 *         inst = <_ColumnFamilyHandle>_ColumnFamilyHandle.__new__(_ColumnFamilyHandle)
 *         inst.handle = handle             # <<<<<<<<<<<<<<
 *         return inst
 * 
 */
  __pyx_v_inst->handle = __pyx_v_handle;

  /* "rocksdb/_rocksdb.pyx":780
 *         inst = <_ColumnFamilyHandle>_ColumnFamilyHandle.__new__(_ColumnFamilyHandle)
 *         inst.handle = handle
 *         return inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_inst);
  __pyx_r = ((PyObject *)__pyx_v_inst);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":777
 * 
 *     @staticmethod
 *     cdef from_handle_ptr(db.ColumnFamilyHandle* handle):             # <<<<<<<<<<<<<<
 *         inst = <_ColumnFamilyHandle>_ColumnFamilyHandle.__new__(_ColumnFamilyHandle)
 *         inst.handle = handle
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.from_handle_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":782
 *         return inst
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         return self.handle.GetName()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4name___get__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4name___get__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::string const > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":784
 *     @property
 *     def name(self):
 *         return self.handle.GetName()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->handle->GetName();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 784, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":782
 *         return inst
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         return self.handle.GetName()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":786
 *         return self.handle.GetName()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def id(self):
 *         return self.handle.GetID()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2id_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2id___get__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2id___get__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":788
 *     @property
 *     def id(self):
 *         return self.handle.GetID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->handle->GetID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 788, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":786
 *         return self.handle.GetName()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def id(self):
 *         return self.handle.GetID()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":790
 *         return self.handle.GetID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weakref(self):
 *         if self.weak_handle is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7weakref_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7weakref_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7weakref___get__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7weakref___get__(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":792
 *     @property
 *     def weakref(self):
 *         if self.weak_handle is None:             # <<<<<<<<<<<<<<
 *             self.weak_handle = ColumnFamilyHandle.from_wrapper(self)
 *         return self.weak_handle
 */
  __pyx_t_1 = (__pyx_v_self->weak_handle == Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":793
 *     def weakref(self):
 *         if self.weak_handle is None:
 *             self.weak_handle = ColumnFamilyHandle.from_wrapper(self)             # <<<<<<<<<<<<<<
 *         return self.weak_handle
 * 
 */
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_from_wrapper(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->weak_handle);
    __Pyx_DECREF(__pyx_v_self->weak_handle);
    __pyx_v_self->weak_handle = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":792
 *     @property
 *     def weakref(self):
 *         if self.weak_handle is None:             # <<<<<<<<<<<<<<
 *             self.weak_handle = ColumnFamilyHandle.from_wrapper(self)
 *         return self.weak_handle
 */
  }

  /* "rocksdb/_rocksdb.pyx":794
 *         if self.weak_handle is None:
 *             self.weak_handle = ColumnFamilyHandle.from_wrapper(self)
 *         return self.weak_handle             # <<<<<<<<<<<<<<
 * 
 * cdef class ColumnFamilyHandle:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->weak_handle);
  __pyx_r = __pyx_v_self->weak_handle;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":790
 *         return self.handle.GetID()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weakref(self):
 *         if self.weak_handle is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.weakref.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_6__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb._ColumnFamilyHandle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":802
 *     cdef readonly int id
 * 
 *     def __cinit__(self, weakhandle):             # <<<<<<<<<<<<<<
 *         self._ref = weakhandle
 *         self.name = self._ref().name
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_weakhandle = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 802, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weakhandle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_weakhandle)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 802, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 802, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_weakhandle = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 802, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), __pyx_v_weakhandle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_weakhandle) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":803
 * 
 *     def __cinit__(self, weakhandle):
 *         self._ref = weakhandle             # <<<<<<<<<<<<<<
 *         self.name = self._ref().name
 *         self.id = self._ref().id
 */
  __Pyx_INCREF(__pyx_v_weakhandle);
  __Pyx_GIVEREF(__pyx_v_weakhandle);
  __Pyx_GOTREF(__pyx_v_self->_ref);
  __Pyx_DECREF(__pyx_v_self->_ref);
  __pyx_v_self->_ref = __pyx_v_weakhandle;

  /* "rocksdb/_rocksdb.pyx":804
 *     def __cinit__(self, weakhandle):
 *         self._ref = weakhandle
 *         self.name = self._ref().name             # <<<<<<<<<<<<<<
 *         self.id = self._ref().id
 * 
 */
  __Pyx_INCREF(__pyx_v_self->_ref);
  __pyx_t_2 = __pyx_v_self->_ref; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_2))) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":805
 *         self._ref = weakhandle
 *         self.name = self._ref().name
 *         self.id = self._ref().id             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *):
 */
  __Pyx_INCREF(__pyx_v_self->_ref);
  __pyx_t_1 = __pyx_v_self->_ref; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->id = __pyx_t_4;

  /* "rocksdb/_rocksdb.pyx":802
 *     cdef readonly int id
 * 
 *     def __cinit__(self, weakhandle):             # <<<<<<<<<<<<<<
 *         self._ref = weakhandle
 *         self.name = self._ref().name
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":807
 *         self.id = self._ref().id
 * 
 *     def __init__(self, *):             # <<<<<<<<<<<<<<
 *         raise TypeError("These can not be constructed from Python")
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 807, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2__init__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2__init__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":808
 * 
 *     def __init__(self, *):
 *         raise TypeError("These can not be constructed from Python")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 808, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":807
 *         self.id = self._ref().id
 * 
 *     def __init__(self, *):             # <<<<<<<<<<<<<<
 *         raise TypeError("These can not be constructed from Python")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":811
 * 
 *     @staticmethod
 *     cdef object from_wrapper(_ColumnFamilyHandle real_handle):             # <<<<<<<<<<<<<<
 *         return ColumnFamilyHandle.__new__(ColumnFamilyHandle, weakref.ref(real_handle))
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_from_wrapper(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_real_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_wrapper", 0);

  /* "rocksdb/_rocksdb.pyx":812
 *     @staticmethod
 *     cdef object from_wrapper(_ColumnFamilyHandle real_handle):
 *         return ColumnFamilyHandle.__new__(ColumnFamilyHandle, weakref.ref(real_handle))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ref); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_real_handle)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyHandle(((PyTypeObject *)__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle), __pyx_t_3, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":811
 * 
 *     @staticmethod
 *     cdef object from_wrapper(_ColumnFamilyHandle real_handle):             # <<<<<<<<<<<<<<
 *         return ColumnFamilyHandle.__new__(ColumnFamilyHandle, weakref.ref(real_handle))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.from_wrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":814
 *         return ColumnFamilyHandle.__new__(ColumnFamilyHandle, weakref.ref(real_handle))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def is_valid(self):
 *         return self._ref() is not None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8is_valid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8is_valid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8is_valid___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8is_valid___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":816
 *     @property
 *     def is_valid(self):
 *         return self._ref() is not None             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_ref);
  __pyx_t_2 = __pyx_v_self->_ref; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":814
 *         return ColumnFamilyHandle.__new__(ColumnFamilyHandle, weakref.ref(real_handle))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def is_valid(self):
 *         return self._ref() is not None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.is_valid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":818
 *         return self._ref() is not None
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         valid = "valid" if self.is_valid else "invalid"
 *         return f"<ColumnFamilyHandle name: {self.name}, id: {self.id}, state: {valid}>"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4__repr__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4__repr__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_v_valid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "rocksdb/_rocksdb.pyx":819
 * 
 *     def __repr__(self):
 *         valid = "valid" if self.is_valid else "invalid"             # <<<<<<<<<<<<<<
 *         return f"<ColumnFamilyHandle name: {self.name}, id: {self.id}, state: {valid}>"
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_valid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_n_u_valid);
    __pyx_t_1 = __pyx_n_u_valid;
  } else {
    __Pyx_INCREF(__pyx_n_u_invalid);
    __pyx_t_1 = __pyx_n_u_invalid;
  }
  __pyx_v_valid = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":820
 *     def __repr__(self):
 *         valid = "valid" if self.is_valid else "invalid"
 *         return f"<ColumnFamilyHandle name: {self.name}, id: {self.id}, state: {valid}>"             # <<<<<<<<<<<<<<
 * 
 *     cdef db.ColumnFamilyHandle* get_handle(self) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_ColumnFamilyHandle_name);
  __pyx_t_4 += 26;
  __Pyx_GIVEREF(__pyx_kp_u_ColumnFamilyHandle_name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_ColumnFamilyHandle_name);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_self->name, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u_id_2);
  __pyx_t_4 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_id_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_id_2);
  __pyx_t_2 = __Pyx_PyUnicode_From_int(__pyx_v_self->id, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u_state);
  __pyx_t_4 += 9;
  __Pyx_GIVEREF(__pyx_kp_u_state);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_state);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_valid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":818
 *         return self._ref() is not None
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         valid = "valid" if self.is_valid else "invalid"
 *         return f"<ColumnFamilyHandle name: {self.name}, id: {self.id}, state: {valid}>"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_valid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":822
 *         return f"<ColumnFamilyHandle name: {self.name}, id: {self.id}, state: {valid}>"
 * 
 *     cdef db.ColumnFamilyHandle* get_handle(self) except NULL:             # <<<<<<<<<<<<<<
 *         cdef _ColumnFamilyHandle real_handle = self._ref()
 *         if real_handle is None:
 */

static rocksdb::ColumnFamilyHandle *__pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_get_handle(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *__pyx_v_real_handle = 0;
  rocksdb::ColumnFamilyHandle *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_handle", 0);

  /* "rocksdb/_rocksdb.pyx":823
 * 
 *     cdef db.ColumnFamilyHandle* get_handle(self) except NULL:
 *         cdef _ColumnFamilyHandle real_handle = self._ref()             # <<<<<<<<<<<<<<
 *         if real_handle is None:
 *             raise ValueError(f"{self} is no longer a valid ColumnFamilyHandle!")
 */
  __Pyx_INCREF(__pyx_v_self->_ref);
  __pyx_t_2 = __pyx_v_self->_ref; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle))))) __PYX_ERR(0, 823, __pyx_L1_error)
  __pyx_v_real_handle = ((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":824
 *     cdef db.ColumnFamilyHandle* get_handle(self) except NULL:
 *         cdef _ColumnFamilyHandle real_handle = self._ref()
 *         if real_handle is None:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"{self} is no longer a valid ColumnFamilyHandle!")
 *         return real_handle.handle
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_real_handle) == Py_None);
  if (unlikely(__pyx_t_5)) {

    /* "rocksdb/_rocksdb.pyx":825
 *         cdef _ColumnFamilyHandle real_handle = self._ref()
 *         if real_handle is None:
 *             raise ValueError(f"{self} is no longer a valid ColumnFamilyHandle!")             # <<<<<<<<<<<<<<
 *         return real_handle.handle
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(((PyObject *)__pyx_v_self), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_1, __pyx_kp_u_is_no_longer_a_valid_ColumnFami); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 825, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":824
 *     cdef db.ColumnFamilyHandle* get_handle(self) except NULL:
 *         cdef _ColumnFamilyHandle real_handle = self._ref()
 *         if real_handle is None:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"{self} is no longer a valid ColumnFamilyHandle!")
 *         return real_handle.handle
 */
  }

  /* "rocksdb/_rocksdb.pyx":826
 *         if real_handle is None:
 *             raise ValueError(f"{self} is no longer a valid ColumnFamilyHandle!")
 *         return real_handle.handle             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __pyx_r = __pyx_v_real_handle->handle;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":822
 *         return f"<ColumnFamilyHandle name: {self.name}, id: {self.id}, state: {valid}>"
 * 
 *     cdef db.ColumnFamilyHandle* get_handle(self) except NULL:             # <<<<<<<<<<<<<<
 *         cdef _ColumnFamilyHandle real_handle = self._ref()
 *         if real_handle is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.get_handle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_real_handle);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":828
 *         return real_handle.handle
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_7__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_7__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_6__eq__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_6__eq__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_fast_other = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "rocksdb/_rocksdb.pyx":830
 *     def __eq__(self, other):
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):             # <<<<<<<<<<<<<<
 *             fast_other = other
 *             return (
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":831
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):
 *             fast_other = other             # <<<<<<<<<<<<<<
 *             return (
 *                 self.name == fast_other.name
 */
    if (!(likely(((__pyx_v_other) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle))))) __PYX_ERR(0, 831, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_fast_other = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":832
 *         if isinstance(other, ColumnFamilyHandle):
 *             fast_other = other
 *             return (             # <<<<<<<<<<<<<<
 *                 self.name == fast_other.name
 *                 and self.id == fast_other.id
 */
    __Pyx_XDECREF(__pyx_r);

    /* "rocksdb/_rocksdb.pyx":833
 *             fast_other = other
 *             return (
 *                 self.name == fast_other.name             # <<<<<<<<<<<<<<
 *                 and self.id == fast_other.id
 *                 and self._ref == fast_other._ref
 */
    __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_v_self->name, __pyx_v_fast_other->name, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
    if (__pyx_t_1) {
    } else {
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }

    /* "rocksdb/_rocksdb.pyx":834
 *             return (
 *                 self.name == fast_other.name
 *                 and self.id == fast_other.id             # <<<<<<<<<<<<<<
 *                 and self._ref == fast_other._ref
 *             )
 */
    __pyx_t_1 = (__pyx_v_self->id == __pyx_v_fast_other->id);
    if (__pyx_t_1) {
    } else {
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }

    /* "rocksdb/_rocksdb.pyx":835
 *                 self.name == fast_other.name
 *                 and self.id == fast_other.id
 *                 and self._ref == fast_other._ref             # <<<<<<<<<<<<<<
 *             )
 *         return False
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->_ref, __pyx_v_fast_other->_ref, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_L4_bool_binop_done:;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":830
 *     def __eq__(self, other):
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):             # <<<<<<<<<<<<<<
 *             fast_other = other
 *             return (
 */
  }

  /* "rocksdb/_rocksdb.pyx":837
 *                 and self._ref == fast_other._ref
 *             )
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def __lt__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":828
 *         return real_handle.handle
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fast_other);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":839
 *         return False
 * 
 *     def __lt__(self, other):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_9__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_9__lt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8__lt__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8__lt__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__lt__", 0);

  /* "rocksdb/_rocksdb.pyx":841
 *     def __lt__(self, other):
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):             # <<<<<<<<<<<<<<
 *             return self.id < other.id
 *         return NotImplemented
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":842
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):
 *             return self.id < other.id             # <<<<<<<<<<<<<<
 *         return NotImplemented
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":841
 *     def __lt__(self, other):
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):             # <<<<<<<<<<<<<<
 *             return self.id < other.id
 *         return NotImplemented
 */
  }

  /* "rocksdb/_rocksdb.pyx":843
 *         if isinstance(other, ColumnFamilyHandle):
 *             return self.id < other.id
 *         return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     # Since @total_ordering isn't a thing for cython
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":839
 *         return False
 * 
 *     def __lt__(self, other):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyHandle fast_other
 *         if isinstance(other, ColumnFamilyHandle):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__lt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":846
 * 
 *     # Since @total_ordering isn't a thing for cython
 *     def __ne__(self, other):             # <<<<<<<<<<<<<<
 *         return not self == other
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_11__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_11__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_10__ne__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_10__ne__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "rocksdb/_rocksdb.pyx":847
 *     # Since @total_ordering isn't a thing for cython
 *     def __ne__(self, other):
 *         return not self == other             # <<<<<<<<<<<<<<
 * 
 *     def __gt__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self), __pyx_v_other, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":846
 * 
 *     # Since @total_ordering isn't a thing for cython
 *     def __ne__(self, other):             # <<<<<<<<<<<<<<
 *         return not self == other
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":849
 *         return not self == other
 * 
 *     def __gt__(self, other):             # <<<<<<<<<<<<<<
 *         return other < self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_13__gt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_13__gt__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__gt__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_12__gt__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_12__gt__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__gt__", 0);

  /* "rocksdb/_rocksdb.pyx":850
 * 
 *     def __gt__(self, other):
 *         return other < self             # <<<<<<<<<<<<<<
 * 
 *     def __le__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_other, ((PyObject *)__pyx_v_self), Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":849
 *         return not self == other
 * 
 *     def __gt__(self, other):             # <<<<<<<<<<<<<<
 *         return other < self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__gt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":852
 *         return other < self
 * 
 *     def __le__(self, other):             # <<<<<<<<<<<<<<
 *         return not other < self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_15__le__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_15__le__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__le__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_14__le__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_14__le__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__le__", 0);

  /* "rocksdb/_rocksdb.pyx":853
 * 
 *     def __le__(self, other):
 *         return not other < self             # <<<<<<<<<<<<<<
 * 
 *     def __ge__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_other, ((PyObject *)__pyx_v_self), Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":852
 *         return other < self
 * 
 *     def __le__(self, other):             # <<<<<<<<<<<<<<
 *         return not other < self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__le__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":855
 *         return not other < self
 * 
 *     def __ge__(self, other):             # <<<<<<<<<<<<<<
 *         return not self < other
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_17__ge__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_17__ge__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ge__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_16__ge__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_16__ge__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ge__", 0);

  /* "rocksdb/_rocksdb.pyx":856
 * 
 *     def __ge__(self, other):
 *         return not self < other             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self), __pyx_v_other, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":855
 *         return not other < self
 * 
 *     def __ge__(self, other):             # <<<<<<<<<<<<<<
 *         return not self < other
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__ge__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":858
 *         return not self < other
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         # hash of a weakref matches that of its original ref'ed object
 *         # so we use the id of our weakref object here to prevent
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_19__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_19__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_18__hash__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_18__hash__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "rocksdb/_rocksdb.pyx":862
 *         # so we use the id of our weakref object here to prevent
 *         # a situation where we are invalid, but match a valid handle's hash
 *         return hash((self.id, self.name, id(self._ref)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_self->_ref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->name)) __PYX_ERR(0, 862, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(0, 862, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Hash(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_hash_t)-1))) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":858
 *         return not self < other
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         # hash of a weakref matches that of its original ref'ed object
 *         # so we use the id of our weakref object here to prevent
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":799
 *     """ This represents a ColumnFamilyHandle """
 *     cdef object _ref
 *     cdef readonly bytes name             # <<<<<<<<<<<<<<
 *     cdef readonly int id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4name___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4name___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":800
 *     cdef object _ref
 *     cdef readonly bytes name
 *     cdef readonly int id             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, weakhandle):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2id_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2id___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2id___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_18ColumnFamilyHandle_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_20__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_18ColumnFamilyHandle_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_22__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18ColumnFamilyHandle_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyHandle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":876
 *     cdef cpp_bool in_use
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.copts = NULL
 *         self.copts = new options.ColumnFamilyOptions()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 876, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":877
 * 
 *     def __cinit__(self):
 *         self.copts = NULL             # <<<<<<<<<<<<<<
 *         self.copts = new options.ColumnFamilyOptions()
 *         self.in_use = False
 */
  __pyx_v_self->copts = NULL;

  /* "rocksdb/_rocksdb.pyx":878
 *     def __cinit__(self):
 *         self.copts = NULL
 *         self.copts = new options.ColumnFamilyOptions()             # <<<<<<<<<<<<<<
 *         self.in_use = False
 * 
 */
  __pyx_v_self->copts = new rocksdb::ColumnFamilyOptions();

  /* "rocksdb/_rocksdb.pyx":879
 *         self.copts = NULL
 *         self.copts = new options.ColumnFamilyOptions()
 *         self.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->in_use = 0;

  /* "rocksdb/_rocksdb.pyx":876
 *     cdef cpp_bool in_use
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.copts = NULL
 *         self.copts = new options.ColumnFamilyOptions()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":881
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.copts == NULL:
 *             del self.copts
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":882
 * 
 *     def __dealloc__(self):
 *         if not self.copts == NULL:             # <<<<<<<<<<<<<<
 *             del self.copts
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->copts == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":883
 *     def __dealloc__(self):
 *         if not self.copts == NULL:
 *             del self.copts             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, **kwargs):
 */
    delete __pyx_v_self->copts;

    /* "rocksdb/_rocksdb.pyx":882
 * 
 *     def __dealloc__(self):
 *         if not self.copts == NULL:             # <<<<<<<<<<<<<<
 *             del self.copts
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":881
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.copts == NULL:
 *             del self.copts
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":885
 *             del self.copts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 885, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (__pyx_kwds) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_4__init__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":886
 * 
 *     def __init__(self, **kwargs):
 *         self.py_comparator = BytewiseComparator()             # <<<<<<<<<<<<<<
 *         self.py_merge_operator = None
 *         self.py_prefix_extractor = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BytewiseComparator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator))))) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_comparator);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_comparator);
  __pyx_v_self->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":887
 *     def __init__(self, **kwargs):
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None             # <<<<<<<<<<<<<<
 *         self.py_prefix_extractor = None
 *         self.py_table_factory = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_merge_operator);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_merge_operator);
  __pyx_v_self->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)Py_None);

  /* "rocksdb/_rocksdb.pyx":888
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None
 *         self.py_prefix_extractor = None             # <<<<<<<<<<<<<<
 *         self.py_table_factory = None
 *         self.py_memtable_factory = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_prefix_extractor);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_prefix_extractor);
  __pyx_v_self->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)Py_None);

  /* "rocksdb/_rocksdb.pyx":889
 *         self.py_merge_operator = None
 *         self.py_prefix_extractor = None
 *         self.py_table_factory = None             # <<<<<<<<<<<<<<
 *         self.py_memtable_factory = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_table_factory);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_table_factory);
  __pyx_v_self->py_table_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)Py_None);

  /* "rocksdb/_rocksdb.pyx":890
 *         self.py_prefix_extractor = None
 *         self.py_table_factory = None
 *         self.py_memtable_factory = None             # <<<<<<<<<<<<<<
 * 
 *         for key, value in kwargs.items():
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_memtable_factory);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_memtable_factory);
  __pyx_v_self->py_memtable_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)Py_None);

  /* "rocksdb/_rocksdb.pyx":892
 *         self.py_memtable_factory = None
 * 
 *         for key, value in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_6, &__pyx_t_5, &__pyx_t_2, &__pyx_t_3, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":893
 * 
 *         for key, value in kwargs.items():
 *             setattr(self, key, value)             # <<<<<<<<<<<<<<
 * 
 *     property write_buffer_size:
 */
    __pyx_t_8 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 893, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":885
 *             del self.copts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":896
 * 
 *     property write_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.write_buffer_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":897
 *     property write_buffer_size:
 *         def __get__(self):
 *             return self.copts.write_buffer_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.write_buffer_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->copts->write_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":896
 * 
 *     property write_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.write_buffer_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.write_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":898
 *         def __get__(self):
 *             return self.copts.write_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.write_buffer_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":899
 *             return self.copts.write_buffer_size
 *         def __set__(self, value):
 *             self.copts.write_buffer_size = value             # <<<<<<<<<<<<<<
 * 
 *     property max_write_buffer_number:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L1_error)
  __pyx_v_self->copts->write_buffer_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":898
 *         def __get__(self):
 *             return self.copts.write_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.write_buffer_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.write_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":902
 * 
 *     property max_write_buffer_number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_write_buffer_number
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":903
 *     property max_write_buffer_number:
 *         def __get__(self):
 *             return self.copts.max_write_buffer_number             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_write_buffer_number = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->max_write_buffer_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":902
 * 
 *     property max_write_buffer_number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_write_buffer_number
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_write_buffer_number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":904
 *         def __get__(self):
 *             return self.copts.max_write_buffer_number
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_write_buffer_number = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":905
 *             return self.copts.max_write_buffer_number
 *         def __set__(self, value):
 *             self.copts.max_write_buffer_number = value             # <<<<<<<<<<<<<<
 * 
 *     property min_write_buffer_number_to_merge:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L1_error)
  __pyx_v_self->copts->max_write_buffer_number = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":904
 *         def __get__(self):
 *             return self.copts.max_write_buffer_number
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_write_buffer_number = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_write_buffer_number.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":908
 * 
 *     property min_write_buffer_number_to_merge:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.min_write_buffer_number_to_merge
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":909
 *     property min_write_buffer_number_to_merge:
 *         def __get__(self):
 *             return self.copts.min_write_buffer_number_to_merge             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.min_write_buffer_number_to_merge = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->min_write_buffer_number_to_merge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":908
 * 
 *     property min_write_buffer_number_to_merge:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.min_write_buffer_number_to_merge
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.min_write_buffer_number_to_merge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":910
 *         def __get__(self):
 *             return self.copts.min_write_buffer_number_to_merge
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.min_write_buffer_number_to_merge = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":911
 *             return self.copts.min_write_buffer_number_to_merge
 *         def __set__(self, value):
 *             self.copts.min_write_buffer_number_to_merge = value             # <<<<<<<<<<<<<<
 * 
 *     property compression_opts:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 911, __pyx_L1_error)
  __pyx_v_self->copts->min_write_buffer_number_to_merge = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":910
 *         def __get__(self):
 *             return self.copts.min_write_buffer_number_to_merge
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.min_write_buffer_number_to_merge = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.min_write_buffer_number_to_merge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":914
 * 
 *     property compression_opts:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef dict ret_ob = {}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_v_ret_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":915
 *     property compression_opts:
 *         def __get__(self):
 *             cdef dict ret_ob = {}             # <<<<<<<<<<<<<<
 * 
 *             ret_ob['window_bits'] = self.copts.compression_opts.window_bits
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret_ob = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":917
 *             cdef dict ret_ob = {}
 * 
 *             ret_ob['window_bits'] = self.copts.compression_opts.window_bits             # <<<<<<<<<<<<<<
 *             ret_ob['level'] = self.copts.compression_opts.level
 *             ret_ob['strategy'] = self.copts.compression_opts.strategy
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->compression_opts.window_bits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_window_bits, __pyx_t_1) < 0))) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":918
 * 
 *             ret_ob['window_bits'] = self.copts.compression_opts.window_bits
 *             ret_ob['level'] = self.copts.compression_opts.level             # <<<<<<<<<<<<<<
 *             ret_ob['strategy'] = self.copts.compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.copts.compression_opts.max_dict_bytes
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->compression_opts.level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_level, __pyx_t_1) < 0))) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":919
 *             ret_ob['window_bits'] = self.copts.compression_opts.window_bits
 *             ret_ob['level'] = self.copts.compression_opts.level
 *             ret_ob['strategy'] = self.copts.compression_opts.strategy             # <<<<<<<<<<<<<<
 *             ret_ob['max_dict_bytes'] = self.copts.compression_opts.max_dict_bytes
 *             ret_ob['zstd_max_train_bytes'] = self.copts.compression_opts.zstd_max_train_bytes
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->compression_opts.strategy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_strategy, __pyx_t_1) < 0))) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":920
 *             ret_ob['level'] = self.copts.compression_opts.level
 *             ret_ob['strategy'] = self.copts.compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.copts.compression_opts.max_dict_bytes             # <<<<<<<<<<<<<<
 *             ret_ob['zstd_max_train_bytes'] = self.copts.compression_opts.zstd_max_train_bytes
 *             ret_ob['parallel_threads'] = self.copts.compression_opts.parallel_threads
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->copts->compression_opts.max_dict_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_max_dict_bytes, __pyx_t_1) < 0))) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":921
 *             ret_ob['strategy'] = self.copts.compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.copts.compression_opts.max_dict_bytes
 *             ret_ob['zstd_max_train_bytes'] = self.copts.compression_opts.zstd_max_train_bytes             # <<<<<<<<<<<<<<
 *             ret_ob['parallel_threads'] = self.copts.compression_opts.parallel_threads
 *             ret_ob['enabled'] = self.copts.compression_opts.enabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->copts->compression_opts.zstd_max_train_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_zstd_max_train_bytes, __pyx_t_1) < 0))) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":922
 *             ret_ob['max_dict_bytes'] = self.copts.compression_opts.max_dict_bytes
 *             ret_ob['zstd_max_train_bytes'] = self.copts.compression_opts.zstd_max_train_bytes
 *             ret_ob['parallel_threads'] = self.copts.compression_opts.parallel_threads             # <<<<<<<<<<<<<<
 *             ret_ob['enabled'] = self.copts.compression_opts.enabled
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->copts->compression_opts.parallel_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_parallel_threads, __pyx_t_1) < 0))) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":923
 *             ret_ob['zstd_max_train_bytes'] = self.copts.compression_opts.zstd_max_train_bytes
 *             ret_ob['parallel_threads'] = self.copts.compression_opts.parallel_threads
 *             ret_ob['enabled'] = self.copts.compression_opts.enabled             # <<<<<<<<<<<<<<
 * 
 *             return ret_ob
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->copts->compression_opts.enabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_enabled, __pyx_t_1) < 0))) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":925
 *             ret_ob['enabled'] = self.copts.compression_opts.enabled
 * 
 *             return ret_ob             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret_ob);
  __pyx_r = __pyx_v_ret_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":914
 * 
 *     property compression_opts:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef dict ret_ob = {}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compression_opts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":927
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.copts.compression_opts)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) __PYX_ERR(0, 927, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  rocksdb::CompressionOptions *__pyx_v_copts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  uint32_t __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":929
 *         def __set__(self, dict value):
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.copts.compression_opts)             # <<<<<<<<<<<<<<
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:
 */
  __pyx_v_copts = (&__pyx_v_self->copts->compression_opts);

  /* "rocksdb/_rocksdb.pyx":931
 *             copts = cython.address(self.copts.compression_opts)
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:             # <<<<<<<<<<<<<<
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 931, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_window_bits, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 931, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":932
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']             # <<<<<<<<<<<<<<
 *             if 'level' in value:
 *                 copts.level = value['level']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 932, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_window_bits); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->window_bits = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":931
 *             copts = cython.address(self.copts.compression_opts)
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:             # <<<<<<<<<<<<<<
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":933
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:             # <<<<<<<<<<<<<<
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 933, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_level, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 933, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":934
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 *                 copts.level = value['level']             # <<<<<<<<<<<<<<
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 934, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->level = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":933
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:             # <<<<<<<<<<<<<<
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":935
 *             if 'level' in value:
 *                 copts.level = value['level']
 *             if 'strategy' in value:             # <<<<<<<<<<<<<<
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 935, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_strategy, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 935, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":936
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']             # <<<<<<<<<<<<<<
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 936, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_strategy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->strategy = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":935
 *             if 'level' in value:
 *                 copts.level = value['level']
 *             if 'strategy' in value:             # <<<<<<<<<<<<<<
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":937
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 937, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_max_dict_bytes, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 937, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":938
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']             # <<<<<<<<<<<<<<
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 938, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_max_dict_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->max_dict_bytes = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":937
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":939
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 939, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_zstd_max_train_bytes, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 939, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":940
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']             # <<<<<<<<<<<<<<
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 940, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_zstd_max_train_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->zstd_max_train_bytes = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":939
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":941
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:             # <<<<<<<<<<<<<<
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 941, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_parallel_threads, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 941, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":942
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']             # <<<<<<<<<<<<<<
 *             if 'enabled' in value:
 *                 copts.enabled = value['enabled']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 942, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_parallel_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->parallel_threads = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":941
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:             # <<<<<<<<<<<<<<
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":943
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:             # <<<<<<<<<<<<<<
 *                 copts.enabled = value['enabled']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 943, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_enabled, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 943, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":944
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:
 *                 copts.enabled = value['enabled']             # <<<<<<<<<<<<<<
 * 
 *     property bottommost_compression_opts:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 944, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_enabled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->enabled = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":943
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:             # <<<<<<<<<<<<<<
 *                 copts.enabled = value['enabled']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":927
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.copts.compression_opts)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compression_opts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":947
 * 
 *     property bottommost_compression_opts:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef dict ret_ob = {}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_v_ret_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":948
 *     property bottommost_compression_opts:
 *         def __get__(self):
 *             cdef dict ret_ob = {}             # <<<<<<<<<<<<<<
 * 
 *             ret_ob['window_bits'] = self.copts.bottommost_compression_opts.window_bits
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret_ob = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":950
 *             cdef dict ret_ob = {}
 * 
 *             ret_ob['window_bits'] = self.copts.bottommost_compression_opts.window_bits             # <<<<<<<<<<<<<<
 *             ret_ob['level'] = self.copts.bottommost_compression_opts.level
 *             ret_ob['strategy'] = self.copts.bottommost_compression_opts.strategy
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->bottommost_compression_opts.window_bits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_window_bits, __pyx_t_1) < 0))) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":951
 * 
 *             ret_ob['window_bits'] = self.copts.bottommost_compression_opts.window_bits
 *             ret_ob['level'] = self.copts.bottommost_compression_opts.level             # <<<<<<<<<<<<<<
 *             ret_ob['strategy'] = self.copts.bottommost_compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.copts.bottommost_compression_opts.max_dict_bytes
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->bottommost_compression_opts.level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_level, __pyx_t_1) < 0))) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":952
 *             ret_ob['window_bits'] = self.copts.bottommost_compression_opts.window_bits
 *             ret_ob['level'] = self.copts.bottommost_compression_opts.level
 *             ret_ob['strategy'] = self.copts.bottommost_compression_opts.strategy             # <<<<<<<<<<<<<<
 *             ret_ob['max_dict_bytes'] = self.copts.bottommost_compression_opts.max_dict_bytes
 *             ret_ob['zstd_max_train_bytes'] = self.copts.bottommost_compression_opts.zstd_max_train_bytes
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->bottommost_compression_opts.strategy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_strategy, __pyx_t_1) < 0))) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":953
 *             ret_ob['level'] = self.copts.bottommost_compression_opts.level
 *             ret_ob['strategy'] = self.copts.bottommost_compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.copts.bottommost_compression_opts.max_dict_bytes             # <<<<<<<<<<<<<<
 *             ret_ob['zstd_max_train_bytes'] = self.copts.bottommost_compression_opts.zstd_max_train_bytes
 *             ret_ob['parallel_threads'] = self.copts.bottommost_compression_opts.parallel_threads
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->copts->bottommost_compression_opts.max_dict_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_max_dict_bytes, __pyx_t_1) < 0))) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":954
 *             ret_ob['strategy'] = self.copts.bottommost_compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.copts.bottommost_compression_opts.max_dict_bytes
 *             ret_ob['zstd_max_train_bytes'] = self.copts.bottommost_compression_opts.zstd_max_train_bytes             # <<<<<<<<<<<<<<
 *             ret_ob['parallel_threads'] = self.copts.bottommost_compression_opts.parallel_threads
 *             ret_ob['enabled'] = self.copts.bottommost_compression_opts.enabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->copts->bottommost_compression_opts.zstd_max_train_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_zstd_max_train_bytes, __pyx_t_1) < 0))) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":955
 *             ret_ob['max_dict_bytes'] = self.copts.bottommost_compression_opts.max_dict_bytes
 *             ret_ob['zstd_max_train_bytes'] = self.copts.bottommost_compression_opts.zstd_max_train_bytes
 *             ret_ob['parallel_threads'] = self.copts.bottommost_compression_opts.parallel_threads             # <<<<<<<<<<<<<<
 *             ret_ob['enabled'] = self.copts.bottommost_compression_opts.enabled
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->copts->bottommost_compression_opts.parallel_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_parallel_threads, __pyx_t_1) < 0))) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":956
 *             ret_ob['zstd_max_train_bytes'] = self.copts.bottommost_compression_opts.zstd_max_train_bytes
 *             ret_ob['parallel_threads'] = self.copts.bottommost_compression_opts.parallel_threads
 *             ret_ob['enabled'] = self.copts.bottommost_compression_opts.enabled             # <<<<<<<<<<<<<<
 * 
 *             return ret_ob
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->copts->bottommost_compression_opts.enabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_enabled, __pyx_t_1) < 0))) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":958
 *             ret_ob['enabled'] = self.copts.bottommost_compression_opts.enabled
 * 
 *             return ret_ob             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret_ob);
  __pyx_r = __pyx_v_ret_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":947
 * 
 *     property bottommost_compression_opts:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef dict ret_ob = {}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.bottommost_compression_opts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":960
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.copts.bottommost_compression_opts)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) __PYX_ERR(0, 960, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  rocksdb::CompressionOptions *__pyx_v_copts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  uint32_t __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":962
 *         def __set__(self, dict value):
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.copts.bottommost_compression_opts)             # <<<<<<<<<<<<<<
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:
 */
  __pyx_v_copts = (&__pyx_v_self->copts->bottommost_compression_opts);

  /* "rocksdb/_rocksdb.pyx":964
 *             copts = cython.address(self.copts.bottommost_compression_opts)
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:             # <<<<<<<<<<<<<<
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 964, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_window_bits, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 964, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":965
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']             # <<<<<<<<<<<<<<
 *             if 'level' in value:
 *                 copts.level = value['level']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 965, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_window_bits); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->window_bits = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":964
 *             copts = cython.address(self.copts.bottommost_compression_opts)
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:             # <<<<<<<<<<<<<<
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":966
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:             # <<<<<<<<<<<<<<
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 966, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_level, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 966, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":967
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 *                 copts.level = value['level']             # <<<<<<<<<<<<<<
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 967, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->level = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":966
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:             # <<<<<<<<<<<<<<
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":968
 *             if 'level' in value:
 *                 copts.level = value['level']
 *             if 'strategy' in value:             # <<<<<<<<<<<<<<
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 968, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_strategy, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 968, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":969
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']             # <<<<<<<<<<<<<<
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 969, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_strategy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->strategy = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":968
 *             if 'level' in value:
 *                 copts.level = value['level']
 *             if 'strategy' in value:             # <<<<<<<<<<<<<<
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":970
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 970, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_max_dict_bytes, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 970, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":971
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']             # <<<<<<<<<<<<<<
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 971, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_max_dict_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->max_dict_bytes = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":970
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":972
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 972, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_zstd_max_train_bytes, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 972, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":973
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']             # <<<<<<<<<<<<<<
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 973, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_zstd_max_train_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->zstd_max_train_bytes = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":972
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 *             if 'zstd_max_train_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":974
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:             # <<<<<<<<<<<<<<
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 974, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_parallel_threads, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 974, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":975
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']             # <<<<<<<<<<<<<<
 *             if 'enabled' in value:
 *                 copts.enabled = value['enabled']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 975, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_parallel_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->parallel_threads = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":974
 *             if 'zstd_max_train_bytes' in value:
 *                 copts.zstd_max_train_bytes = value['zstd_max_train_bytes']
 *             if 'parallel_threads' in value:             # <<<<<<<<<<<<<<
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":976
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:             # <<<<<<<<<<<<<<
 *                 copts.enabled = value['enabled']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 976, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_enabled, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 976, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":977
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:
 *                 copts.enabled = value['enabled']             # <<<<<<<<<<<<<<
 * 
 *     property compaction_pri:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 977, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_enabled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_copts->enabled = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":976
 *             if 'parallel_threads' in value:
 *                 copts.parallel_threads = value['parallel_threads']
 *             if 'enabled' in value:             # <<<<<<<<<<<<<<
 *                 copts.enabled = value['enabled']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":960
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.copts.bottommost_compression_opts)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.bottommost_compression_opts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":980
 * 
 *     property compaction_pri:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":981
 *     property compaction_pri:
 *         def __get__(self):
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.by_compensated_size
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_pri == rocksdb::kByCompensatedSize);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":982
 *         def __get__(self):
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_by_compensated_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":981
 *     property compaction_pri:
 *         def __get__(self):
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.by_compensated_size
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:
 */
  }

  /* "rocksdb/_rocksdb.pyx":983
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_pri == rocksdb::kOldestLargestSeqFirst);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":984
 *                 return CompactionPri.by_compensated_size
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_largest_seq_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":983
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:
 */
  }

  /* "rocksdb/_rocksdb.pyx":985
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_pri == rocksdb::kOldestSmallestSeqFirst);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":986
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_smallest_seq_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":985
 *             if self.copts.compaction_pri == options.advanced_options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:
 */
  }

  /* "rocksdb/_rocksdb.pyx":987
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_pri == rocksdb::kMinOverlappingRatio);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":988
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_min_overlapping_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":987
 *             if self.copts.compaction_pri == options.advanced_options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 */
  }

  /* "rocksdb/_rocksdb.pyx":980
 * 
 *     property compaction_pri:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_pri == options.advanced_options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compaction_pri.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":989
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompactionPri.by_compensated_size:
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":990
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_by_compensated_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":991
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize             # <<<<<<<<<<<<<<
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst
 */
    __pyx_v_self->copts->compaction_pri = rocksdb::kByCompensatedSize;

    /* "rocksdb/_rocksdb.pyx":990
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":992
 *             if value == CompactionPri.by_compensated_size:
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_largest_seq_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":993
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst             # <<<<<<<<<<<<<<
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst
 */
    __pyx_v_self->copts->compaction_pri = rocksdb::kOldestLargestSeqFirst;

    /* "rocksdb/_rocksdb.pyx":992
 *             if value == CompactionPri.by_compensated_size:
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":994
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_smallest_seq_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":995
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst             # <<<<<<<<<<<<<<
 *             elif value == CompactionPri.min_overlapping_ratio:
 *                 self.copts.compaction_pri = options.advanced_options.kMinOverlappingRatio
 */
    __pyx_v_self->copts->compaction_pri = rocksdb::kOldestSmallestSeqFirst;

    /* "rocksdb/_rocksdb.pyx":994
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":996
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kMinOverlappingRatio
 *             else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_min_overlapping_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "rocksdb/_rocksdb.pyx":997
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:
 *                 self.copts.compaction_pri = options.advanced_options.kMinOverlappingRatio             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Unknown compaction pri: %s" % value)
 */
    __pyx_v_self->copts->compaction_pri = rocksdb::kMinOverlappingRatio;

    /* "rocksdb/_rocksdb.pyx":996
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.copts.compaction_pri = options.advanced_options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_pri = options.advanced_options.kMinOverlappingRatio
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":999
 *                 self.copts.compaction_pri = options.advanced_options.kMinOverlappingRatio
 *             else:
 *                 raise TypeError("Unknown compaction pri: %s" % value)             # <<<<<<<<<<<<<<
 * 
 *     property compression:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unknown_compaction_pri_s, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 999, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":989
 *             if self.copts.compaction_pri == options.advanced_options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompactionPri.by_compensated_size:
 *                 self.copts.compaction_pri = options.advanced_options.kByCompensatedSize
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compaction_pri.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1002
 * 
 *     property compression:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.copts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1003
 *     property compression:
 *         def __get__(self):
 *             if self.copts.compression == options.kNoCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.no_compression
 *             elif self.copts.compression  == options.kSnappyCompression:
 */
  switch (__pyx_v_self->copts->compression) {
    case rocksdb::kNoCompression:

    /* "rocksdb/_rocksdb.pyx":1004
 *         def __get__(self):
 *             if self.copts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_no_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1003
 *     property compression:
 *         def __get__(self):
 *             if self.copts.compression == options.kNoCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.no_compression
 *             elif self.copts.compression  == options.kSnappyCompression:
 */
    break;
    case rocksdb::kSnappyCompression:

    /* "rocksdb/_rocksdb.pyx":1006
 *                 return CompressionType.no_compression
 *             elif self.copts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_snappy_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1005
 *             if self.copts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 *             elif self.copts.compression  == options.kSnappyCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.snappy_compression
 *             elif self.copts.compression == options.kZlibCompression:
 */
    break;
    case rocksdb::kZlibCompression:

    /* "rocksdb/_rocksdb.pyx":1008
 *                 return CompressionType.snappy_compression
 *             elif self.copts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zlib_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1007
 *             elif self.copts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression
 *             elif self.copts.compression == options.kZlibCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zlib_compression
 *             elif self.copts.compression == options.kBZip2Compression:
 */
    break;
    case rocksdb::kBZip2Compression:

    /* "rocksdb/_rocksdb.pyx":1010
 *                 return CompressionType.zlib_compression
 *             elif self.copts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_bzip2_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1009
 *             elif self.copts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression
 *             elif self.copts.compression == options.kBZip2Compression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.bzip2_compression
 *             elif self.copts.compression == options.kLZ4Compression:
 */
    break;
    case rocksdb::kLZ4Compression:

    /* "rocksdb/_rocksdb.pyx":1012
 *                 return CompressionType.bzip2_compression
 *             elif self.copts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1011
 *             elif self.copts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression
 *             elif self.copts.compression == options.kLZ4Compression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.lz4_compression
 *             elif self.copts.compression == options.kLZ4HCCompression:
 */
    break;
    case rocksdb::kLZ4HCCompression:

    /* "rocksdb/_rocksdb.pyx":1014
 *                 return CompressionType.lz4_compression
 *             elif self.copts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4hc_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1013
 *             elif self.copts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression
 *             elif self.copts.compression == options.kLZ4HCCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.lz4hc_compression
 *             elif self.copts.compression == options.kXpressCompression:
 */
    break;
    case rocksdb::kXpressCompression:

    /* "rocksdb/_rocksdb.pyx":1016
 *                 return CompressionType.lz4hc_compression
 *             elif self.copts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_xpress_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1015
 *             elif self.copts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression
 *             elif self.copts.compression == options.kXpressCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.xpress_compression
 *             elif self.copts.compression == options.kZSTD:
 */
    break;
    case rocksdb::kZSTD:

    /* "rocksdb/_rocksdb.pyx":1018
 *                 return CompressionType.xpress_compression
 *             elif self.copts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstd_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1017
 *             elif self.copts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression
 *             elif self.copts.compression == options.kZSTD:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zstd_compression
 *             elif self.copts.compression == options.kZSTDNotFinalCompression:
 */
    break;
    case rocksdb::kZSTDNotFinalCompression:

    /* "rocksdb/_rocksdb.pyx":1020
 *                 return CompressionType.zstd_compression
 *             elif self.copts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression             # <<<<<<<<<<<<<<
 *             elif self.copts.compression == options.kDisableCompressionOption:
 *                 return CompressionType.disable_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstdnotfinal_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1019
 *             elif self.copts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression
 *             elif self.copts.compression == options.kZSTDNotFinalCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.copts.compression == options.kDisableCompressionOption:
 */
    break;
    case rocksdb::kDisableCompressionOption:

    /* "rocksdb/_rocksdb.pyx":1022
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.copts.compression == options.kDisableCompressionOption:
 *                 return CompressionType.disable_compression             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Unknown type: %s" % self.opts.compression)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_disable_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1021
 *             elif self.copts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.copts.compression == options.kDisableCompressionOption:             # <<<<<<<<<<<<<<
 *                 return CompressionType.disable_compression
 *             else:
 */
    break;
    default:

    /* "rocksdb/_rocksdb.pyx":1024
 *                 return CompressionType.disable_compression
 *             else:
 *                 raise Exception("Unknown type: %s" % self.opts.compression)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unknown_type_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1024, __pyx_L1_error)
    break;
  }

  /* "rocksdb/_rocksdb.pyx":1002
 * 
 *     property compression:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.copts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compression.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1026
 *                 raise Exception("Unknown type: %s" % self.opts.compression)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompressionType.no_compression:
 *                 self.copts.compression = options.kNoCompression
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1027
 * 
 *         def __set__(self, value):
 *             if value == CompressionType.no_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_no_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1028
 *         def __set__(self, value):
 *             if value == CompressionType.no_compression:
 *                 self.copts.compression = options.kNoCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.snappy_compression:
 *                 self.copts.compression = options.kSnappyCompression
 */
    __pyx_v_self->copts->compression = rocksdb::kNoCompression;

    /* "rocksdb/_rocksdb.pyx":1027
 * 
 *         def __set__(self, value):
 *             if value == CompressionType.no_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1029
 *             if value == CompressionType.no_compression:
 *                 self.copts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_snappy_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1030
 *                 self.copts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:
 *                 self.copts.compression = options.kSnappyCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.zlib_compression:
 *                 self.copts.compression = options.kZlibCompression
 */
    __pyx_v_self->copts->compression = rocksdb::kSnappyCompression;

    /* "rocksdb/_rocksdb.pyx":1029
 *             if value == CompressionType.no_compression:
 *                 self.copts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1031
 *             elif value == CompressionType.snappy_compression:
 *                 self.copts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zlib_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1032
 *                 self.copts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:
 *                 self.copts.compression = options.kZlibCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.bzip2_compression:
 *                 self.copts.compression = options.kBZip2Compression
 */
    __pyx_v_self->copts->compression = rocksdb::kZlibCompression;

    /* "rocksdb/_rocksdb.pyx":1031
 *             elif value == CompressionType.snappy_compression:
 *                 self.copts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1033
 *             elif value == CompressionType.zlib_compression:
 *                 self.copts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_bzip2_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1034
 *                 self.copts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:
 *                 self.copts.compression = options.kBZip2Compression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.lz4_compression:
 *                 self.copts.compression = options.kLZ4Compression
 */
    __pyx_v_self->copts->compression = rocksdb::kBZip2Compression;

    /* "rocksdb/_rocksdb.pyx":1033
 *             elif value == CompressionType.zlib_compression:
 *                 self.copts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1035
 *             elif value == CompressionType.bzip2_compression:
 *                 self.copts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1036
 *                 self.copts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:
 *                 self.copts.compression = options.kLZ4Compression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.copts.compression = options.kLZ4HCCompression
 */
    __pyx_v_self->copts->compression = rocksdb::kLZ4Compression;

    /* "rocksdb/_rocksdb.pyx":1035
 *             elif value == CompressionType.bzip2_compression:
 *                 self.copts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1037
 *             elif value == CompressionType.lz4_compression:
 *                 self.copts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4hc_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1038
 *                 self.copts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.copts.compression = options.kLZ4HCCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.zstd_compression:
 *                 self.copts.compression = options.kZSTD
 */
    __pyx_v_self->copts->compression = rocksdb::kLZ4HCCompression;

    /* "rocksdb/_rocksdb.pyx":1037
 *             elif value == CompressionType.lz4_compression:
 *                 self.copts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1039
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.copts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstd_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1040
 *                 self.copts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:
 *                 self.copts.compression = options.kZSTD             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.copts.compression = options.kZSTDNotFinalCompression
 */
    __pyx_v_self->copts->compression = rocksdb::kZSTD;

    /* "rocksdb/_rocksdb.pyx":1039
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.copts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1041
 *             elif value == CompressionType.zstd_compression:
 *                 self.copts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstdnotfinal_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1042
 *                 self.copts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.copts.compression = options.kZSTDNotFinalCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.disable_compression:
 *                 self.copts.compression = options.kDisableCompressionOption
 */
    __pyx_v_self->copts->compression = rocksdb::kZSTDNotFinalCompression;

    /* "rocksdb/_rocksdb.pyx":1041
 *             elif value == CompressionType.zstd_compression:
 *                 self.copts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1043
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.copts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kDisableCompressionOption
 *             else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_disable_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_3)) {

    /* "rocksdb/_rocksdb.pyx":1044
 *                 self.copts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:
 *                 self.copts.compression = options.kDisableCompressionOption             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Unknown compression: %s" % value)
 */
    __pyx_v_self->copts->compression = rocksdb::kDisableCompressionOption;

    /* "rocksdb/_rocksdb.pyx":1043
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.copts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:             # <<<<<<<<<<<<<<
 *                 self.copts.compression = options.kDisableCompressionOption
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1046
 *                 self.copts.compression = options.kDisableCompressionOption
 *             else:
 *                 raise TypeError("Unknown compression: %s" % value)             # <<<<<<<<<<<<<<
 * 
 *     # FIXME: add bottommost_compression
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unknown_compression_s, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1046, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1026
 *                 raise Exception("Unknown type: %s" % self.opts.compression)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompressionType.no_compression:
 *                 self.copts.compression = options.kNoCompression
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compression.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1051
 * 
 *     property max_compaction_bytes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_compaction_bytes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1052
 *     property max_compaction_bytes:
 *         def __get__(self):
 *             return self.copts.max_compaction_bytes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_compaction_bytes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->copts->max_compaction_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1051
 * 
 *     property max_compaction_bytes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_compaction_bytes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_compaction_bytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1053
 *         def __get__(self):
 *             return self.copts.max_compaction_bytes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_compaction_bytes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1054
 *             return self.copts.max_compaction_bytes
 *         def __set__(self, value):
 *             self.copts.max_compaction_bytes = value             # <<<<<<<<<<<<<<
 * 
 *     property num_levels:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1054, __pyx_L1_error)
  __pyx_v_self->copts->max_compaction_bytes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1053
 *         def __get__(self):
 *             return self.copts.max_compaction_bytes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_compaction_bytes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_compaction_bytes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1057
 * 
 *     property num_levels:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.num_levels
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1058
 *     property num_levels:
 *         def __get__(self):
 *             return self.copts.num_levels             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.num_levels = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->num_levels); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1057
 * 
 *     property num_levels:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.num_levels
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.num_levels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1059
 *         def __get__(self):
 *             return self.copts.num_levels
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.num_levels = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1060
 *             return self.copts.num_levels
 *         def __set__(self, value):
 *             self.copts.num_levels = value             # <<<<<<<<<<<<<<
 * 
 *     property level0_file_num_compaction_trigger:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1060, __pyx_L1_error)
  __pyx_v_self->copts->num_levels = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1059
 *         def __get__(self):
 *             return self.copts.num_levels
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.num_levels = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.num_levels.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1063
 * 
 *     property level0_file_num_compaction_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.level0_file_num_compaction_trigger
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1064
 *     property level0_file_num_compaction_trigger:
 *         def __get__(self):
 *             return self.copts.level0_file_num_compaction_trigger             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.level0_file_num_compaction_trigger = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->level0_file_num_compaction_trigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1063
 * 
 *     property level0_file_num_compaction_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.level0_file_num_compaction_trigger
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.level0_file_num_compaction_trigger.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1065
 *         def __get__(self):
 *             return self.copts.level0_file_num_compaction_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.level0_file_num_compaction_trigger = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1066
 *             return self.copts.level0_file_num_compaction_trigger
 *         def __set__(self, value):
 *             self.copts.level0_file_num_compaction_trigger = value             # <<<<<<<<<<<<<<
 * 
 *     property level0_slowdown_writes_trigger:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_v_self->copts->level0_file_num_compaction_trigger = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1065
 *         def __get__(self):
 *             return self.copts.level0_file_num_compaction_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.level0_file_num_compaction_trigger = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.level0_file_num_compaction_trigger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1069
 * 
 *     property level0_slowdown_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.level0_slowdown_writes_trigger
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1070
 *     property level0_slowdown_writes_trigger:
 *         def __get__(self):
 *             return self.copts.level0_slowdown_writes_trigger             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.level0_slowdown_writes_trigger = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->level0_slowdown_writes_trigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1069
 * 
 *     property level0_slowdown_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.level0_slowdown_writes_trigger
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.level0_slowdown_writes_trigger.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1071
 *         def __get__(self):
 *             return self.copts.level0_slowdown_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.level0_slowdown_writes_trigger = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1072
 *             return self.copts.level0_slowdown_writes_trigger
 *         def __set__(self, value):
 *             self.copts.level0_slowdown_writes_trigger = value             # <<<<<<<<<<<<<<
 * 
 *     property level0_stop_writes_trigger:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L1_error)
  __pyx_v_self->copts->level0_slowdown_writes_trigger = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1071
 *         def __get__(self):
 *             return self.copts.level0_slowdown_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.level0_slowdown_writes_trigger = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.level0_slowdown_writes_trigger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1075
 * 
 *     property level0_stop_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.level0_stop_writes_trigger
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1076
 *     property level0_stop_writes_trigger:
 *         def __get__(self):
 *             return self.copts.level0_stop_writes_trigger             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.level0_stop_writes_trigger = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->level0_stop_writes_trigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1075
 * 
 *     property level0_stop_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.level0_stop_writes_trigger
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.level0_stop_writes_trigger.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1077
 *         def __get__(self):
 *             return self.copts.level0_stop_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.level0_stop_writes_trigger = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1078
 *             return self.copts.level0_stop_writes_trigger
 *         def __set__(self, value):
 *             self.copts.level0_stop_writes_trigger = value             # <<<<<<<<<<<<<<
 * 
 *     property max_mem_compaction_level:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_v_self->copts->level0_stop_writes_trigger = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1077
 *         def __get__(self):
 *             return self.copts.level0_stop_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.level0_stop_writes_trigger = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.level0_stop_writes_trigger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1081
 * 
 *     property max_mem_compaction_level:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_mem_compaction_level
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1082
 *     property max_mem_compaction_level:
 *         def __get__(self):
 *             return self.copts.max_mem_compaction_level             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_mem_compaction_level = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->max_mem_compaction_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1081
 * 
 *     property max_mem_compaction_level:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_mem_compaction_level
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_mem_compaction_level.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1083
 *         def __get__(self):
 *             return self.copts.max_mem_compaction_level
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_mem_compaction_level = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1084
 *             return self.copts.max_mem_compaction_level
 *         def __set__(self, value):
 *             self.copts.max_mem_compaction_level = value             # <<<<<<<<<<<<<<
 * 
 *     property target_file_size_base:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L1_error)
  __pyx_v_self->copts->max_mem_compaction_level = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1083
 *         def __get__(self):
 *             return self.copts.max_mem_compaction_level
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_mem_compaction_level = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_mem_compaction_level.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1087
 * 
 *     property target_file_size_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.target_file_size_base
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1088
 *     property target_file_size_base:
 *         def __get__(self):
 *             return self.copts.target_file_size_base             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.target_file_size_base = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->copts->target_file_size_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1087
 * 
 *     property target_file_size_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.target_file_size_base
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.target_file_size_base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1089
 *         def __get__(self):
 *             return self.copts.target_file_size_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.target_file_size_base = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1090
 *             return self.copts.target_file_size_base
 *         def __set__(self, value):
 *             self.copts.target_file_size_base = value             # <<<<<<<<<<<<<<
 * 
 *     property target_file_size_multiplier:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1090, __pyx_L1_error)
  __pyx_v_self->copts->target_file_size_base = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1089
 *         def __get__(self):
 *             return self.copts.target_file_size_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.target_file_size_base = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.target_file_size_base.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1093
 * 
 *     property target_file_size_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.target_file_size_multiplier
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1094
 *     property target_file_size_multiplier:
 *         def __get__(self):
 *             return self.copts.target_file_size_multiplier             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.target_file_size_multiplier = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->copts->target_file_size_multiplier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1093
 * 
 *     property target_file_size_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.target_file_size_multiplier
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.target_file_size_multiplier.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1095
 *         def __get__(self):
 *             return self.copts.target_file_size_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.target_file_size_multiplier = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1096
 *             return self.copts.target_file_size_multiplier
 *         def __set__(self, value):
 *             self.copts.target_file_size_multiplier = value             # <<<<<<<<<<<<<<
 * 
 *     property max_bytes_for_level_base:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L1_error)
  __pyx_v_self->copts->target_file_size_multiplier = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1095
 *         def __get__(self):
 *             return self.copts.target_file_size_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.target_file_size_multiplier = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.target_file_size_multiplier.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1099
 * 
 *     property max_bytes_for_level_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_bytes_for_level_base
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1100
 *     property max_bytes_for_level_base:
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_base             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_bytes_for_level_base = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->copts->max_bytes_for_level_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1099
 * 
 *     property max_bytes_for_level_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_bytes_for_level_base
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_bytes_for_level_base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1101
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_bytes_for_level_base = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1102
 *             return self.copts.max_bytes_for_level_base
 *         def __set__(self, value):
 *             self.copts.max_bytes_for_level_base = value             # <<<<<<<<<<<<<<
 * 
 *     property max_bytes_for_level_multiplier:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1102, __pyx_L1_error)
  __pyx_v_self->copts->max_bytes_for_level_base = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1101
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_bytes_for_level_base = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_bytes_for_level_base.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1105
 * 
 *     property max_bytes_for_level_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_bytes_for_level_multiplier
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1106
 *     property max_bytes_for_level_multiplier:
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_multiplier             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_bytes_for_level_multiplier = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->copts->max_bytes_for_level_multiplier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1105
 * 
 *     property max_bytes_for_level_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_bytes_for_level_multiplier
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_bytes_for_level_multiplier.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1107
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_bytes_for_level_multiplier = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1108
 *             return self.copts.max_bytes_for_level_multiplier
 *         def __set__(self, value):
 *             self.copts.max_bytes_for_level_multiplier = value             # <<<<<<<<<<<<<<
 * 
 *     property max_bytes_for_level_multiplier_additional:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_v_self->copts->max_bytes_for_level_multiplier = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1107
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_bytes_for_level_multiplier = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_bytes_for_level_multiplier.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1111
 * 
 *     property max_bytes_for_level_multiplier_additional:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1112
 *     property max_bytes_for_level_multiplier_additional:
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_multiplier_additional             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_bytes_for_level_multiplier_additional = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->copts->max_bytes_for_level_multiplier_additional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1111
 * 
 *     property max_bytes_for_level_multiplier_additional:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_bytes_for_level_multiplier_additional.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1113
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_bytes_for_level_multiplier_additional = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1114
 *             return self.copts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):
 *             self.copts.max_bytes_for_level_multiplier_additional = value             # <<<<<<<<<<<<<<
 * 
 *     property arena_block_size:
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1114, __pyx_L1_error)
  __pyx_v_self->copts->max_bytes_for_level_multiplier_additional = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":1113
 *         def __get__(self):
 *             return self.copts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_bytes_for_level_multiplier_additional = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_bytes_for_level_multiplier_additional.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1117
 * 
 *     property arena_block_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.arena_block_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1118
 *     property arena_block_size:
 *         def __get__(self):
 *             return self.copts.arena_block_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.arena_block_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->copts->arena_block_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1117
 * 
 *     property arena_block_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.arena_block_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.arena_block_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1119
 *         def __get__(self):
 *             return self.copts.arena_block_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.arena_block_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1120
 *             return self.copts.arena_block_size
 *         def __set__(self, value):
 *             self.copts.arena_block_size = value             # <<<<<<<<<<<<<<
 * 
 *     property disable_auto_compactions:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1120, __pyx_L1_error)
  __pyx_v_self->copts->arena_block_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1119
 *         def __get__(self):
 *             return self.copts.arena_block_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.arena_block_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.arena_block_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1123
 * 
 *     property disable_auto_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.disable_auto_compactions
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1124
 *     property disable_auto_compactions:
 *         def __get__(self):
 *             return self.copts.disable_auto_compactions             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.disable_auto_compactions = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->copts->disable_auto_compactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1123
 * 
 *     property disable_auto_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.disable_auto_compactions
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.disable_auto_compactions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1125
 *         def __get__(self):
 *             return self.copts.disable_auto_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.disable_auto_compactions = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1126
 *             return self.copts.disable_auto_compactions
 *         def __set__(self, value):
 *             self.copts.disable_auto_compactions = value             # <<<<<<<<<<<<<<
 * 
 *     # FIXME: remove to util/options_helper.h
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1126, __pyx_L1_error)
  __pyx_v_self->copts->disable_auto_compactions = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1125
 *         def __get__(self):
 *             return self.copts.disable_auto_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.disable_auto_compactions = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.disable_auto_compactions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1136
 * 
 *     property compaction_style:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1137
 *     property compaction_style:
 *         def __get__(self):
 *             if self.copts.compaction_style == kCompactionStyleLevel:             # <<<<<<<<<<<<<<
 *                 return 'level'
 *             if self.copts.compaction_style == kCompactionStyleUniversal:
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_style == rocksdb::kCompactionStyleLevel);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1138
 *         def __get__(self):
 *             if self.copts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_level);
    __pyx_r = __pyx_n_u_level;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1137
 *     property compaction_style:
 *         def __get__(self):
 *             if self.copts.compaction_style == kCompactionStyleLevel:             # <<<<<<<<<<<<<<
 *                 return 'level'
 *             if self.copts.compaction_style == kCompactionStyleUniversal:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1139
 *             if self.copts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 *             if self.copts.compaction_style == kCompactionStyleUniversal:             # <<<<<<<<<<<<<<
 *                 return 'universal'
 *             if self.copts.compaction_style == kCompactionStyleFIFO:
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_style == rocksdb::kCompactionStyleUniversal);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1140
 *                 return 'level'
 *             if self.copts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_universal);
    __pyx_r = __pyx_n_u_universal;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1139
 *             if self.copts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 *             if self.copts.compaction_style == kCompactionStyleUniversal:             # <<<<<<<<<<<<<<
 *                 return 'universal'
 *             if self.copts.compaction_style == kCompactionStyleFIFO:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1141
 *             if self.copts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'
 *             if self.copts.compaction_style == kCompactionStyleFIFO:             # <<<<<<<<<<<<<<
 *                 return 'fifo'
 *             if self.copts.compaction_style == kCompactionStyleNone:
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_style == rocksdb::kCompactionStyleFIFO);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1142
 *                 return 'universal'
 *             if self.copts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_style == kCompactionStyleNone:
 *                 return 'none'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_fifo);
    __pyx_r = __pyx_n_u_fifo;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1141
 *             if self.copts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'
 *             if self.copts.compaction_style == kCompactionStyleFIFO:             # <<<<<<<<<<<<<<
 *                 return 'fifo'
 *             if self.copts.compaction_style == kCompactionStyleNone:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1143
 *             if self.copts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'
 *             if self.copts.compaction_style == kCompactionStyleNone:             # <<<<<<<<<<<<<<
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")
 */
  __pyx_t_1 = (__pyx_v_self->copts->compaction_style == rocksdb::kCompactionStyleNone);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1144
 *                 return 'fifo'
 *             if self.copts.compaction_style == kCompactionStyleNone:
 *                 return 'none'             # <<<<<<<<<<<<<<
 *             raise Exception("Unknown compaction_style")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_none);
    __pyx_r = __pyx_n_u_none;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1143
 *             if self.copts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'
 *             if self.copts.compaction_style == kCompactionStyleNone:             # <<<<<<<<<<<<<<
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")
 */
  }

  /* "rocksdb/_rocksdb.pyx":1145
 *             if self.copts.compaction_style == kCompactionStyleNone:
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, str value):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1145, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1136
 * 
 *     property compaction_style:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.copts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compaction_style.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1147
 *             raise Exception("Unknown compaction_style")
 * 
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             if value == 'level':
 *                 self.copts.compaction_style = kCompactionStyleLevel
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyUnicode_Type), 1, "value", 1))) __PYX_ERR(0, 1147, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1148
 * 
 *         def __set__(self, str value):
 *             if value == 'level':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_level, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1148, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1149
 *         def __set__(self, str value):
 *             if value == 'level':
 *                 self.copts.compaction_style = kCompactionStyleLevel             # <<<<<<<<<<<<<<
 *             elif value == 'universal':
 *                 self.copts.compaction_style = kCompactionStyleUniversal
 */
    __pyx_v_self->copts->compaction_style = rocksdb::kCompactionStyleLevel;

    /* "rocksdb/_rocksdb.pyx":1148
 * 
 *         def __set__(self, str value):
 *             if value == 'level':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1150
 *             if value == 'level':
 *                 self.copts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_universal, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1150, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1151
 *                 self.copts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':
 *                 self.copts.compaction_style = kCompactionStyleUniversal             # <<<<<<<<<<<<<<
 *             elif value == 'fifo':
 *                 self.copts.compaction_style = kCompactionStyleFIFO
 */
    __pyx_v_self->copts->compaction_style = rocksdb::kCompactionStyleUniversal;

    /* "rocksdb/_rocksdb.pyx":1150
 *             if value == 'level':
 *                 self.copts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1152
 *             elif value == 'universal':
 *                 self.copts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_fifo, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1152, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1153
 *                 self.copts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':
 *                 self.copts.compaction_style = kCompactionStyleFIFO             # <<<<<<<<<<<<<<
 *             elif value == 'none':
 *                 self.copts.compaction_style = kCompactionStyleNone
 */
    __pyx_v_self->copts->compaction_style = rocksdb::kCompactionStyleFIFO;

    /* "rocksdb/_rocksdb.pyx":1152
 *             elif value == 'universal':
 *                 self.copts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1154
 *             elif value == 'fifo':
 *                 self.copts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleNone
 *             else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_none, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1154, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":1155
 *                 self.copts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':
 *                 self.copts.compaction_style = kCompactionStyleNone             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Unknown compaction style")
 */
    __pyx_v_self->copts->compaction_style = rocksdb::kCompactionStyleNone;

    /* "rocksdb/_rocksdb.pyx":1154
 *             elif value == 'fifo':
 *                 self.copts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':             # <<<<<<<<<<<<<<
 *                 self.copts.compaction_style = kCompactionStyleNone
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1157
 *                 self.copts.compaction_style = kCompactionStyleNone
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     property compaction_options_universal:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1157, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1147
 *             raise Exception("Unknown compaction_style")
 * 
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             if value == 'level':
 *                 self.copts.compaction_style = kCompactionStyleLevel
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compaction_style.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1160
 * 
 *     property compaction_options_universal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal uopts
 *             cdef dict ret_ob = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  rocksdb::CompactionOptionsUniversal __pyx_v_uopts;
  PyObject *__pyx_v_ret_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rocksdb::CompactionOptionsUniversal __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1162
 *         def __get__(self):
 *             cdef universal_compaction.CompactionOptionsUniversal uopts
 *             cdef dict ret_ob = {}             # <<<<<<<<<<<<<<
 * 
 *             uopts = self.copts.compaction_options_universal
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret_ob = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1164
 *             cdef dict ret_ob = {}
 * 
 *             uopts = self.copts.compaction_options_universal             # <<<<<<<<<<<<<<
 * 
 *             ret_ob['size_ratio'] = uopts.size_ratio
 */
  __pyx_t_2 = __pyx_v_self->copts->compaction_options_universal;
  __pyx_v_uopts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":1166
 *             uopts = self.copts.compaction_options_universal
 * 
 *             ret_ob['size_ratio'] = uopts.size_ratio             # <<<<<<<<<<<<<<
 *             ret_ob['min_merge_width'] = uopts.min_merge_width
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.size_ratio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_size_ratio, __pyx_t_1) < 0))) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1167
 * 
 *             ret_ob['size_ratio'] = uopts.size_ratio
 *             ret_ob['min_merge_width'] = uopts.min_merge_width             # <<<<<<<<<<<<<<
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.min_merge_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_min_merge_width, __pyx_t_1) < 0))) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1168
 *             ret_ob['size_ratio'] = uopts.size_ratio
 *             ret_ob['min_merge_width'] = uopts.min_merge_width
 *             ret_ob['max_merge_width'] = uopts.max_merge_width             # <<<<<<<<<<<<<<
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.max_merge_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_max_merge_width, __pyx_t_1) < 0))) __PYX_ERR(0, 1168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1169
 *             ret_ob['min_merge_width'] = uopts.min_merge_width
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent             # <<<<<<<<<<<<<<
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.max_size_amplification_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_max_size_amplification_percent, __pyx_t_1) < 0))) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1170
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent             # <<<<<<<<<<<<<<
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_uopts.compression_size_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_compression_size_percent, __pyx_t_1) < 0))) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1172
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 */
  switch (__pyx_v_uopts.stop_style) {
    case rocksdb::kCompactionStopStyleSimilarSize:

    /* "rocksdb/_rocksdb.pyx":1173
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 *                 ret_ob['stop_style'] = 'similar_size'             # <<<<<<<<<<<<<<
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 *                 ret_ob['stop_style'] = 'total_size'
 */
    if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_stop_style, __pyx_n_u_similar_size) < 0))) __PYX_ERR(0, 1173, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1172
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 */
    break;
    case rocksdb::kCompactionStopStyleTotalSize:

    /* "rocksdb/_rocksdb.pyx":1175
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 *                 ret_ob['stop_style'] = 'total_size'             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Unknown compaction style")
 */
    if (unlikely((PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_u_stop_style, __pyx_n_u_total_size) < 0))) __PYX_ERR(0, 1175, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1174
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'total_size'
 *             else:
 */
    break;
    default:

    /* "rocksdb/_rocksdb.pyx":1177
 *                 ret_ob['stop_style'] = 'total_size'
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *             return ret_ob
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1177, __pyx_L1_error)
    break;
  }

  /* "rocksdb/_rocksdb.pyx":1179
 *                 raise Exception("Unknown compaction style")
 * 
 *             return ret_ob             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret_ob);
  __pyx_r = __pyx_v_ret_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1160
 * 
 *     property compaction_options_universal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal uopts
 *             cdef dict ret_ob = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compaction_options_universal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1181
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal* uopts
 *             uopts = cython.address(self.copts.compaction_options_universal)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) __PYX_ERR(0, 1181, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  rocksdb::CompactionOptionsUniversal *__pyx_v_uopts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1183
 *         def __set__(self, dict value):
 *             cdef universal_compaction.CompactionOptionsUniversal* uopts
 *             uopts = cython.address(self.copts.compaction_options_universal)             # <<<<<<<<<<<<<<
 * 
 *             if 'size_ratio' in value:
 */
  __pyx_v_uopts = (&__pyx_v_self->copts->compaction_options_universal);

  /* "rocksdb/_rocksdb.pyx":1185
 *             uopts = cython.address(self.copts.compaction_options_universal)
 * 
 *             if 'size_ratio' in value:             # <<<<<<<<<<<<<<
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1185, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_size_ratio, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1185, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1186
 * 
 *             if 'size_ratio' in value:
 *                 uopts.size_ratio  = value['size_ratio']             # <<<<<<<<<<<<<<
 * 
 *             if 'min_merge_width' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1186, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_size_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_uopts->size_ratio = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1185
 *             uopts = cython.address(self.copts.compaction_options_universal)
 * 
 *             if 'size_ratio' in value:             # <<<<<<<<<<<<<<
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1188
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 *             if 'min_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1188, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_min_merge_width, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1188, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1189
 * 
 *             if 'min_merge_width' in value:
 *                 uopts.min_merge_width = value['min_merge_width']             # <<<<<<<<<<<<<<
 * 
 *             if 'max_merge_width' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1189, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_min_merge_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_uopts->min_merge_width = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1188
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 *             if 'min_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1191
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 *             if 'max_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1191, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_max_merge_width, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1191, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1192
 * 
 *             if 'max_merge_width' in value:
 *                 uopts.max_merge_width = value['max_merge_width']             # <<<<<<<<<<<<<<
 * 
 *             if 'max_size_amplification_percent' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1192, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_max_merge_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_uopts->max_merge_width = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1191
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 *             if 'max_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1194
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 *             if 'max_size_amplification_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1194, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_max_size_amplification_percent, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1194, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1195
 * 
 *             if 'max_size_amplification_percent' in value:
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']             # <<<<<<<<<<<<<<
 * 
 *             if 'compression_size_percent' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1195, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_max_size_amplification_percent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_uopts->max_size_amplification_percent = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1194
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 *             if 'max_size_amplification_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1197
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 *             if 'compression_size_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1197, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_compression_size_percent, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1197, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1198
 * 
 *             if 'compression_size_percent' in value:
 *                 uopts.compression_size_percent = value['compression_size_percent']             # <<<<<<<<<<<<<<
 * 
 *             if 'stop_style' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1198, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_compression_size_percent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_uopts->compression_size_percent = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":1197
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 *             if 'compression_size_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1200
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 *             if 'stop_style' in value:             # <<<<<<<<<<<<<<
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1200, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_stop_style, __pyx_v_value, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1200, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1201
 * 
 *             if 'stop_style' in value:
 *                 if value['stop_style'] == 'similar_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1201, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_stop_style); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_similar_size, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":1202
 *             if 'stop_style' in value:
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize             # <<<<<<<<<<<<<<
 *                 elif value['stop_style'] == 'total_size':
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 */
      __pyx_v_uopts->stop_style = rocksdb::kCompactionStopStyleSimilarSize;

      /* "rocksdb/_rocksdb.pyx":1201
 * 
 *             if 'stop_style' in value:
 *                 if value['stop_style'] == 'similar_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':
 */
      goto __pyx_L9;
    }

    /* "rocksdb/_rocksdb.pyx":1203
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1203, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_u_stop_style); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_total_size, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(__pyx_t_1)) {

      /* "rocksdb/_rocksdb.pyx":1204
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':
 *                     uopts.stop_style = kCompactionStopStyleTotalSize             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise Exception("Unknown compaction style")
 */
      __pyx_v_uopts->stop_style = rocksdb::kCompactionStopStyleTotalSize;

      /* "rocksdb/_rocksdb.pyx":1203
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 */
      goto __pyx_L9;
    }

    /* "rocksdb/_rocksdb.pyx":1206
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 *                     raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     # Deprecate
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1206, __pyx_L1_error)
    }
    __pyx_L9:;

    /* "rocksdb/_rocksdb.pyx":1200
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 *             if 'stop_style' in value:             # <<<<<<<<<<<<<<
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 */
  }

  /* "rocksdb/_rocksdb.pyx":1181
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal* uopts
 *             uopts = cython.address(self.copts.compaction_options_universal)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.compaction_options_universal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1216
 * 
 *     property max_sequential_skip_in_iterations:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_sequential_skip_in_iterations
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1217
 *     property max_sequential_skip_in_iterations:
 *         def __get__(self):
 *             return self.copts.max_sequential_skip_in_iterations             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.max_sequential_skip_in_iterations = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->copts->max_sequential_skip_in_iterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1216
 * 
 *     property max_sequential_skip_in_iterations:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.max_sequential_skip_in_iterations
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_sequential_skip_in_iterations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1218
 *         def __get__(self):
 *             return self.copts.max_sequential_skip_in_iterations
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_sequential_skip_in_iterations = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1219
 *             return self.copts.max_sequential_skip_in_iterations
 *         def __set__(self, value):
 *             self.copts.max_sequential_skip_in_iterations = value             # <<<<<<<<<<<<<<
 * 
 *     property inplace_update_support:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1219, __pyx_L1_error)
  __pyx_v_self->copts->max_sequential_skip_in_iterations = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1218
 *         def __get__(self):
 *             return self.copts.max_sequential_skip_in_iterations
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.max_sequential_skip_in_iterations = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.max_sequential_skip_in_iterations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1222
 * 
 *     property inplace_update_support:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.inplace_update_support
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1223
 *     property inplace_update_support:
 *         def __get__(self):
 *             return self.copts.inplace_update_support             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.inplace_update_support = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->copts->inplace_update_support); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1222
 * 
 *     property inplace_update_support:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.inplace_update_support
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.inplace_update_support.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1224
 *         def __get__(self):
 *             return self.copts.inplace_update_support
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.inplace_update_support = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1225
 *             return self.copts.inplace_update_support
 *         def __set__(self, value):
 *             self.copts.inplace_update_support = value             # <<<<<<<<<<<<<<
 * 
 *     property table_factory:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L1_error)
  __pyx_v_self->copts->inplace_update_support = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1224
 *         def __get__(self):
 *             return self.copts.inplace_update_support
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.inplace_update_support = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.inplace_update_support.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1228
 * 
 *     property table_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_table_factory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1229
 *     property table_factory:
 *         def __get__(self):
 *             return self.py_table_factory             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, PyTableFactory value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->py_table_factory);
  __pyx_r = ((PyObject *)__pyx_v_self->py_table_factory);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1228
 * 
 *     property table_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_table_factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1231
 *             return self.py_table_factory
 * 
 *         def __set__(self, PyTableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_table_factory = value
 *             self.copts.table_factory = value.get_table_factory()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory, 1, "value", 0))) __PYX_ERR(0, 1231, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<rocksdb::TableFactory>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1232
 * 
 *         def __set__(self, PyTableFactory value):
 *             self.py_table_factory = value             # <<<<<<<<<<<<<<
 *             self.copts.table_factory = value.get_table_factory()
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_value);
  __Pyx_GIVEREF((PyObject *)__pyx_v_value);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_table_factory);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_table_factory);
  __pyx_v_self->py_table_factory = __pyx_v_value;

  /* "rocksdb/_rocksdb.pyx":1233
 *         def __set__(self, PyTableFactory value):
 *             self.py_table_factory = value
 *             self.copts.table_factory = value.get_table_factory()             # <<<<<<<<<<<<<<
 * 
 *     property memtable_factory:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_value->__pyx_vtab)->get_table_factory(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1233, __pyx_L1_error)
  __pyx_v_self->copts->table_factory = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":1231
 *             return self.py_table_factory
 * 
 *         def __set__(self, PyTableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_table_factory = value
 *             self.copts.table_factory = value.get_table_factory()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.table_factory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1236
 * 
 *     property memtable_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_memtable_factory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1237
 *     property memtable_factory:
 *         def __get__(self):
 *             return self.py_memtable_factory             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, PyMemtableFactory value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->py_memtable_factory);
  __pyx_r = ((PyObject *)__pyx_v_self->py_memtable_factory);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1236
 * 
 *     property memtable_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_memtable_factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1239
 *             return self.py_memtable_factory
 * 
 *         def __set__(self, PyMemtableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_memtable_factory = value
 *             self.copts.memtable_factory = value.get_memtable_factory()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory, 1, "value", 0))) __PYX_ERR(0, 1239, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1240
 * 
 *         def __set__(self, PyMemtableFactory value):
 *             self.py_memtable_factory = value             # <<<<<<<<<<<<<<
 *             self.copts.memtable_factory = value.get_memtable_factory()
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_value);
  __Pyx_GIVEREF((PyObject *)__pyx_v_value);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_memtable_factory);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_memtable_factory);
  __pyx_v_self->py_memtable_factory = __pyx_v_value;

  /* "rocksdb/_rocksdb.pyx":1241
 *         def __set__(self, PyMemtableFactory value):
 *             self.py_memtable_factory = value
 *             self.copts.memtable_factory = value.get_memtable_factory()             # <<<<<<<<<<<<<<
 * 
 *     property inplace_update_num_locks:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory *)__pyx_v_value->__pyx_vtab)->get_memtable_factory(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1241, __pyx_L1_error)
  __pyx_v_self->copts->memtable_factory = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":1239
 *             return self.py_memtable_factory
 * 
 *         def __set__(self, PyMemtableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_memtable_factory = value
 *             self.copts.memtable_factory = value.get_memtable_factory()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.memtable_factory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1244
 * 
 *     property inplace_update_num_locks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.inplace_update_num_locks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1245
 *     property inplace_update_num_locks:
 *         def __get__(self):
 *             return self.copts.inplace_update_num_locks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.inplace_update_num_locks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->copts->inplace_update_num_locks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1244
 * 
 *     property inplace_update_num_locks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.inplace_update_num_locks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.inplace_update_num_locks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1246
 *         def __get__(self):
 *             return self.copts.inplace_update_num_locks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.inplace_update_num_locks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1247
 *             return self.copts.inplace_update_num_locks
 *         def __set__(self, value):
 *             self.copts.inplace_update_num_locks = value             # <<<<<<<<<<<<<<
 * 
 *     property comparator:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1247, __pyx_L1_error)
  __pyx_v_self->copts->inplace_update_num_locks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1246
 *         def __get__(self):
 *             return self.copts.inplace_update_num_locks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.inplace_update_num_locks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.inplace_update_num_locks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1250
 * 
 *     property comparator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_comparator.get_ob()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1251
 *     property comparator:
 *         def __get__(self):
 *             return self.py_comparator.get_ob()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_self->py_comparator->__pyx_vtab)->get_ob(__pyx_v_self->py_comparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1250
 * 
 *     property comparator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_comparator.get_ob()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.comparator.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1253
 *             return self.py_comparator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  rocksdb::Comparator const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1254
 * 
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):             # <<<<<<<<<<<<<<
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 *                     raise Exception("Cannot set %s as comparator" % value)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1255
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set %s as comparator" % value)
 *                 else:
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator)))) __PYX_ERR(0, 1255, __pyx_L1_error)
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_value)->__pyx_vtab)->get_comparator(((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_value)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1255, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 == NULL);
    if (unlikely(__pyx_t_1)) {

      /* "rocksdb/_rocksdb.pyx":1256
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 *                     raise Exception("Cannot set %s as comparator" % value)             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.py_comparator = value
 */
      __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Cannot_set_s_as_comparator, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1256, __pyx_L1_error)

      /* "rocksdb/_rocksdb.pyx":1255
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set %s as comparator" % value)
 *                 else:
 */
    }

    /* "rocksdb/_rocksdb.pyx":1258
 *                     raise Exception("Cannot set %s as comparator" % value)
 *                 else:
 *                     self.py_comparator = value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_comparator = PyGenericComparator(value)
 */
    /*else*/ {
      if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator))))) __PYX_ERR(0, 1258, __pyx_L1_error)
      __pyx_t_4 = __pyx_v_value;
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF((PyObject *)__pyx_v_self->py_comparator);
      __Pyx_DECREF((PyObject *)__pyx_v_self->py_comparator);
      __pyx_v_self->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_t_4);
      __pyx_t_4 = 0;
    }

    /* "rocksdb/_rocksdb.pyx":1254
 * 
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):             # <<<<<<<<<<<<<<
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 *                     raise Exception("Cannot set %s as comparator" % value)
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1260
 *                     self.py_comparator = value
 *             else:
 *                 self.py_comparator = PyGenericComparator(value)             # <<<<<<<<<<<<<<
 * 
 *             self.copts.comparator = self.py_comparator.get_comparator()
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator), __pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->py_comparator);
    __Pyx_DECREF((PyObject *)__pyx_v_self->py_comparator);
    __pyx_v_self->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1262
 *                 self.py_comparator = PyGenericComparator(value)
 * 
 *             self.copts.comparator = self.py_comparator.get_comparator()             # <<<<<<<<<<<<<<
 * 
 *     property merge_operator:
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_self->py_comparator->__pyx_vtab)->get_comparator(__pyx_v_self->py_comparator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1262, __pyx_L1_error)
  __pyx_v_self->copts->comparator = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1253
 *             return self.py_comparator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.comparator.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1265
 * 
 *     property merge_operator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_merge_operator is None:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1266
 *     property merge_operator:
 *         def __get__(self):
 *             if self.py_merge_operator is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_merge_operator.get_ob()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->py_merge_operator) == Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1267
 *         def __get__(self):
 *             if self.py_merge_operator is None:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self.py_merge_operator.get_ob()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1266
 *     property merge_operator:
 *         def __get__(self):
 *             if self.py_merge_operator is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_merge_operator.get_ob()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1268
 *             if self.py_merge_operator is None:
 *                 return None
 *             return self.py_merge_operator.get_ob()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self->py_merge_operator->__pyx_vtab)->get_ob(__pyx_v_self->py_merge_operator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1265
 * 
 *     property merge_operator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_merge_operator is None:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.merge_operator.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1270
 *             return self.py_merge_operator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.py_merge_operator = PyMergeOperator(value)
 *             self.copts.merge_operator = self.py_merge_operator.get_operator()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<rocksdb::MergeOperator>  __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1271
 * 
 *         def __set__(self, value):
 *             self.py_merge_operator = PyMergeOperator(value)             # <<<<<<<<<<<<<<
 *             self.copts.merge_operator = self.py_merge_operator.get_operator()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_merge_operator);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_merge_operator);
  __pyx_v_self->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1272
 *         def __set__(self, value):
 *             self.py_merge_operator = PyMergeOperator(value)
 *             self.copts.merge_operator = self.py_merge_operator.get_operator()             # <<<<<<<<<<<<<<
 * 
 *     property prefix_extractor:
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self->py_merge_operator->__pyx_vtab)->get_operator(__pyx_v_self->py_merge_operator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1272, __pyx_L1_error)
  __pyx_v_self->copts->merge_operator = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":1270
 *             return self.py_merge_operator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.py_merge_operator = PyMergeOperator(value)
 *             self.copts.merge_operator = self.py_merge_operator.get_operator()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.merge_operator.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1275
 * 
 *     property prefix_extractor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_prefix_extractor is None:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1276
 *     property prefix_extractor:
 *         def __get__(self):
 *             if self.py_prefix_extractor is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_prefix_extractor.get_ob()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->py_prefix_extractor) == Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1277
 *         def __get__(self):
 *             if self.py_prefix_extractor is None:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self.py_prefix_extractor.get_ob()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1276
 *     property prefix_extractor:
 *         def __get__(self):
 *             if self.py_prefix_extractor is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_prefix_extractor.get_ob()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1278
 *             if self.py_prefix_extractor is None:
 *                 return None
 *             return self.py_prefix_extractor.get_ob()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self->py_prefix_extractor->__pyx_vtab)->get_ob(__pyx_v_self->py_prefix_extractor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1275
 * 
 *     property prefix_extractor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_prefix_extractor is None:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.prefix_extractor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1280
 *             return self.py_prefix_extractor.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if isinstance(value, int):
 *                 self.copts.prefix_extractor.reset(slice_transform.ST_NewFixedPrefixTransform(value))
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  rocksdb::SliceTransform const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::shared_ptr<rocksdb::SliceTransform>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1281
 * 
 *         def __set__(self, value):
 *             if isinstance(value, int):             # <<<<<<<<<<<<<<
 *                 self.copts.prefix_extractor.reset(slice_transform.ST_NewFixedPrefixTransform(value))
 *             else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_value); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1282
 *         def __set__(self, value):
 *             if isinstance(value, int):
 *                 self.copts.prefix_extractor.reset(slice_transform.ST_NewFixedPrefixTransform(value))             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_prefix_extractor = PySliceTransform(value)
 */
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1282, __pyx_L1_error)
    try {
      __pyx_t_3 = rocksdb::NewFixedPrefixTransform(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1282, __pyx_L1_error)
    }
    try {
      __pyx_v_self->copts->prefix_extractor.reset(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1282, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":1281
 * 
 *         def __set__(self, value):
 *             if isinstance(value, int):             # <<<<<<<<<<<<<<
 *                 self.copts.prefix_extractor.reset(slice_transform.ST_NewFixedPrefixTransform(value))
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1284
 *                 self.copts.prefix_extractor.reset(slice_transform.ST_NewFixedPrefixTransform(value))
 *             else:
 *                 self.py_prefix_extractor = PySliceTransform(value)             # <<<<<<<<<<<<<<
 *                 self.copts.prefix_extractor = self.py_prefix_extractor.get_transformer()
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform), __pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->py_prefix_extractor);
    __Pyx_DECREF((PyObject *)__pyx_v_self->py_prefix_extractor);
    __pyx_v_self->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":1285
 *             else:
 *                 self.py_prefix_extractor = PySliceTransform(value)
 *                 self.copts.prefix_extractor = self.py_prefix_extractor.get_transformer()             # <<<<<<<<<<<<<<
 * 
 *     property optimize_filters_for_hits:
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self->py_prefix_extractor->__pyx_vtab)->get_transformer(__pyx_v_self->py_prefix_extractor); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L1_error)
    __pyx_v_self->copts->prefix_extractor = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1280
 *             return self.py_prefix_extractor.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if isinstance(value, int):
 *                 self.copts.prefix_extractor.reset(slice_transform.ST_NewFixedPrefixTransform(value))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.prefix_extractor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1288
 * 
 *     property optimize_filters_for_hits:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.optimize_filters_for_hits
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1289
 *     property optimize_filters_for_hits:
 *         def __get__(self):
 *             return self.copts.optimize_filters_for_hits             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.optimize_filters_for_hits = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->copts->optimize_filters_for_hits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1288
 * 
 *     property optimize_filters_for_hits:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.optimize_filters_for_hits
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.optimize_filters_for_hits.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1290
 *         def __get__(self):
 *             return self.copts.optimize_filters_for_hits
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.optimize_filters_for_hits = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1291
 *             return self.copts.optimize_filters_for_hits
 *         def __set__(self, value):
 *             self.copts.optimize_filters_for_hits = value             # <<<<<<<<<<<<<<
 * 
 *     property paranoid_file_checks:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1291, __pyx_L1_error)
  __pyx_v_self->copts->optimize_filters_for_hits = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1290
 *         def __get__(self):
 *             return self.copts.optimize_filters_for_hits
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.optimize_filters_for_hits = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.optimize_filters_for_hits.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1294
 * 
 *     property paranoid_file_checks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.paranoid_file_checks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1295
 *     property paranoid_file_checks:
 *         def __get__(self):
 *             return self.copts.paranoid_file_checks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.copts.paranoid_file_checks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->copts->paranoid_file_checks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1294
 * 
 *     property paranoid_file_checks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.copts.paranoid_file_checks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.paranoid_file_checks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1296
 *         def __get__(self):
 *             return self.copts.paranoid_file_checks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.paranoid_file_checks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1297
 *             return self.copts.paranoid_file_checks
 *         def __set__(self, value):
 *             self.copts.paranoid_file_checks = value             # <<<<<<<<<<<<<<
 * 
 * cdef class Options(ColumnFamilyOptions):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_v_self->copts->paranoid_file_checks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1296
 *         def __get__(self):
 *             return self.copts.paranoid_file_checks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.copts.paranoid_file_checks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.paranoid_file_checks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19ColumnFamilyOptions_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_6__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_19ColumnFamilyOptions_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_8__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19ColumnFamilyOptions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ColumnFamilyOptions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1303
 *     cdef PyCache py_row_cache
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         # Destroy the existing ColumnFamilyOptions()
 *         del self.copts
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1303, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Options *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1305
 *     def __cinit__(self):
 *         # Destroy the existing ColumnFamilyOptions()
 *         del self.copts             # <<<<<<<<<<<<<<
 *         self.opts = NULL
 *         self.copts = self.opts = new options.Options()
 */
  delete __pyx_v_self->__pyx_base.copts;

  /* "rocksdb/_rocksdb.pyx":1306
 *         # Destroy the existing ColumnFamilyOptions()
 *         del self.copts
 *         self.opts = NULL             # <<<<<<<<<<<<<<
 *         self.copts = self.opts = new options.Options()
 *         self.in_use = False
 */
  __pyx_v_self->opts = NULL;

  /* "rocksdb/_rocksdb.pyx":1307
 *         del self.copts
 *         self.opts = NULL
 *         self.copts = self.opts = new options.Options()             # <<<<<<<<<<<<<<
 *         self.in_use = False
 * 
 */
  try {
    __pyx_t_1 = new rocksdb::Options();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1307, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.copts = __pyx_t_1;
  __pyx_v_self->opts = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1308
 *         self.opts = NULL
 *         self.copts = self.opts = new options.Options()
 *         self.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->__pyx_base.in_use = 0;

  /* "rocksdb/_rocksdb.pyx":1303
 *     cdef PyCache py_row_cache
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         # Destroy the existing ColumnFamilyOptions()
 *         del self.copts
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1310
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.opts == NULL:
 *             self.copts = NULL
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_7Options_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_7Options_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_7Options_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_7Options_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1311
 * 
 *     def __dealloc__(self):
 *         if not self.opts == NULL:             # <<<<<<<<<<<<<<
 *             self.copts = NULL
 *             del self.opts
 */
  __pyx_t_1 = (!(__pyx_v_self->opts == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1312
 *     def __dealloc__(self):
 *         if not self.opts == NULL:
 *             self.copts = NULL             # <<<<<<<<<<<<<<
 *             del self.opts
 * 
 */
    __pyx_v_self->__pyx_base.copts = NULL;

    /* "rocksdb/_rocksdb.pyx":1313
 *         if not self.opts == NULL:
 *             self.copts = NULL
 *             del self.opts             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, **kwargs):
 */
    delete __pyx_v_self->opts;

    /* "rocksdb/_rocksdb.pyx":1311
 * 
 *     def __dealloc__(self):
 *         if not self.opts == NULL:             # <<<<<<<<<<<<<<
 *             self.copts = NULL
 *             del self.opts
 */
  }

  /* "rocksdb/_rocksdb.pyx":1310
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.opts == NULL:
 *             self.copts = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1315
 *             del self.opts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         ColumnFamilyOptions.__init__(self)
 *         self.py_row_cache = None
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1315, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (__pyx_kwds) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_4__init__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":1316
 * 
 *     def __init__(self, **kwargs):
 *         ColumnFamilyOptions.__init__(self)             # <<<<<<<<<<<<<<
 *         self.py_row_cache = None
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions), __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1317
 *     def __init__(self, **kwargs):
 *         ColumnFamilyOptions.__init__(self)
 *         self.py_row_cache = None             # <<<<<<<<<<<<<<
 * 
 *         for key, value in kwargs.items():
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->py_row_cache);
  __Pyx_DECREF((PyObject *)__pyx_v_self->py_row_cache);
  __pyx_v_self->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None);

  /* "rocksdb/_rocksdb.pyx":1319
 *         self.py_row_cache = None
 * 
 *         for key, value in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_6, &__pyx_t_5, &__pyx_t_2, &__pyx_t_3, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1320
 * 
 *         for key, value in kwargs.items():
 *             setattr(self, key, value)             # <<<<<<<<<<<<<<
 * 
 *     def IncreaseParallelism(self, int total_threads=16):
 */
    __pyx_t_8 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1320, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1315
 *             del self.opts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         ColumnFamilyOptions.__init__(self)
 *         self.py_row_cache = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1322
 *             setattr(self, key, value)
 * 
 *     def IncreaseParallelism(self, int total_threads=16):             # <<<<<<<<<<<<<<
 *         self.opts.IncreaseParallelism(total_threads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_7IncreaseParallelism(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_7Options_7IncreaseParallelism = {"IncreaseParallelism", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7Options_7IncreaseParallelism, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_7IncreaseParallelism(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_total_threads;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IncreaseParallelism (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1322, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_total_threads,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_total_threads);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1322, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "IncreaseParallelism") < 0)) __PYX_ERR(0, 1322, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_total_threads = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_total_threads == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1322, __pyx_L3_error)
    } else {
      __pyx_v_total_threads = ((int)16);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("IncreaseParallelism", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1322, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.IncreaseParallelism", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_6IncreaseParallelism(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), __pyx_v_total_threads);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_6IncreaseParallelism(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, int __pyx_v_total_threads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("IncreaseParallelism", 0);

  /* "rocksdb/_rocksdb.pyx":1323
 * 
 *     def IncreaseParallelism(self, int total_threads=16):
 *         self.opts.IncreaseParallelism(total_threads)             # <<<<<<<<<<<<<<
 * 
 *     property create_if_missing:
 */
  try {
    __pyx_v_self->opts->IncreaseParallelism(__pyx_v_total_threads);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1323, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1322
 *             setattr(self, key, value)
 * 
 *     def IncreaseParallelism(self, int total_threads=16):             # <<<<<<<<<<<<<<
 *         self.opts.IncreaseParallelism(total_threads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.IncreaseParallelism", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1326
 * 
 *     property create_if_missing:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.create_if_missing
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1327
 *     property create_if_missing:
 *         def __get__(self):
 *             return self.opts.create_if_missing             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.create_if_missing = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->create_if_missing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1326
 * 
 *     property create_if_missing:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.create_if_missing
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.create_if_missing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1328
 *         def __get__(self):
 *             return self.opts.create_if_missing
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.create_if_missing = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1329
 *             return self.opts.create_if_missing
 *         def __set__(self, value):
 *             self.opts.create_if_missing = value             # <<<<<<<<<<<<<<
 * 
 *     property create_missing_column_families:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1329, __pyx_L1_error)
  __pyx_v_self->opts->create_if_missing = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1328
 *         def __get__(self):
 *             return self.opts.create_if_missing
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.create_if_missing = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.create_if_missing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1332
 * 
 *     property create_missing_column_families:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.create_missing_column_families
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_30create_missing_column_families___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_30create_missing_column_families___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1333
 *     property create_missing_column_families:
 *         def __get__(self):
 *             return self.opts.create_missing_column_families             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.create_missing_column_families = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->create_missing_column_families); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1332
 * 
 *     property create_missing_column_families:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.create_missing_column_families
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.create_missing_column_families.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1334
 *         def __get__(self):
 *             return self.opts.create_missing_column_families
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.create_missing_column_families = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1335
 *             return self.opts.create_missing_column_families
 *         def __set__(self, value):
 *             self.opts.create_missing_column_families = value             # <<<<<<<<<<<<<<
 * 
 *     property error_if_exists:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1335, __pyx_L1_error)
  __pyx_v_self->opts->create_missing_column_families = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1334
 *         def __get__(self):
 *             return self.opts.create_missing_column_families
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.create_missing_column_families = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.create_missing_column_families.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1338
 * 
 *     property error_if_exists:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.error_if_exists
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1339
 *     property error_if_exists:
 *         def __get__(self):
 *             return self.opts.error_if_exists             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.error_if_exists = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->error_if_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1338
 * 
 *     property error_if_exists:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.error_if_exists
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.error_if_exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1340
 *         def __get__(self):
 *             return self.opts.error_if_exists
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.error_if_exists = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1341
 *             return self.opts.error_if_exists
 *         def __set__(self, value):
 *             self.opts.error_if_exists = value             # <<<<<<<<<<<<<<
 * 
 *     property paranoid_checks:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1341, __pyx_L1_error)
  __pyx_v_self->opts->error_if_exists = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1340
 *         def __get__(self):
 *             return self.opts.error_if_exists
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.error_if_exists = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.error_if_exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1344
 * 
 *     property paranoid_checks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1345
 *     property paranoid_checks:
 *         def __get__(self):
 *             return self.opts.paranoid_checks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.paranoid_checks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->paranoid_checks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1344
 * 
 *     property paranoid_checks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.paranoid_checks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1346
 *         def __get__(self):
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.paranoid_checks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1347
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):
 *             self.opts.paranoid_checks = value             # <<<<<<<<<<<<<<
 * 
 *     property max_open_files:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1347, __pyx_L1_error)
  __pyx_v_self->opts->paranoid_checks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1346
 *         def __get__(self):
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.paranoid_checks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.paranoid_checks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1350
 * 
 *     property max_open_files:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_open_files
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1351
 *     property max_open_files:
 *         def __get__(self):
 *             return self.opts.max_open_files             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_open_files = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_open_files); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1350
 * 
 *     property max_open_files:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_open_files
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_open_files.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1352
 *         def __get__(self):
 *             return self.opts.max_open_files
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_open_files = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1353
 *             return self.opts.max_open_files
 *         def __set__(self, value):
 *             self.opts.max_open_files = value             # <<<<<<<<<<<<<<
 * 
 *     property max_file_opening_threads:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1353, __pyx_L1_error)
  __pyx_v_self->opts->max_open_files = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1352
 *         def __get__(self):
 *             return self.opts.max_open_files
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_open_files = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_open_files.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1356
 * 
 *     property max_file_opening_threads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_file_opening_threads
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1357
 *     property max_file_opening_threads:
 *         def __get__(self):
 *             return self.opts.max_file_opening_threads             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_file_opening_threads = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_file_opening_threads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1356
 * 
 *     property max_file_opening_threads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_file_opening_threads
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_file_opening_threads.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1358
 *         def __get__(self):
 *             return self.opts.max_file_opening_threads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_file_opening_threads = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1359
 *             return self.opts.max_file_opening_threads
 *         def __set__(self, value):
 *             self.opts.max_file_opening_threads = value             # <<<<<<<<<<<<<<
 * 
 *     property max_total_wal_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L1_error)
  __pyx_v_self->opts->max_file_opening_threads = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1358
 *         def __get__(self):
 *             return self.opts.max_file_opening_threads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_file_opening_threads = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_file_opening_threads.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1362
 * 
 *     property max_total_wal_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_total_wal_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_total_wal_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18max_total_wal_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1363
 *     property max_total_wal_size:
 *         def __get__(self):
 *             return self.opts.max_total_wal_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_total_wal_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_total_wal_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1362
 * 
 *     property max_total_wal_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_total_wal_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_total_wal_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1364
 *         def __get__(self):
 *             return self.opts.max_total_wal_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_total_wal_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1365
 *             return self.opts.max_total_wal_size
 *         def __set__(self, value):
 *             self.opts.max_total_wal_size = value             # <<<<<<<<<<<<<<
 * 
 *     property use_fsync:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1365, __pyx_L1_error)
  __pyx_v_self->opts->max_total_wal_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1364
 *         def __get__(self):
 *             return self.opts.max_total_wal_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_total_wal_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_total_wal_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1368
 * 
 *     property use_fsync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_fsync
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1369
 *     property use_fsync:
 *         def __get__(self):
 *             return self.opts.use_fsync             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.use_fsync = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->use_fsync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1368
 * 
 *     property use_fsync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_fsync
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_fsync.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1370
 *         def __get__(self):
 *             return self.opts.use_fsync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_fsync = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1371
 *             return self.opts.use_fsync
 *         def __set__(self, value):
 *             self.opts.use_fsync = value             # <<<<<<<<<<<<<<
 * 
 *     property db_log_dir:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1371, __pyx_L1_error)
  __pyx_v_self->opts->use_fsync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1370
 *         def __get__(self):
 *             return self.opts.use_fsync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_fsync = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_fsync.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1374
 * 
 *     property db_log_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1375
 *     property db_log_dir:
 *         def __get__(self):
 *             return string_to_path(self.opts.db_log_dir)             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.db_log_dir = path_to_string(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_path(__pyx_v_self->opts->db_log_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1374
 * 
 *     property db_log_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.db_log_dir.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1376
 *         def __get__(self):
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.db_log_dir = path_to_string(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1377
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):
 *             self.opts.db_log_dir = path_to_string(value)             # <<<<<<<<<<<<<<
 * 
 *     property wal_dir:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1377, __pyx_L1_error)
  __pyx_v_self->opts->db_log_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":1376
 *         def __get__(self):
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.db_log_dir = path_to_string(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.db_log_dir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1380
 * 
 *     property wal_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1381
 *     property wal_dir:
 *         def __get__(self):
 *             return string_to_path(self.opts.wal_dir)             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.wal_dir = path_to_string(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_path(__pyx_v_self->opts->wal_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1380
 * 
 *     property wal_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_dir.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1382
 *         def __get__(self):
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.wal_dir = path_to_string(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1383
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):
 *             self.opts.wal_dir = path_to_string(value)             # <<<<<<<<<<<<<<
 * 
 *     property delete_obsolete_files_period_micros:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1383, __pyx_L1_error)
  __pyx_v_self->opts->wal_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":1382
 *         def __get__(self):
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.wal_dir = path_to_string(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_dir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1386
 * 
 *     property delete_obsolete_files_period_micros:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1387
 *     property delete_obsolete_files_period_micros:
 *         def __get__(self):
 *             return self.opts.delete_obsolete_files_period_micros             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.delete_obsolete_files_period_micros = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->delete_obsolete_files_period_micros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1386
 * 
 *     property delete_obsolete_files_period_micros:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.delete_obsolete_files_period_micros.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1388
 *         def __get__(self):
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.delete_obsolete_files_period_micros = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1389
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):
 *             self.opts.delete_obsolete_files_period_micros = value             # <<<<<<<<<<<<<<
 * 
 *     property max_background_jobs:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1389, __pyx_L1_error)
  __pyx_v_self->opts->delete_obsolete_files_period_micros = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1388
 *         def __get__(self):
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.delete_obsolete_files_period_micros = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.delete_obsolete_files_period_micros.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1392
 * 
 *     property max_background_jobs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_jobs
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19max_background_jobs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19max_background_jobs_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19max_background_jobs___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19max_background_jobs___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1393
 *     property max_background_jobs:
 *         def __get__(self):
 *             return self.opts.max_background_jobs             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_background_jobs = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_background_jobs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1392
 * 
 *     property max_background_jobs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_jobs
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_jobs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1394
 *         def __get__(self):
 *             return self.opts.max_background_jobs
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_jobs = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19max_background_jobs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19max_background_jobs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19max_background_jobs_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19max_background_jobs_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1395
 *             return self.opts.max_background_jobs
 *         def __set__(self, value):
 *             self.opts.max_background_jobs = value             # <<<<<<<<<<<<<<
 * 
 *     property base_background_compactions:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __pyx_v_self->opts->max_background_jobs = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1394
 *         def __get__(self):
 *             return self.opts.max_background_jobs
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_jobs = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_jobs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1398
 * 
 *     property base_background_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.base_background_compactions
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27base_background_compactions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27base_background_compactions_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27base_background_compactions___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27base_background_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1399
 *     property base_background_compactions:
 *         def __get__(self):
 *             return self.opts.base_background_compactions             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.base_background_compactions = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->base_background_compactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1398
 * 
 *     property base_background_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.base_background_compactions
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.base_background_compactions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1400
 *         def __get__(self):
 *             return self.opts.base_background_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.base_background_compactions = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27base_background_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27base_background_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27base_background_compactions_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27base_background_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1401
 *             return self.opts.base_background_compactions
 *         def __set__(self, value):
 *             self.opts.base_background_compactions = value             # <<<<<<<<<<<<<<
 * 
 *     property max_background_compactions:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L1_error)
  __pyx_v_self->opts->base_background_compactions = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1400
 *         def __get__(self):
 *             return self.opts.base_background_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.base_background_compactions = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.base_background_compactions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1404
 * 
 *     property max_background_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1405
 *     property max_background_compactions:
 *         def __get__(self):
 *             return self.opts.max_background_compactions             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_background_compactions = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_background_compactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1404
 * 
 *     property max_background_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_compactions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1406
 *         def __get__(self):
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_compactions = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1407
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):
 *             self.opts.max_background_compactions = value             # <<<<<<<<<<<<<<
 * 
 *     property max_subcompactions:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1407, __pyx_L1_error)
  __pyx_v_self->opts->max_background_compactions = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1406
 *         def __get__(self):
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_compactions = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_compactions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1410
 * 
 *     property max_subcompactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_subcompactions
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18max_subcompactions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18max_subcompactions_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_subcompactions___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18max_subcompactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1411
 *     property max_subcompactions:
 *         def __get__(self):
 *             return self.opts.max_subcompactions             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_subcompactions = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->opts->max_subcompactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1410
 * 
 *     property max_subcompactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_subcompactions
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_subcompactions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1412
 *         def __get__(self):
 *             return self.opts.max_subcompactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_subcompactions = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_subcompactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_subcompactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_subcompactions_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18max_subcompactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1413
 *             return self.opts.max_subcompactions
 *         def __set__(self, value):
 *             self.opts.max_subcompactions = value             # <<<<<<<<<<<<<<
 * 
 *     property max_background_flushes:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1413, __pyx_L1_error)
  __pyx_v_self->opts->max_subcompactions = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1412
 *         def __get__(self):
 *             return self.opts.max_subcompactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_subcompactions = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_subcompactions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1416
 * 
 *     property max_background_flushes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1417
 *     property max_background_flushes:
 *         def __get__(self):
 *             return self.opts.max_background_flushes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_background_flushes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_background_flushes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1416
 * 
 *     property max_background_flushes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_flushes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1418
 *         def __get__(self):
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_flushes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1419
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):
 *             self.opts.max_background_flushes = value             # <<<<<<<<<<<<<<
 * 
 *     property max_log_file_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L1_error)
  __pyx_v_self->opts->max_background_flushes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1418
 *         def __get__(self):
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_flushes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_flushes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1422
 * 
 *     property max_log_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1423
 *     property max_log_file_size:
 *         def __get__(self):
 *             return self.opts.max_log_file_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_log_file_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->max_log_file_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1422
 * 
 *     property max_log_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_log_file_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1424
 *         def __get__(self):
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_log_file_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1425
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):
 *             self.opts.max_log_file_size = value             # <<<<<<<<<<<<<<
 * 
 *     property log_file_time_to_roll:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L1_error)
  __pyx_v_self->opts->max_log_file_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1424
 *         def __get__(self):
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_log_file_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_log_file_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1428
 * 
 *     property log_file_time_to_roll:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1429
 *     property log_file_time_to_roll:
 *         def __get__(self):
 *             return self.opts.log_file_time_to_roll             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.log_file_time_to_roll = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->log_file_time_to_roll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1428
 * 
 *     property log_file_time_to_roll:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.log_file_time_to_roll.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1430
 *         def __get__(self):
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.log_file_time_to_roll = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1431
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):
 *             self.opts.log_file_time_to_roll = value             # <<<<<<<<<<<<<<
 * 
 *     property keep_log_file_num:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1431, __pyx_L1_error)
  __pyx_v_self->opts->log_file_time_to_roll = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1430
 *         def __get__(self):
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.log_file_time_to_roll = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.log_file_time_to_roll.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1434
 * 
 *     property keep_log_file_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1435
 *     property keep_log_file_num:
 *         def __get__(self):
 *             return self.opts.keep_log_file_num             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.keep_log_file_num = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->keep_log_file_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1434
 * 
 *     property keep_log_file_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.keep_log_file_num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1436
 *         def __get__(self):
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.keep_log_file_num = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1437
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):
 *             self.opts.keep_log_file_num = value             # <<<<<<<<<<<<<<
 * 
 *     property recycle_log_file_num:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1437, __pyx_L1_error)
  __pyx_v_self->opts->keep_log_file_num = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1436
 *         def __get__(self):
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.keep_log_file_num = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.keep_log_file_num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1440
 * 
 *     property recycle_log_file_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.recycle_log_file_num
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1441
 *     property recycle_log_file_num:
 *         def __get__(self):
 *             return self.opts.recycle_log_file_num             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.recycle_log_file_num = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->recycle_log_file_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1440
 * 
 *     property recycle_log_file_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.recycle_log_file_num
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.recycle_log_file_num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1442
 *         def __get__(self):
 *             return self.opts.recycle_log_file_num
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.recycle_log_file_num = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1443
 *             return self.opts.recycle_log_file_num
 *         def __set__(self, value):
 *             self.opts.recycle_log_file_num = value             # <<<<<<<<<<<<<<
 * 
 *     property max_manifest_file_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1443, __pyx_L1_error)
  __pyx_v_self->opts->recycle_log_file_num = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1442
 *         def __get__(self):
 *             return self.opts.recycle_log_file_num
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.recycle_log_file_num = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.recycle_log_file_num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1446
 * 
 *     property max_manifest_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1447
 *     property max_manifest_file_size:
 *         def __get__(self):
 *             return self.opts.max_manifest_file_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_manifest_file_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_manifest_file_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1446
 * 
 *     property max_manifest_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_manifest_file_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1448
 *         def __get__(self):
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_manifest_file_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1449
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):
 *             self.opts.max_manifest_file_size = value             # <<<<<<<<<<<<<<
 * 
 *     property table_cache_numshardbits:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1449, __pyx_L1_error)
  __pyx_v_self->opts->max_manifest_file_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1448
 *         def __get__(self):
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_manifest_file_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_manifest_file_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1452
 * 
 *     property table_cache_numshardbits:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1453
 *     property table_cache_numshardbits:
 *         def __get__(self):
 *             return self.opts.table_cache_numshardbits             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.table_cache_numshardbits = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->table_cache_numshardbits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1452
 * 
 *     property table_cache_numshardbits:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.table_cache_numshardbits.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1454
 *         def __get__(self):
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.table_cache_numshardbits = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1455
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):
 *             self.opts.table_cache_numshardbits = value             # <<<<<<<<<<<<<<
 * 
 *     property wal_ttl_seconds:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1455, __pyx_L1_error)
  __pyx_v_self->opts->table_cache_numshardbits = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1454
 *         def __get__(self):
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.table_cache_numshardbits = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.table_cache_numshardbits.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1458
 * 
 *     property wal_ttl_seconds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1459
 *     property wal_ttl_seconds:
 *         def __get__(self):
 *             return self.opts.WAL_ttl_seconds             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.WAL_ttl_seconds = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->WAL_ttl_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1458
 * 
 *     property wal_ttl_seconds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_ttl_seconds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1460
 *         def __get__(self):
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_ttl_seconds = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1461
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):
 *             self.opts.WAL_ttl_seconds = value             # <<<<<<<<<<<<<<
 * 
 *     property wal_size_limit_mb:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1461, __pyx_L1_error)
  __pyx_v_self->opts->WAL_ttl_seconds = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1460
 *         def __get__(self):
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_ttl_seconds = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_ttl_seconds.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1464
 * 
 *     property wal_size_limit_mb:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1465
 *     property wal_size_limit_mb:
 *         def __get__(self):
 *             return self.opts.WAL_size_limit_MB             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.WAL_size_limit_MB = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->WAL_size_limit_MB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1464
 * 
 *     property wal_size_limit_mb:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_size_limit_mb.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1466
 *         def __get__(self):
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_size_limit_MB = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1467
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):
 *             self.opts.WAL_size_limit_MB = value             # <<<<<<<<<<<<<<
 * 
 *     property manifest_preallocation_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L1_error)
  __pyx_v_self->opts->WAL_size_limit_MB = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1466
 *         def __get__(self):
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_size_limit_MB = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_size_limit_mb.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1470
 * 
 *     property manifest_preallocation_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1471
 *     property manifest_preallocation_size:
 *         def __get__(self):
 *             return self.opts.manifest_preallocation_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.manifest_preallocation_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->manifest_preallocation_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1470
 * 
 *     property manifest_preallocation_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.manifest_preallocation_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1472
 *         def __get__(self):
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.manifest_preallocation_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1473
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):
 *             self.opts.manifest_preallocation_size = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_mmap_reads:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L1_error)
  __pyx_v_self->opts->manifest_preallocation_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1472
 *         def __get__(self):
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.manifest_preallocation_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.manifest_preallocation_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1476
 * 
 *     property allow_mmap_reads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1477
 *     property allow_mmap_reads:
 *         def __get__(self):
 *             return self.opts.allow_mmap_reads             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_mmap_reads = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_mmap_reads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1476
 * 
 *     property allow_mmap_reads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_reads.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1478
 *         def __get__(self):
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_reads = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1479
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):
 *             self.opts.allow_mmap_reads = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_mmap_writes:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1479, __pyx_L1_error)
  __pyx_v_self->opts->allow_mmap_reads = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1478
 *         def __get__(self):
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_reads = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_reads.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1482
 * 
 *     property allow_mmap_writes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1483
 *     property allow_mmap_writes:
 *         def __get__(self):
 *             return self.opts.allow_mmap_writes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_mmap_writes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_mmap_writes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1482
 * 
 *     property allow_mmap_writes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_writes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1484
 *         def __get__(self):
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_writes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1485
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):
 *             self.opts.allow_mmap_writes = value             # <<<<<<<<<<<<<<
 * 
 *     property use_direct_reads:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1485, __pyx_L1_error)
  __pyx_v_self->opts->allow_mmap_writes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1484
 *         def __get__(self):
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_writes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_writes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1488
 * 
 *     property use_direct_reads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_direct_reads
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16use_direct_reads_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16use_direct_reads_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16use_direct_reads___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16use_direct_reads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1489
 *     property use_direct_reads:
 *         def __get__(self):
 *             return self.opts.use_direct_reads             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.use_direct_reads = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->use_direct_reads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1488
 * 
 *     property use_direct_reads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_direct_reads
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_direct_reads.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1490
 *         def __get__(self):
 *             return self.opts.use_direct_reads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_direct_reads = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16use_direct_reads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16use_direct_reads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16use_direct_reads_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16use_direct_reads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1491
 *             return self.opts.use_direct_reads
 *         def __set__(self, value):
 *             self.opts.use_direct_reads = value             # <<<<<<<<<<<<<<
 * 
 *     property use_direct_io_for_flush_and_compaction:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1491, __pyx_L1_error)
  __pyx_v_self->opts->use_direct_reads = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1490
 *         def __get__(self):
 *             return self.opts.use_direct_reads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_direct_reads = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_direct_reads.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1494
 * 
 *     property use_direct_io_for_flush_and_compaction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_direct_io_for_flush_and_compaction
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1495
 *     property use_direct_io_for_flush_and_compaction:
 *         def __get__(self):
 *             return self.opts.use_direct_io_for_flush_and_compaction             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.use_direct_io_for_flush_and_compaction = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->use_direct_io_for_flush_and_compaction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1494
 * 
 *     property use_direct_io_for_flush_and_compaction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_direct_io_for_flush_and_compaction
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_direct_io_for_flush_and_compaction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1496
 *         def __get__(self):
 *             return self.opts.use_direct_io_for_flush_and_compaction
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_direct_io_for_flush_and_compaction = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1497
 *             return self.opts.use_direct_io_for_flush_and_compaction
 *         def __set__(self, value):
 *             self.opts.use_direct_io_for_flush_and_compaction = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_fallocate:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1497, __pyx_L1_error)
  __pyx_v_self->opts->use_direct_io_for_flush_and_compaction = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1496
 *         def __get__(self):
 *             return self.opts.use_direct_io_for_flush_and_compaction
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_direct_io_for_flush_and_compaction = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_direct_io_for_flush_and_compaction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1500
 * 
 *     property allow_fallocate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_fallocate
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15allow_fallocate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15allow_fallocate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15allow_fallocate___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15allow_fallocate___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1501
 *     property allow_fallocate:
 *         def __get__(self):
 *             return self.opts.allow_fallocate             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_fallocate = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_fallocate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1500
 * 
 *     property allow_fallocate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_fallocate
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_fallocate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1502
 *         def __get__(self):
 *             return self.opts.allow_fallocate
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_fallocate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15allow_fallocate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15allow_fallocate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15allow_fallocate_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15allow_fallocate_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1503
 *             return self.opts.allow_fallocate
 *         def __set__(self, value):
 *             self.opts.allow_fallocate = value             # <<<<<<<<<<<<<<
 * 
 *     property is_fd_close_on_exec:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1503, __pyx_L1_error)
  __pyx_v_self->opts->allow_fallocate = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1502
 *         def __get__(self):
 *             return self.opts.allow_fallocate
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_fallocate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_fallocate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1506
 * 
 *     property is_fd_close_on_exec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1507
 *     property is_fd_close_on_exec:
 *         def __get__(self):
 *             return self.opts.is_fd_close_on_exec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.is_fd_close_on_exec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->is_fd_close_on_exec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1506
 * 
 *     property is_fd_close_on_exec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.is_fd_close_on_exec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1508
 *         def __get__(self):
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.is_fd_close_on_exec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1509
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):
 *             self.opts.is_fd_close_on_exec = value             # <<<<<<<<<<<<<<
 * 
 *     property stats_dump_period_sec:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1509, __pyx_L1_error)
  __pyx_v_self->opts->is_fd_close_on_exec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1508
 *         def __get__(self):
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.is_fd_close_on_exec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.is_fd_close_on_exec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1512
 * 
 *     property stats_dump_period_sec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1513
 *     property stats_dump_period_sec:
 *         def __get__(self):
 *             return self.opts.stats_dump_period_sec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.stats_dump_period_sec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->opts->stats_dump_period_sec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1512
 * 
 *     property stats_dump_period_sec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_dump_period_sec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1514
 *         def __get__(self):
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_dump_period_sec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1515
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):
 *             self.opts.stats_dump_period_sec = value             # <<<<<<<<<<<<<<
 * 
 *     property stats_persist_period_sec:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1515, __pyx_L1_error)
  __pyx_v_self->opts->stats_dump_period_sec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1514
 *         def __get__(self):
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_dump_period_sec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_dump_period_sec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1518
 * 
 *     property stats_persist_period_sec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_persist_period_sec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1519
 *     property stats_persist_period_sec:
 *         def __get__(self):
 *             return self.opts.stats_persist_period_sec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.stats_persist_period_sec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->opts->stats_persist_period_sec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1518
 * 
 *     property stats_persist_period_sec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_persist_period_sec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_persist_period_sec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1520
 *         def __get__(self):
 *             return self.opts.stats_persist_period_sec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_persist_period_sec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1521
 *             return self.opts.stats_persist_period_sec
 *         def __set__(self, value):
 *             self.opts.stats_persist_period_sec = value             # <<<<<<<<<<<<<<
 * 
 *     property persist_stats_to_disk:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1521, __pyx_L1_error)
  __pyx_v_self->opts->stats_persist_period_sec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1520
 *         def __get__(self):
 *             return self.opts.stats_persist_period_sec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_persist_period_sec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_persist_period_sec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1524
 * 
 *     property persist_stats_to_disk:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.persist_stats_to_disk
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1525
 *     property persist_stats_to_disk:
 *         def __get__(self):
 *             return self.opts.persist_stats_to_disk             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.persist_stats_to_disk = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->persist_stats_to_disk); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1524
 * 
 *     property persist_stats_to_disk:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.persist_stats_to_disk
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.persist_stats_to_disk.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1526
 *         def __get__(self):
 *             return self.opts.persist_stats_to_disk
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.persist_stats_to_disk = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1527
 *             return self.opts.persist_stats_to_disk
 *         def __set__(self, value):
 *             self.opts.persist_stats_to_disk = value             # <<<<<<<<<<<<<<
 * 
 *     property stats_history_buffer_size:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1527, __pyx_L1_error)
  __pyx_v_self->opts->persist_stats_to_disk = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1526
 *         def __get__(self):
 *             return self.opts.persist_stats_to_disk
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.persist_stats_to_disk = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.persist_stats_to_disk.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1530
 * 
 *     property stats_history_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_history_buffer_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1531
 *     property stats_history_buffer_size:
 *         def __get__(self):
 *             return self.opts.stats_history_buffer_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.stats_history_buffer_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->stats_history_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1530
 * 
 *     property stats_history_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_history_buffer_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_history_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1532
 *         def __get__(self):
 *             return self.opts.stats_history_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_history_buffer_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1533
 *             return self.opts.stats_history_buffer_size
 *         def __set__(self, value):
 *             self.opts.stats_history_buffer_size = value             # <<<<<<<<<<<<<<
 * 
 *     property advise_random_on_open:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1533, __pyx_L1_error)
  __pyx_v_self->opts->stats_history_buffer_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1532
 *         def __get__(self):
 *             return self.opts.stats_history_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_history_buffer_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_history_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1536
 * 
 *     property advise_random_on_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1537
 *     property advise_random_on_open:
 *         def __get__(self):
 *             return self.opts.advise_random_on_open             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.advise_random_on_open = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->advise_random_on_open); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1536
 * 
 *     property advise_random_on_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.advise_random_on_open.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1538
 *         def __get__(self):
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.advise_random_on_open = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1539
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):
 *             self.opts.advise_random_on_open = value             # <<<<<<<<<<<<<<
 * 
 *     property db_write_buffer_size:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1539, __pyx_L1_error)
  __pyx_v_self->opts->advise_random_on_open = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1538
 *         def __get__(self):
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.advise_random_on_open = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.advise_random_on_open.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1542
 * 
 *     property db_write_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.db_write_buffer_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1543
 *     property db_write_buffer_size:
 *         def __get__(self):
 *             return self.opts.db_write_buffer_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.db_write_buffer_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->db_write_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1542
 * 
 *     property db_write_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.db_write_buffer_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.db_write_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1544
 *         def __get__(self):
 *             return self.opts.db_write_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.db_write_buffer_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1545
 *             return self.opts.db_write_buffer_size
 *         def __set__(self, value):
 *             self.opts.db_write_buffer_size = value             # <<<<<<<<<<<<<<
 * 
 *   # TODO: need to remove -Wconversion to make this work
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1545, __pyx_L1_error)
  __pyx_v_self->opts->db_write_buffer_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1544
 *         def __get__(self):
 *             return self.opts.db_write_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.db_write_buffer_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.db_write_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1555
 * 
 *     property new_table_reader_for_compaction_inputs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.new_table_reader_for_compaction_inputs
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1556
 *     property new_table_reader_for_compaction_inputs:
 *         def __get__(self):
 *             return self.opts.new_table_reader_for_compaction_inputs             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.new_table_reader_for_compaction_inputs = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->new_table_reader_for_compaction_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1555
 * 
 *     property new_table_reader_for_compaction_inputs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.new_table_reader_for_compaction_inputs
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.new_table_reader_for_compaction_inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1557
 *         def __get__(self):
 *             return self.opts.new_table_reader_for_compaction_inputs
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.new_table_reader_for_compaction_inputs = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1558
 *             return self.opts.new_table_reader_for_compaction_inputs
 *         def __set__(self, value):
 *             self.opts.new_table_reader_for_compaction_inputs = value             # <<<<<<<<<<<<<<
 * 
 *     property compaction_readahead_size:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1558, __pyx_L1_error)
  __pyx_v_self->opts->new_table_reader_for_compaction_inputs = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1557
 *         def __get__(self):
 *             return self.opts.new_table_reader_for_compaction_inputs
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.new_table_reader_for_compaction_inputs = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.new_table_reader_for_compaction_inputs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1561
 * 
 *     property compaction_readahead_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.compaction_readahead_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1562
 *     property compaction_readahead_size:
 *         def __get__(self):
 *             return self.opts.compaction_readahead_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.compaction_readahead_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->compaction_readahead_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1561
 * 
 *     property compaction_readahead_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.compaction_readahead_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_readahead_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1563
 *         def __get__(self):
 *             return self.opts.compaction_readahead_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.compaction_readahead_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1564
 *             return self.opts.compaction_readahead_size
 *         def __set__(self, value):
 *             self.opts.compaction_readahead_size = value             # <<<<<<<<<<<<<<
 * 
 *     property random_access_max_buffer_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1564, __pyx_L1_error)
  __pyx_v_self->opts->compaction_readahead_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1563
 *         def __get__(self):
 *             return self.opts.compaction_readahead_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.compaction_readahead_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_readahead_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1567
 * 
 *     property random_access_max_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.random_access_max_buffer_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1568
 *     property random_access_max_buffer_size:
 *         def __get__(self):
 *             return self.opts.random_access_max_buffer_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.random_access_max_buffer_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->random_access_max_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1567
 * 
 *     property random_access_max_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.random_access_max_buffer_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.random_access_max_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1569
 *         def __get__(self):
 *             return self.opts.random_access_max_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.random_access_max_buffer_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1570
 *             return self.opts.random_access_max_buffer_size
 *         def __set__(self, value):
 *             self.opts.random_access_max_buffer_size = value             # <<<<<<<<<<<<<<
 * 
 *     property writable_file_max_buffer_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L1_error)
  __pyx_v_self->opts->random_access_max_buffer_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1569
 *         def __get__(self):
 *             return self.opts.random_access_max_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.random_access_max_buffer_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.random_access_max_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1573
 * 
 *     property writable_file_max_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.writable_file_max_buffer_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1574
 *     property writable_file_max_buffer_size:
 *         def __get__(self):
 *             return self.opts.writable_file_max_buffer_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.writable_file_max_buffer_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->writable_file_max_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1573
 * 
 *     property writable_file_max_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.writable_file_max_buffer_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.writable_file_max_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1575
 *         def __get__(self):
 *             return self.opts.writable_file_max_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.writable_file_max_buffer_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1576
 *             return self.opts.writable_file_max_buffer_size
 *         def __set__(self, value):
 *             self.opts.writable_file_max_buffer_size = value             # <<<<<<<<<<<<<<
 * 
 *     property use_adaptive_mutex:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1576, __pyx_L1_error)
  __pyx_v_self->opts->writable_file_max_buffer_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1575
 *         def __get__(self):
 *             return self.opts.writable_file_max_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.writable_file_max_buffer_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.writable_file_max_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1579
 * 
 *     property use_adaptive_mutex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1580
 *     property use_adaptive_mutex:
 *         def __get__(self):
 *             return self.opts.use_adaptive_mutex             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.use_adaptive_mutex = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->use_adaptive_mutex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1579
 * 
 *     property use_adaptive_mutex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_adaptive_mutex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1581
 *         def __get__(self):
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_adaptive_mutex = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1582
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):
 *             self.opts.use_adaptive_mutex = value             # <<<<<<<<<<<<<<
 * 
 *     property bytes_per_sync:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1582, __pyx_L1_error)
  __pyx_v_self->opts->use_adaptive_mutex = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1581
 *         def __get__(self):
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_adaptive_mutex = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_adaptive_mutex.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1585
 * 
 *     property bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1586
 *     property bytes_per_sync:
 *         def __get__(self):
 *             return self.opts.bytes_per_sync             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.bytes_per_sync = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->bytes_per_sync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1585
 * 
 *     property bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.bytes_per_sync.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1587
 *         def __get__(self):
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.bytes_per_sync = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1588
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):
 *             self.opts.bytes_per_sync = value             # <<<<<<<<<<<<<<
 * 
 *     property wal_bytes_per_sync:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1588, __pyx_L1_error)
  __pyx_v_self->opts->bytes_per_sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1587
 *         def __get__(self):
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.bytes_per_sync = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.bytes_per_sync.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1591
 * 
 *     property wal_bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.wal_bytes_per_sync
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1592
 *     property wal_bytes_per_sync:
 *         def __get__(self):
 *             return self.opts.wal_bytes_per_sync             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.wal_bytes_per_sync = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->wal_bytes_per_sync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1591
 * 
 *     property wal_bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.wal_bytes_per_sync
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_bytes_per_sync.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1593
 *         def __get__(self):
 *             return self.opts.wal_bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.wal_bytes_per_sync = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1594
 *             return self.opts.wal_bytes_per_sync
 *         def __set__(self, value):
 *             self.opts.wal_bytes_per_sync = value             # <<<<<<<<<<<<<<
 * 
 *     property strict_bytes_per_sync:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1594, __pyx_L1_error)
  __pyx_v_self->opts->wal_bytes_per_sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1593
 *         def __get__(self):
 *             return self.opts.wal_bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.wal_bytes_per_sync = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_bytes_per_sync.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1597
 * 
 *     property strict_bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.strict_bytes_per_sync
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1598
 *     property strict_bytes_per_sync:
 *         def __get__(self):
 *             return self.opts.strict_bytes_per_sync             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.strict_bytes_per_sync = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->strict_bytes_per_sync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1597
 * 
 *     property strict_bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.strict_bytes_per_sync
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.strict_bytes_per_sync.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1599
 *         def __get__(self):
 *             return self.opts.strict_bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.strict_bytes_per_sync = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1600
 *             return self.opts.strict_bytes_per_sync
 *         def __set__(self, value):
 *             self.opts.strict_bytes_per_sync = value             # <<<<<<<<<<<<<<
 * 
 *     property enable_thread_tracking:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1600, __pyx_L1_error)
  __pyx_v_self->opts->strict_bytes_per_sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1599
 *         def __get__(self):
 *             return self.opts.strict_bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.strict_bytes_per_sync = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.strict_bytes_per_sync.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1603
 * 
 *     property enable_thread_tracking:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_thread_tracking
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1604
 *     property enable_thread_tracking:
 *         def __get__(self):
 *             return self.opts.enable_thread_tracking             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.enable_thread_tracking = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->enable_thread_tracking); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1603
 * 
 *     property enable_thread_tracking:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_thread_tracking
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_thread_tracking.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1605
 *         def __get__(self):
 *             return self.opts.enable_thread_tracking
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_thread_tracking = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1606
 *             return self.opts.enable_thread_tracking
 *         def __set__(self, value):
 *             self.opts.enable_thread_tracking = value             # <<<<<<<<<<<<<<
 * 
 *     property delayed_write_rate:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1606, __pyx_L1_error)
  __pyx_v_self->opts->enable_thread_tracking = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1605
 *         def __get__(self):
 *             return self.opts.enable_thread_tracking
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_thread_tracking = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_thread_tracking.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1609
 * 
 *     property delayed_write_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.delayed_write_rate
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18delayed_write_rate___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18delayed_write_rate___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1610
 *     property delayed_write_rate:
 *         def __get__(self):
 *             return self.opts.delayed_write_rate             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.delayed_write_rate = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->delayed_write_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1609
 * 
 *     property delayed_write_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.delayed_write_rate
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.delayed_write_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1611
 *         def __get__(self):
 *             return self.opts.delayed_write_rate
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.delayed_write_rate = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1612
 *             return self.opts.delayed_write_rate
 *         def __set__(self, value):
 *             self.opts.delayed_write_rate = value             # <<<<<<<<<<<<<<
 * 
 *     property enable_pipelined_write:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1612, __pyx_L1_error)
  __pyx_v_self->opts->delayed_write_rate = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1611
 *         def __get__(self):
 *             return self.opts.delayed_write_rate
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.delayed_write_rate = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.delayed_write_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1615
 * 
 *     property enable_pipelined_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_pipelined_write
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1616
 *     property enable_pipelined_write:
 *         def __get__(self):
 *             return self.opts.enable_pipelined_write             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.enable_pipelined_write = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->enable_pipelined_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1615
 * 
 *     property enable_pipelined_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_pipelined_write
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_pipelined_write.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1617
 *         def __get__(self):
 *             return self.opts.enable_pipelined_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_pipelined_write = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1618
 *             return self.opts.enable_pipelined_write
 *         def __set__(self, value):
 *             self.opts.enable_pipelined_write = value             # <<<<<<<<<<<<<<
 * 
 *     property unordered_write:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1618, __pyx_L1_error)
  __pyx_v_self->opts->enable_pipelined_write = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1617
 *         def __get__(self):
 *             return self.opts.enable_pipelined_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_pipelined_write = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_pipelined_write.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1621
 * 
 *     property unordered_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.unordered_write
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15unordered_write_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15unordered_write_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15unordered_write___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15unordered_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1622
 *     property unordered_write:
 *         def __get__(self):
 *             return self.opts.unordered_write             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.unordered_write = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->unordered_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1621
 * 
 *     property unordered_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.unordered_write
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.unordered_write.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1623
 *         def __get__(self):
 *             return self.opts.unordered_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.unordered_write = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15unordered_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15unordered_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15unordered_write_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15unordered_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1624
 *             return self.opts.unordered_write
 *         def __set__(self, value):
 *             self.opts.unordered_write = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_concurrent_memtable_write:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L1_error)
  __pyx_v_self->opts->unordered_write = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1623
 *         def __get__(self):
 *             return self.opts.unordered_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.unordered_write = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.unordered_write.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1627
 * 
 *     property allow_concurrent_memtable_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1628
 *     property allow_concurrent_memtable_write:
 *         def __get__(self):
 *             return self.opts.allow_concurrent_memtable_write             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_concurrent_memtable_write = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_concurrent_memtable_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1627
 * 
 *     property allow_concurrent_memtable_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_concurrent_memtable_write.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1629
 *         def __get__(self):
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_concurrent_memtable_write = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1630
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):
 *             self.opts.allow_concurrent_memtable_write = value             # <<<<<<<<<<<<<<
 * 
 *     property enable_write_thread_adaptive_yield:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1630, __pyx_L1_error)
  __pyx_v_self->opts->allow_concurrent_memtable_write = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1629
 *         def __get__(self):
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_concurrent_memtable_write = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_concurrent_memtable_write.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1633
 * 
 *     property enable_write_thread_adaptive_yield:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1634
 *     property enable_write_thread_adaptive_yield:
 *         def __get__(self):
 *             return self.opts.enable_write_thread_adaptive_yield             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.enable_write_thread_adaptive_yield = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->enable_write_thread_adaptive_yield); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1633
 * 
 *     property enable_write_thread_adaptive_yield:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_write_thread_adaptive_yield.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1635
 *         def __get__(self):
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_write_thread_adaptive_yield = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1636
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):
 *             self.opts.enable_write_thread_adaptive_yield = value             # <<<<<<<<<<<<<<
 * 
 *     property max_write_batch_group_size_bytes:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1636, __pyx_L1_error)
  __pyx_v_self->opts->enable_write_thread_adaptive_yield = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1635
 *         def __get__(self):
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_write_thread_adaptive_yield = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_write_thread_adaptive_yield.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1639
 * 
 *     property max_write_batch_group_size_bytes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_write_batch_group_size_bytes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1640
 *     property max_write_batch_group_size_bytes:
 *         def __get__(self):
 *             return self.opts.max_write_batch_group_size_bytes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_write_batch_group_size_bytes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_write_batch_group_size_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1639
 * 
 *     property max_write_batch_group_size_bytes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_write_batch_group_size_bytes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_write_batch_group_size_bytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1641
 *         def __get__(self):
 *             return self.opts.max_write_batch_group_size_bytes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_write_batch_group_size_bytes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1642
 *             return self.opts.max_write_batch_group_size_bytes
 *         def __set__(self, value):
 *             self.opts.max_write_batch_group_size_bytes = value             # <<<<<<<<<<<<<<
 * 
 *     property write_thread_max_yield_usec:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1642, __pyx_L1_error)
  __pyx_v_self->opts->max_write_batch_group_size_bytes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1641
 *         def __get__(self):
 *             return self.opts.max_write_batch_group_size_bytes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_write_batch_group_size_bytes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_write_batch_group_size_bytes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1645
 * 
 *     property write_thread_max_yield_usec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_thread_max_yield_usec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1646
 *     property write_thread_max_yield_usec:
 *         def __get__(self):
 *             return self.opts.write_thread_max_yield_usec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.write_thread_max_yield_usec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->write_thread_max_yield_usec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1645
 * 
 *     property write_thread_max_yield_usec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_thread_max_yield_usec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_thread_max_yield_usec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1647
 *         def __get__(self):
 *             return self.opts.write_thread_max_yield_usec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_thread_max_yield_usec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1648
 *             return self.opts.write_thread_max_yield_usec
 *         def __set__(self, value):
 *             self.opts.write_thread_max_yield_usec = value             # <<<<<<<<<<<<<<
 * 
 *     property write_thread_slow_yield_usec:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1648, __pyx_L1_error)
  __pyx_v_self->opts->write_thread_max_yield_usec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1647
 *         def __get__(self):
 *             return self.opts.write_thread_max_yield_usec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_thread_max_yield_usec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_thread_max_yield_usec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1651
 * 
 *     property write_thread_slow_yield_usec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_thread_slow_yield_usec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1652
 *     property write_thread_slow_yield_usec:
 *         def __get__(self):
 *             return self.opts.write_thread_slow_yield_usec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.write_thread_slow_yield_usec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->write_thread_slow_yield_usec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1651
 * 
 *     property write_thread_slow_yield_usec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_thread_slow_yield_usec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_thread_slow_yield_usec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1653
 *         def __get__(self):
 *             return self.opts.write_thread_slow_yield_usec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_thread_slow_yield_usec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1654
 *             return self.opts.write_thread_slow_yield_usec
 *         def __set__(self, value):
 *             self.opts.write_thread_slow_yield_usec = value             # <<<<<<<<<<<<<<
 * 
 *     property skip_stats_update_on_db_open:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1654, __pyx_L1_error)
  __pyx_v_self->opts->write_thread_slow_yield_usec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1653
 *         def __get__(self):
 *             return self.opts.write_thread_slow_yield_usec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_thread_slow_yield_usec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_thread_slow_yield_usec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1657
 * 
 *     property skip_stats_update_on_db_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_stats_update_on_db_open
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1658
 *     property skip_stats_update_on_db_open:
 *         def __get__(self):
 *             return self.opts.skip_stats_update_on_db_open             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.skip_stats_update_on_db_open = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->skip_stats_update_on_db_open); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1657
 * 
 *     property skip_stats_update_on_db_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_stats_update_on_db_open
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.skip_stats_update_on_db_open.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1659
 *         def __get__(self):
 *             return self.opts.skip_stats_update_on_db_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_stats_update_on_db_open = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1660
 *             return self.opts.skip_stats_update_on_db_open
 *         def __set__(self, value):
 *             self.opts.skip_stats_update_on_db_open = value             # <<<<<<<<<<<<<<
 * 
 *     property skip_checking_sst_file_sizes_on_db_open:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1660, __pyx_L1_error)
  __pyx_v_self->opts->skip_stats_update_on_db_open = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1659
 *         def __get__(self):
 *             return self.opts.skip_stats_update_on_db_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_stats_update_on_db_open = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.skip_stats_update_on_db_open.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1663
 * 
 *     property skip_checking_sst_file_sizes_on_db_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_checking_sst_file_sizes_on_db_open
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1664
 *     property skip_checking_sst_file_sizes_on_db_open:
 *         def __get__(self):
 *             return self.opts.skip_checking_sst_file_sizes_on_db_open             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.skip_checking_sst_file_sizes_on_db_open = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->skip_checking_sst_file_sizes_on_db_open); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1663
 * 
 *     property skip_checking_sst_file_sizes_on_db_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_checking_sst_file_sizes_on_db_open
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.skip_checking_sst_file_sizes_on_db_open.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1665
 *         def __get__(self):
 *             return self.opts.skip_checking_sst_file_sizes_on_db_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_checking_sst_file_sizes_on_db_open = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1666
 *             return self.opts.skip_checking_sst_file_sizes_on_db_open
 *         def __set__(self, value):
 *             self.opts.skip_checking_sst_file_sizes_on_db_open = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_2pc:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1666, __pyx_L1_error)
  __pyx_v_self->opts->skip_checking_sst_file_sizes_on_db_open = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1665
 *         def __get__(self):
 *             return self.opts.skip_checking_sst_file_sizes_on_db_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_checking_sst_file_sizes_on_db_open = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.skip_checking_sst_file_sizes_on_db_open.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1669
 * 
 *     property allow_2pc:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_2pc
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9allow_2pc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9allow_2pc_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9allow_2pc___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9allow_2pc___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1670
 *     property allow_2pc:
 *         def __get__(self):
 *             return self.opts.allow_2pc             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_2pc = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_2pc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1669
 * 
 *     property allow_2pc:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_2pc
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_2pc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1671
 *         def __get__(self):
 *             return self.opts.allow_2pc
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_2pc = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9allow_2pc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9allow_2pc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9allow_2pc_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9allow_2pc_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1672
 *             return self.opts.allow_2pc
 *         def __set__(self, value):
 *             self.opts.allow_2pc = value             # <<<<<<<<<<<<<<
 * 
 *     property row_cache:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1672, __pyx_L1_error)
  __pyx_v_self->opts->allow_2pc = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1671
 *         def __get__(self):
 *             return self.opts.allow_2pc
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_2pc = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_2pc.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1675
 * 
 *     property row_cache:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_row_cache
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1676
 *     property row_cache:
 *         def __get__(self):
 *             return self.py_row_cache             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->py_row_cache);
  __pyx_r = ((PyObject *)__pyx_v_self->py_row_cache);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1675
 * 
 *     property row_cache:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_row_cache
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1678
 *             return self.py_row_cache
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value is None:
 *                 self.py_row_cache = None
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<rocksdb::Cache>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1679
 * 
 *         def __set__(self, value):
 *             if value is None:             # <<<<<<<<<<<<<<
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 */
  __pyx_t_1 = (__pyx_v_value == Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1680
 *         def __set__(self, value):
 *             if value is None:
 *                 self.py_row_cache = None             # <<<<<<<<<<<<<<
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->py_row_cache);
    __Pyx_DECREF((PyObject *)__pyx_v_self->py_row_cache);
    __pyx_v_self->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None);

    /* "rocksdb/_rocksdb.pyx":1681
 *             if value is None:
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()             # <<<<<<<<<<<<<<
 *             elif not isinstance(value, PyCache):
 *                 raise Exception("row_cache must be a Cache object")
 */
    try {
      __pyx_v_self->opts->row_cache.reset();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1681, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":1679
 * 
 *         def __set__(self, value):
 *             if value is None:             # <<<<<<<<<<<<<<
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1682
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):             # <<<<<<<<<<<<<<
 *                 raise Exception("row_cache must be a Cache object")
 *             else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyCache); 
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "rocksdb/_rocksdb.pyx":1683
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):
 *                 raise Exception("row_cache must be a Cache object")             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_row_cache = value
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1683, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1682
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):             # <<<<<<<<<<<<<<
 *                 raise Exception("row_cache must be a Cache object")
 *             else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1685
 *                 raise Exception("row_cache must be a Cache object")
 *             else:
 *                 self.py_row_cache = value             # <<<<<<<<<<<<<<
 *                 self.opts.row_cache = self.py_row_cache.get_cache()
 * 
 */
  /*else*/ {
    if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyCache))))) __PYX_ERR(0, 1685, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_value;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF((PyObject *)__pyx_v_self->py_row_cache);
    __Pyx_DECREF((PyObject *)__pyx_v_self->py_row_cache);
    __pyx_v_self->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1686
 *             else:
 *                 self.py_row_cache = value
 *                 self.opts.row_cache = self.py_row_cache.get_cache()             # <<<<<<<<<<<<<<
 * 
 *     property fail_if_options_file_error:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *)__pyx_v_self->py_row_cache->__pyx_vtab)->get_cache(__pyx_v_self->py_row_cache); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1686, __pyx_L1_error)
    __pyx_v_self->opts->row_cache = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1678
 *             return self.py_row_cache
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value is None:
 *                 self.py_row_cache = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.row_cache.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1689
 * 
 *     property fail_if_options_file_error:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.fail_if_options_file_error
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1690
 *     property fail_if_options_file_error:
 *         def __get__(self):
 *             return self.opts.fail_if_options_file_error             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.fail_if_options_file_error = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->fail_if_options_file_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1689
 * 
 *     property fail_if_options_file_error:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.fail_if_options_file_error
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.fail_if_options_file_error.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1691
 *         def __get__(self):
 *             return self.opts.fail_if_options_file_error
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.fail_if_options_file_error = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1692
 *             return self.opts.fail_if_options_file_error
 *         def __set__(self, value):
 *             self.opts.fail_if_options_file_error = value             # <<<<<<<<<<<<<<
 * 
 *     property dump_malloc_stats:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1692, __pyx_L1_error)
  __pyx_v_self->opts->fail_if_options_file_error = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1691
 *         def __get__(self):
 *             return self.opts.fail_if_options_file_error
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.fail_if_options_file_error = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.fail_if_options_file_error.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1695
 * 
 *     property dump_malloc_stats:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.dump_malloc_stats
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1696
 *     property dump_malloc_stats:
 *         def __get__(self):
 *             return self.opts.dump_malloc_stats             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.dump_malloc_stats = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->dump_malloc_stats); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1695
 * 
 *     property dump_malloc_stats:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.dump_malloc_stats
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.dump_malloc_stats.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1697
 *         def __get__(self):
 *             return self.opts.dump_malloc_stats
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.dump_malloc_stats = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1698
 *             return self.opts.dump_malloc_stats
 *         def __set__(self, value):
 *             self.opts.dump_malloc_stats = value             # <<<<<<<<<<<<<<
 * 
 *     property avoid_flush_during_recovery:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1698, __pyx_L1_error)
  __pyx_v_self->opts->dump_malloc_stats = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1697
 *         def __get__(self):
 *             return self.opts.dump_malloc_stats
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.dump_malloc_stats = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.dump_malloc_stats.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1701
 * 
 *     property avoid_flush_during_recovery:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.avoid_flush_during_recovery
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1702
 *     property avoid_flush_during_recovery:
 *         def __get__(self):
 *             return self.opts.avoid_flush_during_recovery             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.avoid_flush_during_recovery = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->avoid_flush_during_recovery); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1701
 * 
 *     property avoid_flush_during_recovery:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.avoid_flush_during_recovery
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.avoid_flush_during_recovery.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1703
 *         def __get__(self):
 *             return self.opts.avoid_flush_during_recovery
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.avoid_flush_during_recovery = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1704
 *             return self.opts.avoid_flush_during_recovery
 *         def __set__(self, value):
 *             self.opts.avoid_flush_during_recovery = value             # <<<<<<<<<<<<<<
 * 
 *     property avoid_flush_during_shutdown:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1704, __pyx_L1_error)
  __pyx_v_self->opts->avoid_flush_during_recovery = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1703
 *         def __get__(self):
 *             return self.opts.avoid_flush_during_recovery
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.avoid_flush_during_recovery = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.avoid_flush_during_recovery.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1707
 * 
 *     property avoid_flush_during_shutdown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.avoid_flush_during_shutdown
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1708
 *     property avoid_flush_during_shutdown:
 *         def __get__(self):
 *             return self.opts.avoid_flush_during_shutdown             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.avoid_flush_during_shutdown = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->avoid_flush_during_shutdown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1707
 * 
 *     property avoid_flush_during_shutdown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.avoid_flush_during_shutdown
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.avoid_flush_during_shutdown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1709
 *         def __get__(self):
 *             return self.opts.avoid_flush_during_shutdown
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.avoid_flush_during_shutdown = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1710
 *             return self.opts.avoid_flush_during_shutdown
 *         def __set__(self, value):
 *             self.opts.avoid_flush_during_shutdown = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_ingest_behind:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_v_self->opts->avoid_flush_during_shutdown = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1709
 *         def __get__(self):
 *             return self.opts.avoid_flush_during_shutdown
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.avoid_flush_during_shutdown = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.avoid_flush_during_shutdown.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1713
 * 
 *     property allow_ingest_behind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_ingest_behind
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1714
 *     property allow_ingest_behind:
 *         def __get__(self):
 *             return self.opts.allow_ingest_behind             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_ingest_behind = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_ingest_behind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1713
 * 
 *     property allow_ingest_behind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_ingest_behind
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_ingest_behind.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1715
 *         def __get__(self):
 *             return self.opts.allow_ingest_behind
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_ingest_behind = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1716
 *             return self.opts.allow_ingest_behind
 *         def __set__(self, value):
 *             self.opts.allow_ingest_behind = value             # <<<<<<<<<<<<<<
 * 
 *     property preserve_deletes:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L1_error)
  __pyx_v_self->opts->allow_ingest_behind = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1715
 *         def __get__(self):
 *             return self.opts.allow_ingest_behind
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_ingest_behind = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_ingest_behind.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1719
 * 
 *     property preserve_deletes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.preserve_deletes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16preserve_deletes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16preserve_deletes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16preserve_deletes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16preserve_deletes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1720
 *     property preserve_deletes:
 *         def __get__(self):
 *             return self.opts.preserve_deletes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.preserve_deletes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->preserve_deletes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1719
 * 
 *     property preserve_deletes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.preserve_deletes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.preserve_deletes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1721
 *         def __get__(self):
 *             return self.opts.preserve_deletes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.preserve_deletes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16preserve_deletes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16preserve_deletes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16preserve_deletes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16preserve_deletes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1722
 *             return self.opts.preserve_deletes
 *         def __set__(self, value):
 *             self.opts.preserve_deletes = value             # <<<<<<<<<<<<<<
 * 
 *     property two_write_queues:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1722, __pyx_L1_error)
  __pyx_v_self->opts->preserve_deletes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1721
 *         def __get__(self):
 *             return self.opts.preserve_deletes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.preserve_deletes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.preserve_deletes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1725
 * 
 *     property two_write_queues:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.two_write_queues
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16two_write_queues_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16two_write_queues_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16two_write_queues___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16two_write_queues___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1726
 *     property two_write_queues:
 *         def __get__(self):
 *             return self.opts.two_write_queues             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.two_write_queues = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->two_write_queues); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1725
 * 
 *     property two_write_queues:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.two_write_queues
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.two_write_queues.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1727
 *         def __get__(self):
 *             return self.opts.two_write_queues
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.two_write_queues = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16two_write_queues_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16two_write_queues_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16two_write_queues_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16two_write_queues_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1728
 *             return self.opts.two_write_queues
 *         def __set__(self, value):
 *             self.opts.two_write_queues = value             # <<<<<<<<<<<<<<
 * 
 *     property manual_wal_flush:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L1_error)
  __pyx_v_self->opts->two_write_queues = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1727
 *         def __get__(self):
 *             return self.opts.two_write_queues
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.two_write_queues = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.two_write_queues.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1731
 * 
 *     property manual_wal_flush:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.manual_wal_flush
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16manual_wal_flush___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16manual_wal_flush___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1732
 *     property manual_wal_flush:
 *         def __get__(self):
 *             return self.opts.manual_wal_flush             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.manual_wal_flush = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->manual_wal_flush); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1731
 * 
 *     property manual_wal_flush:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.manual_wal_flush
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.manual_wal_flush.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1733
 *         def __get__(self):
 *             return self.opts.manual_wal_flush
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.manual_wal_flush = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1734
 *             return self.opts.manual_wal_flush
 *         def __set__(self, value):
 *             self.opts.manual_wal_flush = value             # <<<<<<<<<<<<<<
 * 
 *     property atomic_flush:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1734, __pyx_L1_error)
  __pyx_v_self->opts->manual_wal_flush = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1733
 *         def __get__(self):
 *             return self.opts.manual_wal_flush
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.manual_wal_flush = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.manual_wal_flush.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1737
 * 
 *     property atomic_flush:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.atomic_flush
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_12atomic_flush_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_12atomic_flush_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_12atomic_flush___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_12atomic_flush___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1738
 *     property atomic_flush:
 *         def __get__(self):
 *             return self.opts.atomic_flush             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.atomic_flush = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->atomic_flush); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1737
 * 
 *     property atomic_flush:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.atomic_flush
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.atomic_flush.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1739
 *         def __get__(self):
 *             return self.opts.atomic_flush
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.atomic_flush = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_12atomic_flush_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_12atomic_flush_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_12atomic_flush_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_12atomic_flush_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1740
 *             return self.opts.atomic_flush
 *         def __set__(self, value):
 *             self.opts.atomic_flush = value             # <<<<<<<<<<<<<<
 * 
 *     property avoid_unnecessary_blocking_io:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1740, __pyx_L1_error)
  __pyx_v_self->opts->atomic_flush = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1739
 *         def __get__(self):
 *             return self.opts.atomic_flush
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.atomic_flush = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.atomic_flush.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1743
 * 
 *     property avoid_unnecessary_blocking_io:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.avoid_unnecessary_blocking_io
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1744
 *     property avoid_unnecessary_blocking_io:
 *         def __get__(self):
 *             return self.opts.avoid_unnecessary_blocking_io             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.avoid_unnecessary_blocking_io = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->avoid_unnecessary_blocking_io); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1743
 * 
 *     property avoid_unnecessary_blocking_io:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.avoid_unnecessary_blocking_io
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.avoid_unnecessary_blocking_io.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1745
 *         def __get__(self):
 *             return self.opts.avoid_unnecessary_blocking_io
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.avoid_unnecessary_blocking_io = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1746
 *             return self.opts.avoid_unnecessary_blocking_io
 *         def __set__(self, value):
 *             self.opts.avoid_unnecessary_blocking_io = value             # <<<<<<<<<<<<<<
 * 
 *     property write_dbid_to_manifest:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1746, __pyx_L1_error)
  __pyx_v_self->opts->avoid_unnecessary_blocking_io = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1745
 *         def __get__(self):
 *             return self.opts.avoid_unnecessary_blocking_io
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.avoid_unnecessary_blocking_io = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.avoid_unnecessary_blocking_io.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1749
 * 
 *     property write_dbid_to_manifest:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_dbid_to_manifest
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1750
 *     property write_dbid_to_manifest:
 *         def __get__(self):
 *             return self.opts.write_dbid_to_manifest             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.write_dbid_to_manifest = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->write_dbid_to_manifest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1749
 * 
 *     property write_dbid_to_manifest:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_dbid_to_manifest
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_dbid_to_manifest.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1751
 *         def __get__(self):
 *             return self.opts.write_dbid_to_manifest
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_dbid_to_manifest = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1752
 *             return self.opts.write_dbid_to_manifest
 *         def __set__(self, value):
 *             self.opts.write_dbid_to_manifest = value             # <<<<<<<<<<<<<<
 * 
 *     property log_readahead_size:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1752, __pyx_L1_error)
  __pyx_v_self->opts->write_dbid_to_manifest = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1751
 *         def __get__(self):
 *             return self.opts.write_dbid_to_manifest
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_dbid_to_manifest = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_dbid_to_manifest.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1755
 * 
 *     property log_readahead_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.log_readahead_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18log_readahead_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18log_readahead_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18log_readahead_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18log_readahead_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1756
 *     property log_readahead_size:
 *         def __get__(self):
 *             return self.opts.log_readahead_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.log_readahead_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->log_readahead_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1755
 * 
 *     property log_readahead_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.log_readahead_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.log_readahead_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1757
 *         def __get__(self):
 *             return self.opts.log_readahead_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.log_readahead_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18log_readahead_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18log_readahead_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18log_readahead_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18log_readahead_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1758
 *             return self.opts.log_readahead_size
 *         def __set__(self, value):
 *             self.opts.log_readahead_size = value             # <<<<<<<<<<<<<<
 * 
 *     property best_efforts_recovery:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1758, __pyx_L1_error)
  __pyx_v_self->opts->log_readahead_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1757
 *         def __get__(self):
 *             return self.opts.log_readahead_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.log_readahead_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.log_readahead_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1761
 * 
 *     property best_efforts_recovery:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.best_efforts_recovery
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1762
 *     property best_efforts_recovery:
 *         def __get__(self):
 *             return self.opts.best_efforts_recovery             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.best_efforts_recovery = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->best_efforts_recovery); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1761
 * 
 *     property best_efforts_recovery:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.best_efforts_recovery
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.best_efforts_recovery.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1763
 *         def __get__(self):
 *             return self.opts.best_efforts_recovery
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.best_efforts_recovery = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1764
 *             return self.opts.best_efforts_recovery
 *         def __set__(self, value):
 *             self.opts.best_efforts_recovery = value             # <<<<<<<<<<<<<<
 * 
 * cdef class TransactionDBOptions(object):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1764, __pyx_L1_error)
  __pyx_v_self->opts->best_efforts_recovery = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1763
 *         def __get__(self):
 *             return self.opts.best_efforts_recovery
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.best_efforts_recovery = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.best_efforts_recovery.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_7Options_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7Options_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_8__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_7Options_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7Options_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1770
 *     cdef cpp_bool in_use
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.opts = new transaction_db.TransactionDBOptions()
 *         self.in_use = False
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1770, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::TransactionDBOptions *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1771
 * 
 *     def __cinit__(self):
 *         self.opts = new transaction_db.TransactionDBOptions()             # <<<<<<<<<<<<<<
 *         self.in_use = False
 * 
 */
  try {
    __pyx_t_1 = new rocksdb::TransactionDBOptions();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1771, __pyx_L1_error)
  }
  __pyx_v_self->opts = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1772
 *     def __cinit__(self):
 *         self.opts = new transaction_db.TransactionDBOptions()
 *         self.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->in_use = 0;

  /* "rocksdb/_rocksdb.pyx":1770
 *     cdef cpp_bool in_use
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.opts = new transaction_db.TransactionDBOptions()
 *         self.in_use = False
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1774
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.opts == NULL:
 *             del self.opts
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1775
 * 
 *     def __dealloc__(self):
 *         if not self.opts == NULL:             # <<<<<<<<<<<<<<
 *             del self.opts
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->opts == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1776
 *     def __dealloc__(self):
 *         if not self.opts == NULL:
 *             del self.opts             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, **kwargs):
 */
    delete __pyx_v_self->opts;

    /* "rocksdb/_rocksdb.pyx":1775
 * 
 *     def __dealloc__(self):
 *         if not self.opts == NULL:             # <<<<<<<<<<<<<<
 *             del self.opts
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1774
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.opts == NULL:
 *             del self.opts
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1778
 *             del self.opts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         for key, value in kwargs.items():
 *             setattr(self, key, value)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1778, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (__pyx_kwds) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_4__init__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":1779
 * 
 *     def __init__(self, **kwargs):
 *         for key, value in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "rocksdb/_rocksdb.pyx":1780
 *     def __init__(self, **kwargs):
 *         for key, value in kwargs.items():
 *             setattr(self, key, value)             # <<<<<<<<<<<<<<
 * 
 *     property max_num_locks:
 */
    __pyx_t_8 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1780, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1778
 *             del self.opts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         for key, value in kwargs.items():
 *             setattr(self, key, value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1783
 * 
 *     property max_num_locks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_num_locks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1784
 *     property max_num_locks:
 *         def __get__(self):
 *             return self.opts.max_num_locks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_num_locks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->opts->max_num_locks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1783
 * 
 *     property max_num_locks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_num_locks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.max_num_locks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1785
 *         def __get__(self):
 *             return self.opts.max_num_locks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_num_locks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1786
 *             return self.opts.max_num_locks
 *         def __set__(self, value):
 *             self.opts.max_num_locks = value             # <<<<<<<<<<<<<<
 * 
 *     property max_num_deadlocks:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1786, __pyx_L1_error)
  __pyx_v_self->opts->max_num_locks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1785
 *         def __get__(self):
 *             return self.opts.max_num_locks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_num_locks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.max_num_locks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1789
 * 
 *     property max_num_deadlocks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_num_deadlocks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1790
 *     property max_num_deadlocks:
 *         def __get__(self):
 *             return self.opts.max_num_deadlocks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_num_deadlocks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->opts->max_num_deadlocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1789
 * 
 *     property max_num_deadlocks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_num_deadlocks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.max_num_deadlocks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1791
 *         def __get__(self):
 *             return self.opts.max_num_deadlocks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_num_deadlocks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1792
 *             return self.opts.max_num_deadlocks
 *         def __set__(self, value):
 *             self.opts.max_num_deadlocks = value             # <<<<<<<<<<<<<<
 * 
 *     property num_stripes:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1792, __pyx_L1_error)
  __pyx_v_self->opts->max_num_deadlocks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1791
 *         def __get__(self):
 *             return self.opts.max_num_deadlocks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_num_deadlocks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.max_num_deadlocks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1795
 * 
 *     property num_stripes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.num_stripes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1796
 *     property num_stripes:
 *         def __get__(self):
 *             return self.opts.num_stripes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.num_stripes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->num_stripes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1795
 * 
 *     property num_stripes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.num_stripes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.num_stripes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1797
 *         def __get__(self):
 *             return self.opts.num_stripes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.num_stripes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1798
 *             return self.opts.num_stripes
 *         def __set__(self, value):
 *             self.opts.num_stripes = value             # <<<<<<<<<<<<<<
 * 
 *     property transaction_lock_timeout:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1798, __pyx_L1_error)
  __pyx_v_self->opts->num_stripes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1797
 *         def __get__(self):
 *             return self.opts.num_stripes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.num_stripes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.num_stripes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1801
 * 
 *     property transaction_lock_timeout:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.transaction_lock_timeout
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1802
 *     property transaction_lock_timeout:
 *         def __get__(self):
 *             return self.opts.transaction_lock_timeout             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.transaction_lock_timeout = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->opts->transaction_lock_timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1801
 * 
 *     property transaction_lock_timeout:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.transaction_lock_timeout
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.transaction_lock_timeout.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1803
 *         def __get__(self):
 *             return self.opts.transaction_lock_timeout
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.transaction_lock_timeout = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1804
 *             return self.opts.transaction_lock_timeout
 *         def __set__(self, value):
 *             self.opts.transaction_lock_timeout = value             # <<<<<<<<<<<<<<
 * 
 *     property default_lock_timeout:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1804, __pyx_L1_error)
  __pyx_v_self->opts->transaction_lock_timeout = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1803
 *         def __get__(self):
 *             return self.opts.transaction_lock_timeout
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.transaction_lock_timeout = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.transaction_lock_timeout.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1807
 * 
 *     property default_lock_timeout:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.default_lock_timeout
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1808
 *     property default_lock_timeout:
 *         def __get__(self):
 *             return self.opts.default_lock_timeout             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.default_lock_timeout = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->opts->default_lock_timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1807
 * 
 *     property default_lock_timeout:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.default_lock_timeout
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.default_lock_timeout.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1809
 *         def __get__(self):
 *             return self.opts.default_lock_timeout
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.default_lock_timeout = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1810
 *             return self.opts.default_lock_timeout
 *         def __set__(self, value):
 *             self.opts.default_lock_timeout = value             # <<<<<<<<<<<<<<
 * 
 *     # TODO property custom_mutex_factory
 */
  __pyx_t_1 = __Pyx_PyInt_As_int64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1810, __pyx_L1_error)
  __pyx_v_self->opts->default_lock_timeout = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1809
 *         def __get__(self):
 *             return self.opts.default_lock_timeout
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.default_lock_timeout = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.default_lock_timeout.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1814
 *     # TODO property custom_mutex_factory
 *     property write_policy:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:
 *                 return 'write_committed'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1815
 *     property write_policy:
 *         def __get__(self):
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:             # <<<<<<<<<<<<<<
 *                 return 'write_committed'
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:
 */
  __pyx_t_1 = (__pyx_v_self->opts->write_policy == rocksdb::WRITE_COMMITTED);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1816
 *         def __get__(self):
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:
 *                 return 'write_committed'             # <<<<<<<<<<<<<<
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:
 *                 return 'write_prepared'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_write_committed);
    __pyx_r = __pyx_n_u_write_committed;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1815
 *     property write_policy:
 *         def __get__(self):
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:             # <<<<<<<<<<<<<<
 *                 return 'write_committed'
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1817
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:
 *                 return 'write_committed'
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:             # <<<<<<<<<<<<<<
 *                 return 'write_prepared'
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:
 */
  __pyx_t_1 = (__pyx_v_self->opts->write_policy == rocksdb::WRITE_PREPARED);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1818
 *                 return 'write_committed'
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:
 *                 return 'write_prepared'             # <<<<<<<<<<<<<<
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:
 *                 return 'write_unprepared'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_write_prepared);
    __pyx_r = __pyx_n_u_write_prepared;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1817
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:
 *                 return 'write_committed'
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:             # <<<<<<<<<<<<<<
 *                 return 'write_prepared'
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1819
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:
 *                 return 'write_prepared'
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:             # <<<<<<<<<<<<<<
 *                 return 'write_unprepared'
 *             raise InvalidArgument("Unknown write policy")
 */
  __pyx_t_1 = (__pyx_v_self->opts->write_policy == rocksdb::WRITE_UNPREPARED);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1820
 *                 return 'write_prepared'
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:
 *                 return 'write_unprepared'             # <<<<<<<<<<<<<<
 *             raise InvalidArgument("Unknown write policy")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_write_unprepared);
    __pyx_r = __pyx_n_u_write_unprepared;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1819
 *             if self.opts.write_policy == transaction_db.WRITE_PREPARED:
 *                 return 'write_prepared'
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:             # <<<<<<<<<<<<<<
 *                 return 'write_unprepared'
 *             raise InvalidArgument("Unknown write policy")
 */
  }

  /* "rocksdb/_rocksdb.pyx":1821
 *             if self.opts.write_policy == transaction_db.WRITE_UNPREPARED:
 *                 return 'write_unprepared'
 *             raise InvalidArgument("Unknown write policy")             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, str value):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_Unknown_write_policy};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1821, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1814
 *     # TODO property custom_mutex_factory
 *     property write_policy:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.write_policy == transaction_db.WRITE_COMMITTED:
 *                 return 'write_committed'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.write_policy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1823
 *             raise InvalidArgument("Unknown write policy")
 * 
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             if value == 'write_committed':
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyUnicode_Type), 1, "value", 1))) __PYX_ERR(0, 1823, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1824
 * 
 *         def __set__(self, str value):
 *             if value == 'write_committed':             # <<<<<<<<<<<<<<
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 *             elif value == 'write_prepared':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_write_committed, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1824, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1825
 *         def __set__(self, str value):
 *             if value == 'write_committed':
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED             # <<<<<<<<<<<<<<
 *             elif value == 'write_prepared':
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED
 */
    __pyx_v_self->opts->write_policy = rocksdb::WRITE_COMMITTED;

    /* "rocksdb/_rocksdb.pyx":1824
 * 
 *         def __set__(self, str value):
 *             if value == 'write_committed':             # <<<<<<<<<<<<<<
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 *             elif value == 'write_prepared':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1826
 *             if value == 'write_committed':
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 *             elif value == 'write_prepared':             # <<<<<<<<<<<<<<
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED
 *             elif value == 'write_unprepared':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_write_prepared, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1826, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1827
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 *             elif value == 'write_prepared':
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED             # <<<<<<<<<<<<<<
 *             elif value == 'write_unprepared':
 *                 self.opts.write_policy = transaction_db.WRITE_UNPREPARED
 */
    __pyx_v_self->opts->write_policy = rocksdb::WRITE_PREPARED;

    /* "rocksdb/_rocksdb.pyx":1826
 *             if value == 'write_committed':
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 *             elif value == 'write_prepared':             # <<<<<<<<<<<<<<
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED
 *             elif value == 'write_unprepared':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1828
 *             elif value == 'write_prepared':
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED
 *             elif value == 'write_unprepared':             # <<<<<<<<<<<<<<
 *                 self.opts.write_policy = transaction_db.WRITE_UNPREPARED
 *             else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_write_unprepared, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1828, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":1829
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED
 *             elif value == 'write_unprepared':
 *                 self.opts.write_policy = transaction_db.WRITE_UNPREPARED             # <<<<<<<<<<<<<<
 *             else:
 *                 raise InvalidArgument("Unknown write policy")
 */
    __pyx_v_self->opts->write_policy = rocksdb::WRITE_UNPREPARED;

    /* "rocksdb/_rocksdb.pyx":1828
 *             elif value == 'write_prepared':
 *                 self.opts.write_policy = transaction_db.WRITE_PREPARED
 *             elif value == 'write_unprepared':             # <<<<<<<<<<<<<<
 *                 self.opts.write_policy = transaction_db.WRITE_UNPREPARED
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1831
 *                 self.opts.write_policy = transaction_db.WRITE_UNPREPARED
 *             else:
 *                 raise InvalidArgument("Unknown write policy")             # <<<<<<<<<<<<<<
 * 
 *     property rollback_merge_operands:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_Unknown_write_policy};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1831, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1823
 *             raise InvalidArgument("Unknown write policy")
 * 
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             if value == 'write_committed':
 *                 self.opts.write_policy = transaction_db.WRITE_COMMITTED
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.write_policy.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1834
 * 
 *     property rollback_merge_operands:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.rollback_merge_operands
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1835
 *     property rollback_merge_operands:
 *         def __get__(self):
 *             return self.opts.rollback_merge_operands             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.rollback_merge_operands = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->rollback_merge_operands); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1834
 * 
 *     property rollback_merge_operands:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.rollback_merge_operands
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.rollback_merge_operands.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1836
 *         def __get__(self):
 *             return self.opts.rollback_merge_operands
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.rollback_merge_operands = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1837
 *             return self.opts.rollback_merge_operands
 *         def __set__(self, value):
 *             self.opts.rollback_merge_operands = value             # <<<<<<<<<<<<<<
 * 
 *     property skip_concurrency_control:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1837, __pyx_L1_error)
  __pyx_v_self->opts->rollback_merge_operands = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1836
 *         def __get__(self):
 *             return self.opts.rollback_merge_operands
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.rollback_merge_operands = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.rollback_merge_operands.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1840
 * 
 *     property skip_concurrency_control:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_concurrency_control
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1841
 *     property skip_concurrency_control:
 *         def __get__(self):
 *             return self.opts.skip_concurrency_control             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.skip_concurrency_control = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->skip_concurrency_control); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1840
 * 
 *     property skip_concurrency_control:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_concurrency_control
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.skip_concurrency_control.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1842
 *         def __get__(self):
 *             return self.opts.skip_concurrency_control
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_concurrency_control = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1843
 *             return self.opts.skip_concurrency_control
 *         def __set__(self, value):
 *             self.opts.skip_concurrency_control = value             # <<<<<<<<<<<<<<
 * 
 *     property default_write_batch_flush_threshold:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1843, __pyx_L1_error)
  __pyx_v_self->opts->skip_concurrency_control = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1842
 *         def __get__(self):
 *             return self.opts.skip_concurrency_control
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_concurrency_control = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.skip_concurrency_control.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1846
 * 
 *     property default_write_batch_flush_threshold:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.default_write_batch_flush_threshold
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1847
 *     property default_write_batch_flush_threshold:
 *         def __get__(self):
 *             return self.opts.default_write_batch_flush_threshold             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.default_write_batch_flush_threshold = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->opts->default_write_batch_flush_threshold); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1846
 * 
 *     property default_write_batch_flush_threshold:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.default_write_batch_flush_threshold
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.default_write_batch_flush_threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1848
 *         def __get__(self):
 *             return self.opts.default_write_batch_flush_threshold
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.default_write_batch_flush_threshold = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1849
 *             return self.opts.default_write_batch_flush_threshold
 *         def __set__(self, value):
 *             self.opts.default_write_batch_flush_threshold = value             # <<<<<<<<<<<<<<
 * 
 * # Forward declaration
 */
  __pyx_t_1 = __Pyx_PyInt_As_int64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1849, __pyx_L1_error)
  __pyx_v_self->opts->default_write_batch_flush_threshold = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1848
 *         def __get__(self):
 *             return self.opts.default_write_batch_flush_threshold
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.default_write_batch_flush_threshold = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.default_write_batch_flush_threshold.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_20TransactionDBOptions_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_6__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_20TransactionDBOptions_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_8__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20TransactionDBOptions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDBOptions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1865
 *     cdef db.WriteBatch* batch
 * 
 *     def __cinit__(self, data=None):             # <<<<<<<<<<<<<<
 *         self.batch = NULL
 *         if data is not None:
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1865, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1865, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1865, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1865, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_data);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_data) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  rocksdb::WriteBatch *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1866
 * 
 *     def __cinit__(self, data=None):
 *         self.batch = NULL             # <<<<<<<<<<<<<<
 *         if data is not None:
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 */
  __pyx_v_self->batch = NULL;

  /* "rocksdb/_rocksdb.pyx":1867
 *     def __cinit__(self, data=None):
 *         self.batch = NULL
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 *         else:
 */
  __pyx_t_1 = (__pyx_v_data != Py_None);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1868
 *         self.batch = NULL
 *         if data is not None:
 *             self.batch = new db.WriteBatch(bytes_to_string(data))             # <<<<<<<<<<<<<<
 *         else:
 *             self.batch = new db.WriteBatch()
 */
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1868, __pyx_L1_error)
    try {
      __pyx_t_3 = new rocksdb::WriteBatch(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1868, __pyx_L1_error)
    }
    __pyx_v_self->batch = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1867
 *     def __cinit__(self, data=None):
 *         self.batch = NULL
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1870
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 *         else:
 *             self.batch = new db.WriteBatch()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new rocksdb::WriteBatch();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1870, __pyx_L1_error)
    }
    __pyx_v_self->batch = __pyx_t_3;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1865
 *     cdef db.WriteBatch* batch
 * 
 *     def __cinit__(self, data=None):             # <<<<<<<<<<<<<<
 *         self.batch = NULL
 *         if data is not None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1872
 *             self.batch = new db.WriteBatch()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.batch == NULL:
 *             del self.batch
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1873
 * 
 *     def __dealloc__(self):
 *         if not self.batch == NULL:             # <<<<<<<<<<<<<<
 *             del self.batch
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->batch == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1874
 *     def __dealloc__(self):
 *         if not self.batch == NULL:
 *             del self.batch             # <<<<<<<<<<<<<<
 * 
 *     def put(self, key, value):
 */
    delete __pyx_v_self->batch;

    /* "rocksdb/_rocksdb.pyx":1873
 * 
 *     def __dealloc__(self):
 *         if not self.batch == NULL:             # <<<<<<<<<<<<<<
 *             del self.batch
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1872
 *             self.batch = new db.WriteBatch()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.batch == NULL:
 *             del self.batch
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1876
 *             del self.batch
 * 
 *     def put(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_5put = {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1876, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1876, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1876, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, 1); __PYX_ERR(0, 1876, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "put") < 0)) __PYX_ERR(0, 1876, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1876, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_4put(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_4put(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  rocksdb::ColumnFamilyHandle *__pyx_t_6;
  rocksdb::Slice __pyx_t_7;
  rocksdb::Slice __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("put", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":1877
 * 
 *     def put(self, key, value):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL             # <<<<<<<<<<<<<<
 *         if isinstance(key, tuple):
 *             column_family, key = key
 */
  __pyx_v_cf_handle = NULL;

  /* "rocksdb/_rocksdb.pyx":1878
 *     def put(self, key, value):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1879
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *         # nullptr is default family
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1879, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1879, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1879, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1879, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1879, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1880
 *         if isinstance(key, tuple):
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 *         # nullptr is default family
 *         self.batch.Put(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 1880, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_6 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 1880, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":1878
 *     def put(self, key, value):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1882
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *         # nullptr is default family
 *         self.batch.Put(cf_handle, bytes_to_slice(key), bytes_to_slice(value))             # <<<<<<<<<<<<<<
 * 
 *     def merge(self, key, value):
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1882, __pyx_L1_error)
  __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1882, __pyx_L1_error)
  try {
    __pyx_v_self->batch->Put(__pyx_v_cf_handle, __pyx_t_7, __pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1882, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1876
 *             del self.batch
 * 
 *     def put(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1884
 *         self.batch.Put(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def merge(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_7merge = {"merge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1884, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1884, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1884, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("merge", 1, 2, 2, 1); __PYX_ERR(0, 1884, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "merge") < 0)) __PYX_ERR(0, 1884, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1884, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_6merge(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_6merge(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  rocksdb::ColumnFamilyHandle *__pyx_t_6;
  rocksdb::Slice __pyx_t_7;
  rocksdb::Slice __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":1885
 * 
 *     def merge(self, key, value):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL             # <<<<<<<<<<<<<<
 *         if isinstance(key, tuple):
 *             column_family, key = key
 */
  __pyx_v_cf_handle = NULL;

  /* "rocksdb/_rocksdb.pyx":1886
 *     def merge(self, key, value):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1887
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *         # nullptr is default family
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1887, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1887, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1887, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1888
 *         if isinstance(key, tuple):
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 *         # nullptr is default family
 *         self.batch.Merge(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 1888, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_6 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 1888, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":1886
 *     def merge(self, key, value):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1890
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *         # nullptr is default family
 *         self.batch.Merge(cf_handle, bytes_to_slice(key), bytes_to_slice(value))             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, key):
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1890, __pyx_L1_error)
  __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1890, __pyx_L1_error)
  try {
    __pyx_v_self->batch->Merge(__pyx_v_cf_handle, __pyx_t_7, __pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1890, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1884
 *         self.batch.Put(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def merge(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1892
 *         self.batch.Merge(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def delete(self, key):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_9delete = {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1892, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1892, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "delete") < 0)) __PYX_ERR(0, 1892, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1892, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_8delete(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_8delete(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key) {
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  rocksdb::ColumnFamilyHandle *__pyx_t_6;
  rocksdb::Slice __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":1893
 * 
 *     def delete(self, key):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL             # <<<<<<<<<<<<<<
 *         if isinstance(key, tuple):
 *             column_family, key = key
 */
  __pyx_v_cf_handle = NULL;

  /* "rocksdb/_rocksdb.pyx":1894
 *     def delete(self, key):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1895
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *         # nullptr is default family
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1895, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1895, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1895, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1896
 *         if isinstance(key, tuple):
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 *         # nullptr is default family
 *         self.batch.Delete(cf_handle, bytes_to_slice(key))
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 1896, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_6 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 1896, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":1894
 *     def delete(self, key):
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1898
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *         # nullptr is default family
 *         self.batch.Delete(cf_handle, bytes_to_slice(key))             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1898, __pyx_L1_error)
  try {
    __pyx_v_self->batch->Delete(__pyx_v_cf_handle, __pyx_t_7);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1898, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1892
 *         self.batch.Merge(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def delete(self, key):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1900
 *         self.batch.Delete(cf_handle, bytes_to_slice(key))
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.batch.Clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_11clear = {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1900, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clear", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_10clear(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_10clear(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "rocksdb/_rocksdb.pyx":1901
 * 
 *     def clear(self):
 *         self.batch.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def data(self):
 */
  try {
    __pyx_v_self->batch->Clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1901, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1900
 *         self.batch.Delete(cf_handle, bytes_to_slice(key))
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.batch.Clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1903
 *         self.batch.Clear()
 * 
 *     def data(self):             # <<<<<<<<<<<<<<
 *         return string_to_bytes(self.batch.Data())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_13data = {"data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("data (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1903, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("data", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "data", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_12data(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_12data(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::string const > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("data", 0);

  /* "rocksdb/_rocksdb.pyx":1904
 * 
 *     def data(self):
 *         return string_to_bytes(self.batch.Data())             # <<<<<<<<<<<<<<
 * 
 *     def count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->batch->Data();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1904, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1903
 *         self.batch.Clear()
 * 
 *     def data(self):             # <<<<<<<<<<<<<<
 *         return string_to_bytes(self.batch.Data())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1906
 *         return string_to_bytes(self.batch.Data())
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self.batch.Count()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_15count = {"count", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1906, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("count", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "count", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_14count(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_14count(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "rocksdb/_rocksdb.pyx":1907
 * 
 *     def count(self):
 *         return self.batch.Count()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->batch->Count();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1907, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1906
 *         return string_to_bytes(self.batch.Data())
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self.batch.Count()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1909
 *         return self.batch.Count()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return WriteBatchIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_16__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_16__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":1910
 * 
 *     def __iter__(self):
 *         return WriteBatchIterator(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1909
 *         return self.batch.Count()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return WriteBatchIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_18__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_20__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1921
 *     cdef size_t pos
 * 
 *     def __init__(self, WriteBatch batch):             # <<<<<<<<<<<<<<
 *         cdef Status st
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1921, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_batch,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_batch)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1921, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1921, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_batch), __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, 1, "batch", 0))) __PYX_ERR(0, 1921, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self), __pyx_v_batch);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator___init__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch) {
  rocksdb::Status __pyx_v_st;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":1924
 *         cdef Status st
 * 
 *         self.batch = batch             # <<<<<<<<<<<<<<
 *         self.pos = 0
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_batch);
  __Pyx_GIVEREF((PyObject *)__pyx_v_batch);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->batch);
  __Pyx_DECREF((PyObject *)__pyx_v_self->batch);
  __pyx_v_self->batch = __pyx_v_batch;

  /* "rocksdb/_rocksdb.pyx":1925
 * 
 *         self.batch = batch
 *         self.pos = 0             # <<<<<<<<<<<<<<
 * 
 *         st = db.get_batch_items(batch.batch, cython.address(self.items))
 */
  __pyx_v_self->pos = 0;

  /* "rocksdb/_rocksdb.pyx":1927
 *         self.pos = 0
 * 
 *         st = db.get_batch_items(batch.batch, cython.address(self.items))             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
  __pyx_v_st = py_rocks::get_batch_items(__pyx_v_batch->batch, (&__pyx_v_self->items));

  /* "rocksdb/_rocksdb.pyx":1928
 * 
 *         st = db.get_batch_items(batch.batch, cython.address(self.items))
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1921
 *     cdef size_t pos
 * 
 *     def __init__(self, WriteBatch batch):             # <<<<<<<<<<<<<<
 *         cdef Status st
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1930
 *         check_status(st)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_2__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_2__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":1931
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1930
 *         check_status(st)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1933
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.pos == self.items.size():
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_4__next__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_4__next__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self) {
  PyObject *__pyx_v_op = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_error_without_exception = 0; /* StopIteration */
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "rocksdb/_rocksdb.pyx":1934
 * 
 *     def __next__(self):
 *         if self.pos == self.items.size():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  __pyx_t_1 = (__pyx_v_self->pos == __pyx_v_self->items.size());
  if (unlikely(__pyx_t_1)) {

    /* "rocksdb/_rocksdb.pyx":1935
 *     def __next__(self):
 *         if self.pos == self.items.size():
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         cdef str op
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "rocksdb/_rocksdb.pyx":1934
 * 
 *     def __next__(self):
 *         if self.pos == self.items.size():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1939
 *         cdef str op
 * 
 *         if self.items[self.pos].op == db.BatchItemOpPut:             # <<<<<<<<<<<<<<
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 */
  __pyx_t_1 = ((__pyx_v_self->items[__pyx_v_self->pos]).op == py_rocks::RecordItemsHandler::Optype::PutRecord);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1940
 * 
 *         if self.items[self.pos].op == db.BatchItemOpPut:
 *             op = "Put"             # <<<<<<<<<<<<<<
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"
 */
    __Pyx_INCREF(__pyx_n_u_Put);
    __pyx_v_op = __pyx_n_u_Put;

    /* "rocksdb/_rocksdb.pyx":1939
 *         cdef str op
 * 
 *         if self.items[self.pos].op == db.BatchItemOpPut:             # <<<<<<<<<<<<<<
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1941
 *         if self.items[self.pos].op == db.BatchItemOpPut:
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:             # <<<<<<<<<<<<<<
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 */
  __pyx_t_1 = ((__pyx_v_self->items[__pyx_v_self->pos]).op == py_rocks::RecordItemsHandler::Optype::MergeRecord);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1942
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"             # <<<<<<<<<<<<<<
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 *             op = "Delete"
 */
    __Pyx_INCREF(__pyx_n_u_Merge);
    __pyx_v_op = __pyx_n_u_Merge;

    /* "rocksdb/_rocksdb.pyx":1941
 *         if self.items[self.pos].op == db.BatchItemOpPut:
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:             # <<<<<<<<<<<<<<
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1943
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:             # <<<<<<<<<<<<<<
 *             op = "Delete"
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->items[__pyx_v_self->pos]).op == py_rocks::RecordItemsHandler::Optype::DeleteRecord);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1944
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 *             op = "Delete"             # <<<<<<<<<<<<<<
 * 
 *         if self.items[self.pos].column_family_id != 0:  # Column Family is set
 */
    __Pyx_INCREF(__pyx_n_u_Delete);
    __pyx_v_op = __pyx_n_u_Delete;

    /* "rocksdb/_rocksdb.pyx":1943
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:             # <<<<<<<<<<<<<<
 *             op = "Delete"
 * 
 */
  }
  __pyx_L4:;

  /* "rocksdb/_rocksdb.pyx":1946
 *             op = "Delete"
 * 
 *         if self.items[self.pos].column_family_id != 0:  # Column Family is set             # <<<<<<<<<<<<<<
 *             ret = (
 *                 op,
 */
  __pyx_t_1 = ((__pyx_v_self->items[__pyx_v_self->pos]).column_family_id != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1948
 *         if self.items[self.pos].column_family_id != 0:  # Column Family is set
 *             ret = (
 *                 op,             # <<<<<<<<<<<<<<
 *                 (
 *                     self.items[self.pos].column_family_id,
 */
    if (unlikely(!__pyx_v_op)) { __Pyx_RaiseUnboundLocalError("op"); __PYX_ERR(0, 1948, __pyx_L1_error) }

    /* "rocksdb/_rocksdb.pyx":1950
 *                 op,
 *                 (
 *                     self.items[self.pos].column_family_id,             # <<<<<<<<<<<<<<
 *                     slice_to_bytes(self.items[self.pos].key)
 *                 ),
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t((__pyx_v_self->items[__pyx_v_self->pos]).column_family_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "rocksdb/_rocksdb.pyx":1951
 *                 (
 *                     self.items[self.pos].column_family_id,
 *                     slice_to_bytes(self.items[self.pos].key)             # <<<<<<<<<<<<<<
 *                 ),
 *                 slice_to_bytes(self.items[self.pos].value)
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_self->items[__pyx_v_self->pos]).key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "rocksdb/_rocksdb.pyx":1950
 *                 op,
 *                 (
 *                     self.items[self.pos].column_family_id,             # <<<<<<<<<<<<<<
 *                     slice_to_bytes(self.items[self.pos].key)
 *                 ),
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 1950, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3)) __PYX_ERR(0, 1950, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1953
 *                     slice_to_bytes(self.items[self.pos].key)
 *                 ),
 *                 slice_to_bytes(self.items[self.pos].value)             # <<<<<<<<<<<<<<
 *             )
 *         else:
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_self->items[__pyx_v_self->pos]).value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "rocksdb/_rocksdb.pyx":1948
 *         if self.items[self.pos].column_family_id != 0:  # Column Family is set
 *             ret = (
 *                 op,             # <<<<<<<<<<<<<<
 *                 (
 *                     self.items[self.pos].column_family_id,
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_op);
    __Pyx_GIVEREF(__pyx_v_op);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_op)) __PYX_ERR(0, 1948, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4)) __PYX_ERR(0, 1948, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3)) __PYX_ERR(0, 1948, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_v_ret = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":1946
 *             op = "Delete"
 * 
 *         if self.items[self.pos].column_family_id != 0:  # Column Family is set             # <<<<<<<<<<<<<<
 *             ret = (
 *                 op,
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":1957
 *         else:
 *             ret = (
 *                 op,             # <<<<<<<<<<<<<<
 *                 slice_to_bytes(self.items[self.pos].key),
 *                 slice_to_bytes(self.items[self.pos].value)
 */
  /*else*/ {
    if (unlikely(!__pyx_v_op)) { __Pyx_RaiseUnboundLocalError("op"); __PYX_ERR(0, 1957, __pyx_L1_error) }

    /* "rocksdb/_rocksdb.pyx":1958
 *             ret = (
 *                 op,
 *                 slice_to_bytes(self.items[self.pos].key),             # <<<<<<<<<<<<<<
 *                 slice_to_bytes(self.items[self.pos].value)
 *             )
 */
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_self->items[__pyx_v_self->pos]).key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "rocksdb/_rocksdb.pyx":1959
 *                 op,
 *                 slice_to_bytes(self.items[self.pos].key),
 *                 slice_to_bytes(self.items[self.pos].value)             # <<<<<<<<<<<<<<
 *             )
 *         self.pos += 1
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_self->items[__pyx_v_self->pos]).value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "rocksdb/_rocksdb.pyx":1957
 *         else:
 *             ret = (
 *                 op,             # <<<<<<<<<<<<<<
 *                 slice_to_bytes(self.items[self.pos].key),
 *                 slice_to_bytes(self.items[self.pos].value)
 */
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_op);
    __Pyx_GIVEREF(__pyx_v_op);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_op)) __PYX_ERR(0, 1957, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2)) __PYX_ERR(0, 1957, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3)) __PYX_ERR(0, 1957, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_v_ret = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L5:;

  /* "rocksdb/_rocksdb.pyx":1961
 *                 slice_to_bytes(self.items[self.pos].value)
 *             )
 *         self.pos += 1             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + 1);

  /* "rocksdb/_rocksdb.pyx":1962
 *             )
 *         self.pos += 1
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * @cython.no_gc_clear
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1933
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.pos == self.items.size():
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (!__pyx_error_without_exception) {
    __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_18WriteBatchIterator_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_6__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_items_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_18WriteBatchIterator_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_8__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_items_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1974
 *     cdef string db_path
 * 
 *     def __cinit__(self, db_name, Options opts, dict column_families=None,             # <<<<<<<<<<<<<<
 *                   read_only=False, secondary_path=None, *args, **kwargs):
 *         cdef Status st
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_2DB_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_2DB_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_db_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts = 0;
  PyObject *__pyx_v_column_families = 0;
  PyObject *__pyx_v_read_only = 0;
  PyObject *__pyx_v_secondary_path = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 1974, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 5, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_name,&__pyx_n_s_opts,&__pyx_n_s_column_families,&__pyx_n_s_read_only,&__pyx_n_s_secondary_path,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject*)Py_None));

    /* "rocksdb/_rocksdb.pyx":1975
 * 
 *     def __cinit__(self, db_name, Options opts, dict column_families=None,
 *                   read_only=False, secondary_path=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef bytes default_cf_name = db.kDefaultColumnFamilyName
 */
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1974, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opts)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1974, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, 1); __PYX_ERR(0, 1974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_families);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_read_only);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_secondary_path);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1974, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 5) ? kwd_pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1974, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_db_name = values[0];
    __pyx_v_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)values[1]);
    __pyx_v_column_families = ((PyObject*)values[2]);
    __pyx_v_read_only = values[3];
    __pyx_v_secondary_path = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1974, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opts), __pyx_ptype_7rocksdb_8_rocksdb_Options, 1, "opts", 0))) __PYX_ERR(0, 1974, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_families), (&PyDict_Type), 1, "column_families", 1))) __PYX_ERR(0, 1974, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_db_name, __pyx_v_opts, __pyx_v_column_families, __pyx_v_read_only, __pyx_v_secondary_path, __pyx_v_args, __pyx_v_kwargs);

  /* "rocksdb/_rocksdb.pyx":1974
 *     cdef string db_path
 * 
 *     def __cinit__(self, db_name, Options opts, dict column_families=None,             # <<<<<<<<<<<<<<
 *                   read_only=False, secondary_path=None, *args, **kwargs):
 *         cdef Status st
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_2DB___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts, PyObject *__pyx_v_column_families, PyObject *__pyx_v_read_only, PyObject *__pyx_v_secondary_path, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  rocksdb::Status __pyx_v_st;
  PyObject *__pyx_v_default_cf_name = 0;
  PyObject *__pyx_v_cf_name = NULL;
  PyObject *__pyx_v_cf_options = NULL;
  std::string __pyx_v_primary_db;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  rocksdb::ColumnFamilyDescriptor __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  rocksdb::Status __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1977
 *                   read_only=False, secondary_path=None, *args, **kwargs):
 *         cdef Status st
 *         cdef bytes default_cf_name = db.kDefaultColumnFamilyName             # <<<<<<<<<<<<<<
 *         self.wrapped_db = NULL
 *         self.opts = None
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(rocksdb::kDefaultColumnFamilyName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_default_cf_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1978
 *         cdef Status st
 *         cdef bytes default_cf_name = db.kDefaultColumnFamilyName
 *         self.wrapped_db = NULL             # <<<<<<<<<<<<<<
 *         self.opts = None
 *         self.cf_handles = []
 */
  __pyx_v_self->wrapped_db = NULL;

  /* "rocksdb/_rocksdb.pyx":1979
 *         cdef bytes default_cf_name = db.kDefaultColumnFamilyName
 *         self.wrapped_db = NULL
 *         self.opts = None             # <<<<<<<<<<<<<<
 *         self.cf_handles = []
 *         self.cf_options = []
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->opts);
  __Pyx_DECREF((PyObject *)__pyx_v_self->opts);
  __pyx_v_self->opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)Py_None);

  /* "rocksdb/_rocksdb.pyx":1980
 *         self.wrapped_db = NULL
 *         self.opts = None
 *         self.cf_handles = []             # <<<<<<<<<<<<<<
 *         self.cf_options = []
 *         if isinstance(secondary_path, str):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cf_handles);
  __Pyx_DECREF(__pyx_v_self->cf_handles);
  __pyx_v_self->cf_handles = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1981
 *         self.opts = None
 *         self.cf_handles = []
 *         self.cf_options = []             # <<<<<<<<<<<<<<
 *         if isinstance(secondary_path, str):
 *             self.db_path = path_to_string(secondary_path)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cf_options);
  __Pyx_DECREF(__pyx_v_self->cf_options);
  __pyx_v_self->cf_options = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1982
 *         self.cf_handles = []
 *         self.cf_options = []
 *         if isinstance(secondary_path, str):             # <<<<<<<<<<<<<<
 *             self.db_path = path_to_string(secondary_path)
 *         else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_secondary_path); 
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1983
 *         self.cf_options = []
 *         if isinstance(secondary_path, str):
 *             self.db_path = path_to_string(secondary_path)             # <<<<<<<<<<<<<<
 *         else:
 *             self.db_path = path_to_string(db_name)
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_secondary_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1983, __pyx_L1_error)
    __pyx_v_self->db_path = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

    /* "rocksdb/_rocksdb.pyx":1982
 *         self.cf_handles = []
 *         self.cf_options = []
 *         if isinstance(secondary_path, str):             # <<<<<<<<<<<<<<
 *             self.db_path = path_to_string(secondary_path)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1985
 *             self.db_path = path_to_string(secondary_path)
 *         else:
 *             self.db_path = path_to_string(db_name)             # <<<<<<<<<<<<<<
 * 
 *         if opts.in_use:
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1985, __pyx_L1_error)
    __pyx_v_self->db_path = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1987
 *             self.db_path = path_to_string(db_name)
 * 
 *         if opts.in_use:             # <<<<<<<<<<<<<<
 *             raise InvalidArgument(
 *                 "Options object is already used by another DB")
 */
  __pyx_t_2 = (__pyx_v_opts->__pyx_base.in_use != 0);
  if (unlikely(__pyx_t_2)) {

    /* "rocksdb/_rocksdb.pyx":1988
 * 
 *         if opts.in_use:
 *             raise InvalidArgument(             # <<<<<<<<<<<<<<
 *                 "Options object is already used by another DB")
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_Options_object_is_already_used_b};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1988, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1988, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1987
 *             self.db_path = path_to_string(db_name)
 * 
 *         if opts.in_use:             # <<<<<<<<<<<<<<
 *             raise InvalidArgument(
 *                 "Options object is already used by another DB")
 */
  }

  /* "rocksdb/_rocksdb.pyx":1991
 *                 "Options object is already used by another DB")
 * 
 *         if not column_families or default_cf_name not in column_families:             # <<<<<<<<<<<<<<
 *             # Always add the default column family
 *             self.column_family_descriptors.push_back(
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_column_families); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1991, __pyx_L1_error)
  __pyx_t_8 = (!__pyx_t_7);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_2 = __pyx_t_8;
    goto __pyx_L6_bool_binop_done;
  }
  if (unlikely(__pyx_v_column_families == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1991, __pyx_L1_error)
  }
  __pyx_t_8 = (__Pyx_PyDict_ContainsTF(__pyx_v_default_cf_name, __pyx_v_column_families, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1991, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_8;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1994
 *             # Always add the default column family
 *             self.column_family_descriptors.push_back(
 *                 db.ColumnFamilyDescriptor(             # <<<<<<<<<<<<<<
 *                     db.kDefaultColumnFamilyName,
 *                     options.ColumnFamilyOptions(deref(opts.opts))
 */
    try {
      __pyx_t_9 = rocksdb::ColumnFamilyDescriptor(rocksdb::kDefaultColumnFamilyName, rocksdb::ColumnFamilyOptions((*__pyx_v_opts->opts)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1994, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":1993
 *         if not column_families or default_cf_name not in column_families:
 *             # Always add the default column family
 *             self.column_family_descriptors.push_back(             # <<<<<<<<<<<<<<
 *                 db.ColumnFamilyDescriptor(
 *                     db.kDefaultColumnFamilyName,
 */
    try {
      __pyx_v_self->column_family_descriptors.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1993, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":1999
 *                 )
 *             )
 *             self.cf_options.append(None)  # Since they are the same as db             # <<<<<<<<<<<<<<
 *         if column_families:
 *             for cf_name, cf_options in column_families.items():
 */
    if (unlikely(__pyx_v_self->cf_options == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 1999, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->cf_options, Py_None); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1999, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1991
 *                 "Options object is already used by another DB")
 * 
 *         if not column_families or default_cf_name not in column_families:             # <<<<<<<<<<<<<<
 *             # Always add the default column family
 *             self.column_family_descriptors.push_back(
 */
  }

  /* "rocksdb/_rocksdb.pyx":2000
 *             )
 *             self.cf_options.append(None)  # Since they are the same as db
 *         if column_families:             # <<<<<<<<<<<<<<
 *             for cf_name, cf_options in column_families.items():
 *                 if not isinstance(cf_name, bytes):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_column_families); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2000, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2001
 *             self.cf_options.append(None)  # Since they are the same as db
 *         if column_families:
 *             for cf_name, cf_options in column_families.items():             # <<<<<<<<<<<<<<
 *                 if not isinstance(cf_name, bytes):
 *                     raise TypeError(
 */
    __pyx_t_11 = 0;
    if (unlikely(__pyx_v_column_families == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 2001, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_column_families, 1, __pyx_n_s_items, (&__pyx_t_12), (&__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
    while (1) {
      __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_12, &__pyx_t_11, &__pyx_t_4, &__pyx_t_5, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_13 == 0)) break;
      if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 2001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_cf_name, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_cf_options, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "rocksdb/_rocksdb.pyx":2002
 *         if column_families:
 *             for cf_name, cf_options in column_families.items():
 *                 if not isinstance(cf_name, bytes):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         f"column family name {cf_name!r} is not of type {bytes}!"
 */
      __pyx_t_2 = PyBytes_Check(__pyx_v_cf_name); 
      __pyx_t_8 = (!__pyx_t_2);
      if (unlikely(__pyx_t_8)) {

        /* "rocksdb/_rocksdb.pyx":2004
 *                 if not isinstance(cf_name, bytes):
 *                     raise TypeError(
 *                         f"column family name {cf_name!r} is not of type {bytes}!"             # <<<<<<<<<<<<<<
 *                     )
 *                 if not isinstance(cf_options, ColumnFamilyOptions):
 */
        __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_column_family_name);
        __pyx_t_14 += 19;
        __Pyx_GIVEREF(__pyx_kp_u_column_family_name);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_column_family_name);
        __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_cf_name), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_not_of_type);
        __pyx_t_14 += 16;
        __Pyx_GIVEREF(__pyx_kp_u_is_not_of_type);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_is_not_of_type);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(((PyObject *)(&PyBytes_Type)), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__6);
        __pyx_t_14 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__6);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__6);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "rocksdb/_rocksdb.pyx":2003
 *             for cf_name, cf_options in column_families.items():
 *                 if not isinstance(cf_name, bytes):
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         f"column family name {cf_name!r} is not of type {bytes}!"
 *                     )
 */
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2003, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 2003, __pyx_L1_error)

        /* "rocksdb/_rocksdb.pyx":2002
 *         if column_families:
 *             for cf_name, cf_options in column_families.items():
 *                 if not isinstance(cf_name, bytes):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         f"column family name {cf_name!r} is not of type {bytes}!"
 */
      }

      /* "rocksdb/_rocksdb.pyx":2006
 *                         f"column family name {cf_name!r} is not of type {bytes}!"
 *                     )
 *                 if not isinstance(cf_options, ColumnFamilyOptions):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         f"column family options {cf_options!r} is not of type "
 */
      __pyx_t_8 = __Pyx_TypeCheck(__pyx_v_cf_options, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions); 
      __pyx_t_2 = (!__pyx_t_8);
      if (unlikely(__pyx_t_2)) {

        /* "rocksdb/_rocksdb.pyx":2008
 *                 if not isinstance(cf_options, ColumnFamilyOptions):
 *                     raise TypeError(
 *                         f"column family options {cf_options!r} is not of type "             # <<<<<<<<<<<<<<
 *                         f"{ColumnFamilyOptions}!"
 *                     )
 */
        __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_column_family_options);
        __pyx_t_14 += 22;
        __Pyx_GIVEREF(__pyx_kp_u_column_family_options);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_column_family_options);
        __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_cf_options), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_not_of_type);
        __pyx_t_14 += 16;
        __Pyx_GIVEREF(__pyx_kp_u_is_not_of_type);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_is_not_of_type);

        /* "rocksdb/_rocksdb.pyx":2009
 *                     raise TypeError(
 *                         f"column family options {cf_options!r} is not of type "
 *                         f"{ColumnFamilyOptions}!"             # <<<<<<<<<<<<<<
 *                     )
 *                 if (<ColumnFamilyOptions>cf_options).in_use:
 */
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2009, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__6);
        __pyx_t_14 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__6);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__6);

        /* "rocksdb/_rocksdb.pyx":2008
 *                 if not isinstance(cf_options, ColumnFamilyOptions):
 *                     raise TypeError(
 *                         f"column family options {cf_options!r} is not of type "             # <<<<<<<<<<<<<<
 *                         f"{ColumnFamilyOptions}!"
 *                     )
 */
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "rocksdb/_rocksdb.pyx":2007
 *                     )
 *                 if not isinstance(cf_options, ColumnFamilyOptions):
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         f"column family options {cf_options!r} is not of type "
 *                         f"{ColumnFamilyOptions}!"
 */
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2007, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 2007, __pyx_L1_error)

        /* "rocksdb/_rocksdb.pyx":2006
 *                         f"column family name {cf_name!r} is not of type {bytes}!"
 *                     )
 *                 if not isinstance(cf_options, ColumnFamilyOptions):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         f"column family options {cf_options!r} is not of type "
 */
      }

      /* "rocksdb/_rocksdb.pyx":2011
 *                         f"{ColumnFamilyOptions}!"
 *                     )
 *                 if (<ColumnFamilyOptions>cf_options).in_use:             # <<<<<<<<<<<<<<
 *                     raise Exception(
 *                         f"ColumnFamilyOptions object for {cf_name} is already "
 */
      __pyx_t_2 = (((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_cf_options)->in_use != 0);
      if (unlikely(__pyx_t_2)) {

        /* "rocksdb/_rocksdb.pyx":2013
 *                 if (<ColumnFamilyOptions>cf_options).in_use:
 *                     raise Exception(
 *                         f"ColumnFamilyOptions object for {cf_name} is already "             # <<<<<<<<<<<<<<
 *                         "used by another Column Family"
 *                     )
 */
        __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2013, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_ColumnFamilyOptions_object_for);
        __pyx_t_14 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_ColumnFamilyOptions_object_for);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_ColumnFamilyOptions_object_for);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_cf_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2013, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_already_used_by_another_Colu);
        __pyx_t_14 += 41;
        __Pyx_GIVEREF(__pyx_kp_u_is_already_used_by_another_Colu);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_is_already_used_by_another_Colu);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2013, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "rocksdb/_rocksdb.pyx":2012
 *                     )
 *                 if (<ColumnFamilyOptions>cf_options).in_use:
 *                     raise Exception(             # <<<<<<<<<<<<<<
 *                         f"ColumnFamilyOptions object for {cf_name} is already "
 *                         "used by another Column Family"
 */
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 2012, __pyx_L1_error)

        /* "rocksdb/_rocksdb.pyx":2011
 *                         f"{ColumnFamilyOptions}!"
 *                     )
 *                 if (<ColumnFamilyOptions>cf_options).in_use:             # <<<<<<<<<<<<<<
 *                     raise Exception(
 *                         f"ColumnFamilyOptions object for {cf_name} is already "
 */
      }

      /* "rocksdb/_rocksdb.pyx":2016
 *                         "used by another Column Family"
 *                     )
 *                 (<ColumnFamilyOptions>cf_options).in_use = True             # <<<<<<<<<<<<<<
 *                 self.column_family_descriptors.push_back(
 *                     db.ColumnFamilyDescriptor(
 */
      ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_cf_options)->in_use = 1;

      /* "rocksdb/_rocksdb.pyx":2019
 *                 self.column_family_descriptors.push_back(
 *                     db.ColumnFamilyDescriptor(
 *                         cf_name,             # <<<<<<<<<<<<<<
 *                         deref((<ColumnFamilyOptions>cf_options).copts)
 *                     )
 */
      __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cf_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2019, __pyx_L1_error)

      /* "rocksdb/_rocksdb.pyx":2018
 *                 (<ColumnFamilyOptions>cf_options).in_use = True
 *                 self.column_family_descriptors.push_back(
 *                     db.ColumnFamilyDescriptor(             # <<<<<<<<<<<<<<
 *                         cf_name,
 *                         deref((<ColumnFamilyOptions>cf_options).copts)
 */
      try {
        __pyx_t_9 = rocksdb::ColumnFamilyDescriptor(__pyx_t_3, (*((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_v_cf_options)->copts));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2018, __pyx_L1_error)
      }

      /* "rocksdb/_rocksdb.pyx":2017
 *                     )
 *                 (<ColumnFamilyOptions>cf_options).in_use = True
 *                 self.column_family_descriptors.push_back(             # <<<<<<<<<<<<<<
 *                     db.ColumnFamilyDescriptor(
 *                         cf_name,
 */
      try {
        __pyx_v_self->column_family_descriptors.push_back(__pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2017, __pyx_L1_error)
      }

      /* "rocksdb/_rocksdb.pyx":2023
 *                     )
 *                 )
 *                 self.cf_options.append(cf_options)             # <<<<<<<<<<<<<<
 *         if type(self) != DB:
 *             return
 */
      if (unlikely(__pyx_v_self->cf_options == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 2023, __pyx_L1_error)
      }
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->cf_options, __pyx_v_cf_options); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2023, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2000
 *             )
 *             self.cf_options.append(None)  # Since they are the same as db
 *         if column_families:             # <<<<<<<<<<<<<<
 *             for cf_name, cf_options in column_families.items():
 *                 if not isinstance(cf_name, bytes):
 */
  }

  /* "rocksdb/_rocksdb.pyx":2024
 *                 )
 *                 self.cf_options.append(cf_options)
 *         if type(self) != DB:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(secondary_path, str):
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2025
 *                 self.cf_options.append(cf_options)
 *         if type(self) != DB:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(secondary_path, str):
 *             primary_db = path_to_string(db_name)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2024
 *                 )
 *                 self.cf_options.append(cf_options)
 *         if type(self) != DB:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(secondary_path, str):
 */
  }

  /* "rocksdb/_rocksdb.pyx":2026
 *         if type(self) != DB:
 *             return
 *         if isinstance(secondary_path, str):             # <<<<<<<<<<<<<<
 *             primary_db = path_to_string(db_name)
 *             with nogil:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_secondary_path); 
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2027
 *             return
 *         if isinstance(secondary_path, str):
 *             primary_db = path_to_string(db_name)             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = db.DB_OpenSecondary_ColumnFamilies(
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2027, __pyx_L1_error)
    __pyx_v_primary_db = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

    /* "rocksdb/_rocksdb.pyx":2028
 *         if isinstance(secondary_path, str):
 *             primary_db = path_to_string(db_name)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_OpenSecondary_ColumnFamilies(
 *                     deref(opts.opts),
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2029
 *             primary_db = path_to_string(db_name)
 *             with nogil:
 *                 st = db.DB_OpenSecondary_ColumnFamilies(             # <<<<<<<<<<<<<<
 *                     deref(opts.opts),
 *                     primary_db,
 */
          try {
            __pyx_t_16 = rocksdb::DB::OpenAsSecondary((*__pyx_v_opts->opts), __pyx_v_primary_db, __pyx_v_self->db_path, __pyx_v_self->column_family_descriptors, (&__pyx_v_self->column_family_handles), (&__pyx_v_self->wrapped_db));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2029, __pyx_L17_error)
          }
          __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_16);
        }

        /* "rocksdb/_rocksdb.pyx":2028
 *         if isinstance(secondary_path, str):
 *             primary_db = path_to_string(db_name)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_OpenSecondary_ColumnFamilies(
 *                     deref(opts.opts),
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L18;
          }
          __pyx_L17_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L18:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2026
 *         if type(self) != DB:
 *             return
 *         if isinstance(secondary_path, str):             # <<<<<<<<<<<<<<
 *             primary_db = path_to_string(db_name)
 *             with nogil:
 */
    goto __pyx_L15;
  }

  /* "rocksdb/_rocksdb.pyx":2036
 *                     &self.column_family_handles,
 *                     &self.wrapped_db)
 *         elif read_only:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = db.DB_OpenForReadOnly_ColumnFamilies(
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_read_only); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2036, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2037
 *                     &self.wrapped_db)
 *         elif read_only:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_OpenForReadOnly_ColumnFamilies(
 *                     deref(opts.opts),
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2038
 *         elif read_only:
 *             with nogil:
 *                 st = db.DB_OpenForReadOnly_ColumnFamilies(             # <<<<<<<<<<<<<<
 *                     deref(opts.opts),
 *                     self.db_path,
 */
          try {
            __pyx_t_16 = rocksdb::DB::OpenForReadOnly((*__pyx_v_opts->opts), __pyx_v_self->db_path, __pyx_v_self->column_family_descriptors, (&__pyx_v_self->column_family_handles), (&__pyx_v_self->wrapped_db), 0);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2038, __pyx_L20_error)
          }
          __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_16);
        }

        /* "rocksdb/_rocksdb.pyx":2037
 *                     &self.wrapped_db)
 *         elif read_only:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_OpenForReadOnly_ColumnFamilies(
 *                     deref(opts.opts),
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L21;
          }
          __pyx_L20_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L21:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2036
 *                     &self.column_family_handles,
 *                     &self.wrapped_db)
 *         elif read_only:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = db.DB_OpenForReadOnly_ColumnFamilies(
 */
    goto __pyx_L15;
  }

  /* "rocksdb/_rocksdb.pyx":2046
 *                     False)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_Open_ColumnFamilies(
 *                     deref(opts.opts),
 */
  /*else*/ {
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2047
 *         else:
 *             with nogil:
 *                 st = db.DB_Open_ColumnFamilies(             # <<<<<<<<<<<<<<
 *                     deref(opts.opts),
 *                     self.db_path,
 */
          try {
            __pyx_t_16 = rocksdb::DB::Open((*__pyx_v_opts->opts), __pyx_v_self->db_path, __pyx_v_self->column_family_descriptors, (&__pyx_v_self->column_family_handles), (&__pyx_v_self->wrapped_db));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2047, __pyx_L23_error)
          }
          __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_16);
        }

        /* "rocksdb/_rocksdb.pyx":2046
 *                     False)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_Open_ColumnFamilies(
 *                     deref(opts.opts),
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L24;
          }
          __pyx_L23_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L24:;
        }
    }
  }
  __pyx_L15:;

  /* "rocksdb/_rocksdb.pyx":2053
 *                     &self.column_family_handles,
 *                     &self.wrapped_db)
 *         self.post_init_steps(st, opts)             # <<<<<<<<<<<<<<
 * 
 *     cdef post_init_steps(self, Status st, Options opts):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->post_init_steps(__pyx_v_self, __pyx_v_st, __pyx_v_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1974
 *     cdef string db_path
 * 
 *     def __cinit__(self, db_name, Options opts, dict column_families=None,             # <<<<<<<<<<<<<<
 *                   read_only=False, secondary_path=None, *args, **kwargs):
 *         cdef Status st
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_default_cf_name);
  __Pyx_XDECREF(__pyx_v_cf_name);
  __Pyx_XDECREF(__pyx_v_cf_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2055
 *         self.post_init_steps(st, opts)
 * 
 *     cdef post_init_steps(self, Status st, Options opts):             # <<<<<<<<<<<<<<
 *         check_status(st)
 *         self.setup_handles()
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_2DB_post_init_steps(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, rocksdb::Status __pyx_v_st, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("post_init_steps", 0);

  /* "rocksdb/_rocksdb.pyx":2056
 * 
 *     cdef post_init_steps(self, Status st, Options opts):
 *         check_status(st)             # <<<<<<<<<<<<<<
 *         self.setup_handles()
 *         self.inject_loggers(opts)
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2057
 *     cdef post_init_steps(self, Status st, Options opts):
 *         check_status(st)
 *         self.setup_handles()             # <<<<<<<<<<<<<<
 *         self.inject_loggers(opts)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->setup_handles(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2058
 *         check_status(st)
 *         self.setup_handles()
 *         self.inject_loggers(opts)             # <<<<<<<<<<<<<<
 * 
 *     cdef setup_handles(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->inject_loggers(__pyx_v_self, __pyx_v_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2055
 *         self.post_init_steps(st, opts)
 * 
 *     cdef post_init_steps(self, Status st, Options opts):             # <<<<<<<<<<<<<<
 *         check_status(st)
 *         self.setup_handles()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.post_init_steps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2060
 *         self.inject_loggers(opts)
 * 
 *     cdef setup_handles(self):             # <<<<<<<<<<<<<<
 *         for handle in self.column_family_handles:
 *             wrapper = _ColumnFamilyHandle.from_handle_ptr(handle)
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_2DB_setup_handles(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  rocksdb::ColumnFamilyHandle *__pyx_v_handle;
  PyObject *__pyx_v_wrapper = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<rocksdb::ColumnFamilyHandle *> ::iterator __pyx_t_1;
  rocksdb::ColumnFamilyHandle *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup_handles", 0);

  /* "rocksdb/_rocksdb.pyx":2061
 * 
 *     cdef setup_handles(self):
 *         for handle in self.column_family_handles:             # <<<<<<<<<<<<<<
 *             wrapper = _ColumnFamilyHandle.from_handle_ptr(handle)
 *             self.cf_handles.append(wrapper)
 */
  __pyx_t_1 = __pyx_v_self->column_family_handles.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_self->column_family_handles.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_handle = __pyx_t_2;

    /* "rocksdb/_rocksdb.pyx":2062
 *     cdef setup_handles(self):
 *         for handle in self.column_family_handles:
 *             wrapper = _ColumnFamilyHandle.from_handle_ptr(handle)             # <<<<<<<<<<<<<<
 *             self.cf_handles.append(wrapper)
 * 
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_from_handle_ptr(__pyx_v_handle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_wrapper, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":2063
 *         for handle in self.column_family_handles:
 *             wrapper = _ColumnFamilyHandle.from_handle_ptr(handle)
 *             self.cf_handles.append(wrapper)             # <<<<<<<<<<<<<<
 * 
 *     cdef inject_loggers(self, Options opts):
 */
    if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 2063, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_self->cf_handles, __pyx_v_wrapper); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 2063, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2061
 * 
 *     cdef setup_handles(self):
 *         for handle in self.column_family_handles:             # <<<<<<<<<<<<<<
 *             wrapper = _ColumnFamilyHandle.from_handle_ptr(handle)
 *             self.cf_handles.append(wrapper)
 */
  }

  /* "rocksdb/_rocksdb.pyx":2060
 *         self.inject_loggers(opts)
 * 
 *     cdef setup_handles(self):             # <<<<<<<<<<<<<<
 *         for handle in self.column_family_handles:
 *             wrapper = _ColumnFamilyHandle.from_handle_ptr(handle)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.setup_handles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2065
 *             self.cf_handles.append(wrapper)
 * 
 *     cdef inject_loggers(self, Options opts):             # <<<<<<<<<<<<<<
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.wrapped_db.GetOptions(
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_2DB_inject_loggers(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts) {
  std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts = 0;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<rocksdb::Options const > __pyx_t_1;
  std::shared_ptr<rocksdb::Logger>  __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  std::vector<rocksdb::ColumnFamilyHandle *> ::size_type __pyx_t_9;
  __Pyx_FakeReference<rocksdb::Options const > __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inject_loggers", 0);

  /* "rocksdb/_rocksdb.pyx":2067
 *     cdef inject_loggers(self, Options opts):
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.wrapped_db.GetOptions(             # <<<<<<<<<<<<<<
 *             self.wrapped_db.DefaultColumnFamily()).info_log
 *         if opts.py_comparator is not None:
 */
  try {
    __pyx_t_1 = __pyx_v_self->wrapped_db->GetOptions(__pyx_v_self->wrapped_db->DefaultColumnFamily());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2067, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":2068
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.wrapped_db.GetOptions(
 *             self.wrapped_db.DefaultColumnFamily()).info_log             # <<<<<<<<<<<<<<
 *         if opts.py_comparator is not None:
 *             opts.py_comparator.set_info_log(info_log)
 */
  __pyx_t_2 = __pyx_t_1->info_log;
  __pyx_v_info_log = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":2069
 *         cdef shared_ptr[logger.Logger] info_log = self.wrapped_db.GetOptions(
 *             self.wrapped_db.DefaultColumnFamily()).info_log
 *         if opts.py_comparator is not None:             # <<<<<<<<<<<<<<
 *             opts.py_comparator.set_info_log(info_log)
 * 
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_opts->__pyx_base.py_comparator) != Py_None);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2070
 *             self.wrapped_db.DefaultColumnFamily()).info_log
 *         if opts.py_comparator is not None:
 *             opts.py_comparator.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *         if opts.py_table_factory is not None:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_opts->__pyx_base.py_comparator->__pyx_vtab)->set_info_log(__pyx_v_opts->__pyx_base.py_comparator, __pyx_v_info_log); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2069
 *         cdef shared_ptr[logger.Logger] info_log = self.wrapped_db.GetOptions(
 *             self.wrapped_db.DefaultColumnFamily()).info_log
 *         if opts.py_comparator is not None:             # <<<<<<<<<<<<<<
 *             opts.py_comparator.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2072
 *             opts.py_comparator.set_info_log(info_log)
 * 
 *         if opts.py_table_factory is not None:             # <<<<<<<<<<<<<<
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_opts->__pyx_base.py_table_factory) != Py_None);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2073
 * 
 *         if opts.py_table_factory is not None:
 *             opts.py_table_factory.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *         if opts.prefix_extractor is not None:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_opts->__pyx_base.py_table_factory->__pyx_vtab)->set_info_log(__pyx_v_opts->__pyx_base.py_table_factory, __pyx_v_info_log); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2072
 *             opts.py_comparator.set_info_log(info_log)
 * 
 *         if opts.py_table_factory is not None:             # <<<<<<<<<<<<<<
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2075
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 *         if opts.prefix_extractor is not None:             # <<<<<<<<<<<<<<
 *             opts.py_prefix_extractor.set_info_log(info_log)
 *         cdef ColumnFamilyOptions copts
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_opts), __pyx_n_s_prefix_extractor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2076
 * 
 *         if opts.prefix_extractor is not None:
 *             opts.py_prefix_extractor.set_info_log(info_log)             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         for idx, copts in enumerate(self.cf_options):
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_opts->__pyx_base.py_prefix_extractor->__pyx_vtab)->set_info_log(__pyx_v_opts->__pyx_base.py_prefix_extractor, __pyx_v_info_log); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2075
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 *         if opts.prefix_extractor is not None:             # <<<<<<<<<<<<<<
 *             opts.py_prefix_extractor.set_info_log(info_log)
 *         cdef ColumnFamilyOptions copts
 */
  }

  /* "rocksdb/_rocksdb.pyx":2078
 *             opts.py_prefix_extractor.set_info_log(info_log)
 *         cdef ColumnFamilyOptions copts
 *         for idx, copts in enumerate(self.cf_options):             # <<<<<<<<<<<<<<
 *             if not copts:
 *                 continue
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_4 = __pyx_int_0;
  __pyx_t_5 = __pyx_v_self->cf_options; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2078, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions))))) __PYX_ERR(0, 2078, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_copts, ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_t_7));
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "rocksdb/_rocksdb.pyx":2079
 *         cdef ColumnFamilyOptions copts
 *         for idx, copts in enumerate(self.cf_options):
 *             if not copts:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_copts)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2079, __pyx_L1_error)
    __pyx_t_8 = (!__pyx_t_3);
    if (__pyx_t_8) {

      /* "rocksdb/_rocksdb.pyx":2080
 *         for idx, copts in enumerate(self.cf_options):
 *             if not copts:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             info_log = self.wrapped_db.GetOptions(
 */
      goto __pyx_L6_continue;

      /* "rocksdb/_rocksdb.pyx":2079
 *         cdef ColumnFamilyOptions copts
 *         for idx, copts in enumerate(self.cf_options):
 *             if not copts:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2083
 * 
 *             info_log = self.wrapped_db.GetOptions(
 *                 self.column_family_handles[idx]).info_log             # <<<<<<<<<<<<<<
 * 
 *             if copts.py_comparator is not None:
 */
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2083, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2082
 *                 continue
 * 
 *             info_log = self.wrapped_db.GetOptions(             # <<<<<<<<<<<<<<
 *                 self.column_family_handles[idx]).info_log
 * 
 */
    try {
      __pyx_t_10 = __pyx_v_self->wrapped_db->GetOptions((__pyx_v_self->column_family_handles[__pyx_t_9]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2082, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":2083
 * 
 *             info_log = self.wrapped_db.GetOptions(
 *                 self.column_family_handles[idx]).info_log             # <<<<<<<<<<<<<<
 * 
 *             if copts.py_comparator is not None:
 */
    __pyx_t_2 = __pyx_t_10->info_log;
    __pyx_v_info_log = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

    /* "rocksdb/_rocksdb.pyx":2085
 *                 self.column_family_handles[idx]).info_log
 * 
 *             if copts.py_comparator is not None:             # <<<<<<<<<<<<<<
 *                 copts.py_comparator.set_info_log(info_log)
 * 
 */
    __pyx_t_8 = (((PyObject *)__pyx_v_copts->py_comparator) != Py_None);
    if (__pyx_t_8) {

      /* "rocksdb/_rocksdb.pyx":2086
 * 
 *             if copts.py_comparator is not None:
 *                 copts.py_comparator.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *             if copts.py_table_factory is not None:
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_copts->py_comparator->__pyx_vtab)->set_info_log(__pyx_v_copts->py_comparator, __pyx_v_info_log); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":2085
 *                 self.column_family_handles[idx]).info_log
 * 
 *             if copts.py_comparator is not None:             # <<<<<<<<<<<<<<
 *                 copts.py_comparator.set_info_log(info_log)
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2088
 *                 copts.py_comparator.set_info_log(info_log)
 * 
 *             if copts.py_table_factory is not None:             # <<<<<<<<<<<<<<
 *                 copts.py_table_factory.set_info_log(info_log)
 * 
 */
    __pyx_t_8 = (((PyObject *)__pyx_v_copts->py_table_factory) != Py_None);
    if (__pyx_t_8) {

      /* "rocksdb/_rocksdb.pyx":2089
 * 
 *             if copts.py_table_factory is not None:
 *                 copts.py_table_factory.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *             if copts.prefix_extractor is not None:
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_copts->py_table_factory->__pyx_vtab)->set_info_log(__pyx_v_copts->py_table_factory, __pyx_v_info_log); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2089, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":2088
 *                 copts.py_comparator.set_info_log(info_log)
 * 
 *             if copts.py_table_factory is not None:             # <<<<<<<<<<<<<<
 *                 copts.py_table_factory.set_info_log(info_log)
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2091
 *                 copts.py_table_factory.set_info_log(info_log)
 * 
 *             if copts.prefix_extractor is not None:             # <<<<<<<<<<<<<<
 *                 copts.py_prefix_extractor.set_info_log(info_log)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_copts), __pyx_n_s_prefix_extractor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = (__pyx_t_7 != Py_None);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_8) {

      /* "rocksdb/_rocksdb.pyx":2092
 * 
 *             if copts.prefix_extractor is not None:
 *                 copts.py_prefix_extractor.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *         self.opts = opts
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_copts->py_prefix_extractor->__pyx_vtab)->set_info_log(__pyx_v_copts->py_prefix_extractor, __pyx_v_info_log); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2092, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":2091
 *                 copts.py_table_factory.set_info_log(info_log)
 * 
 *             if copts.prefix_extractor is not None:             # <<<<<<<<<<<<<<
 *                 copts.py_prefix_extractor.set_info_log(info_log)
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2078
 *             opts.py_prefix_extractor.set_info_log(info_log)
 *         cdef ColumnFamilyOptions copts
 *         for idx, copts in enumerate(self.cf_options):             # <<<<<<<<<<<<<<
 *             if not copts:
 *                 continue
 */
    __pyx_L6_continue:;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2094
 *                 copts.py_prefix_extractor.set_info_log(info_log)
 * 
 *         self.opts = opts             # <<<<<<<<<<<<<<
 *         self.opts.in_use = True
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_opts);
  __Pyx_GIVEREF((PyObject *)__pyx_v_opts);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->opts);
  __Pyx_DECREF((PyObject *)__pyx_v_self->opts);
  __pyx_v_self->opts = __pyx_v_opts;

  /* "rocksdb/_rocksdb.pyx":2095
 * 
 *         self.opts = opts
 *         self.opts.in_use = True             # <<<<<<<<<<<<<<
 * 
 *     def close(self, safe=True):
 */
  __pyx_v_self->opts->__pyx_base.in_use = 1;

  /* "rocksdb/_rocksdb.pyx":2065
 *             self.cf_handles.append(wrapper)
 * 
 *     cdef inject_loggers(self, Options opts):             # <<<<<<<<<<<<<<
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.wrapped_db.GetOptions(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.inject_loggers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copts);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2097
 *         self.opts.in_use = True
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_3close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_safe = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2097, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_safe,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_safe);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2097, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "close") < 0)) __PYX_ERR(0, 2097, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_safe = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("close", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 2097, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_2close(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_safe);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_2close(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_safe) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts = 0;
  bool __pyx_v_c_safe;
  CYTHON_UNUSED rocksdb::Status __pyx_v_st;
  CYTHON_UNUSED rocksdb::ColumnFamilyHandle *__pyx_v_cfhandle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  std::vector<rocksdb::ColumnFamilyHandle *> ::iterator __pyx_t_3;
  rocksdb::ColumnFamilyHandle *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  rocksdb::Status __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);

  /* "rocksdb/_rocksdb.pyx":2099
 *     def close(self, safe=True):
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         if self.wrapped_db != NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_safe); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2099, __pyx_L1_error)
  __pyx_v_c_safe = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2101
 *         cdef cpp_bool c_safe = safe
 *         cdef Status st
 *         if self.wrapped_db != NULL:             # <<<<<<<<<<<<<<
 *             # We need stop backround compactions
 *             with nogil:
 */
  __pyx_t_2 = (__pyx_v_self->wrapped_db != NULL);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2103
 *         if self.wrapped_db != NULL:
 *             # We need stop backround compactions
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 db.CancelAllBackgroundWork(self.wrapped_db, c_safe)
 *             # We have to make sure we delete the handles so rocksdb doesn't
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2104
 *             # We need stop backround compactions
 *             with nogil:
 *                 db.CancelAllBackgroundWork(self.wrapped_db, c_safe)             # <<<<<<<<<<<<<<
 *             # We have to make sure we delete the handles so rocksdb doesn't
 *             # assert when we delete the db
 */
          try {
            rocksdb::CancelAllBackgroundWork(__pyx_v_self->wrapped_db, __pyx_v_c_safe);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2104, __pyx_L5_error)
          }
        }

        /* "rocksdb/_rocksdb.pyx":2103
 *         if self.wrapped_db != NULL:
 *             # We need stop backround compactions
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 db.CancelAllBackgroundWork(self.wrapped_db, c_safe)
 *             # We have to make sure we delete the handles so rocksdb doesn't
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L5_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2107
 *             # We have to make sure we delete the handles so rocksdb doesn't
 *             # assert when we delete the db
 *             del self.cf_handles[:]             # <<<<<<<<<<<<<<
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL
 */
    if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2107, __pyx_L1_error)
    }
    if (__Pyx_PyObject_DelSlice(__pyx_v_self->cf_handles, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 2107, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2108
 *             # assert when we delete the db
 *             del self.cf_handles[:]
 *             for cfhandle in self.column_family_handles:             # <<<<<<<<<<<<<<
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 */
    __pyx_t_3 = __pyx_v_self->column_family_handles.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_self->column_family_handles.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_v_cfhandle = __pyx_t_4;

      /* "rocksdb/_rocksdb.pyx":2109
 *             del self.cf_handles[:]
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL             # <<<<<<<<<<<<<<
 *             for copts in self.cf_options:
 *                 if copts:
 */
      __pyx_v_cfhandle = NULL;

      /* "rocksdb/_rocksdb.pyx":2108
 *             # assert when we delete the db
 *             del self.cf_handles[:]
 *             for cfhandle in self.column_family_handles:             # <<<<<<<<<<<<<<
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 */
    }

    /* "rocksdb/_rocksdb.pyx":2110
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL
 *             for copts in self.cf_options:             # <<<<<<<<<<<<<<
 *                 if copts:
 *                     copts.in_use = False
 */
    if (unlikely(__pyx_v_self->cf_options == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 2110, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_v_self->cf_options; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2110, __pyx_L1_error)
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions))))) __PYX_ERR(0, 2110, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_copts, ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":2111
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 *                 if copts:             # <<<<<<<<<<<<<<
 *                     copts.in_use = False
 *             del self.cf_options[:]
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_copts)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2111, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "rocksdb/_rocksdb.pyx":2112
 *             for copts in self.cf_options:
 *                 if copts:
 *                     copts.in_use = False             # <<<<<<<<<<<<<<
 *             del self.cf_options[:]
 *             with nogil:
 */
        __pyx_v_copts->in_use = 0;

        /* "rocksdb/_rocksdb.pyx":2111
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 *                 if copts:             # <<<<<<<<<<<<<<
 *                     copts.in_use = False
 *             del self.cf_options[:]
 */
      }

      /* "rocksdb/_rocksdb.pyx":2110
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL
 *             for copts in self.cf_options:             # <<<<<<<<<<<<<<
 *                 if copts:
 *                     copts.in_use = False
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "rocksdb/_rocksdb.pyx":2113
 *                 if copts:
 *                     copts.in_use = False
 *             del self.cf_options[:]             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = self.wrapped_db.Close()
 */
    if (unlikely(__pyx_v_self->cf_options == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2113, __pyx_L1_error)
    }
    if (__Pyx_PyObject_DelSlice(__pyx_v_self->cf_options, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 2113, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2114
 *                     copts.in_use = False
 *             del self.cf_options[:]
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = self.wrapped_db.Close()
 *                 self.wrapped_db = NULL
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2115
 *             del self.cf_options[:]
 *             with nogil:
 *                 st = self.wrapped_db.Close()             # <<<<<<<<<<<<<<
 *                 self.wrapped_db = NULL
 *             if self.opts is not None:
 */
          try {
            __pyx_t_8 = __pyx_v_self->wrapped_db->Close();
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2115, __pyx_L15_error)
          }
          __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

          /* "rocksdb/_rocksdb.pyx":2116
 *             with nogil:
 *                 st = self.wrapped_db.Close()
 *                 self.wrapped_db = NULL             # <<<<<<<<<<<<<<
 *             if self.opts is not None:
 *                 self.opts.in_use = False
 */
          __pyx_v_self->wrapped_db = NULL;
        }

        /* "rocksdb/_rocksdb.pyx":2114
 *                     copts.in_use = False
 *             del self.cf_options[:]
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = self.wrapped_db.Close()
 *                 self.wrapped_db = NULL
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L16;
          }
          __pyx_L15_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L16:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2117
 *                 st = self.wrapped_db.Close()
 *                 self.wrapped_db = NULL
 *             if self.opts is not None:             # <<<<<<<<<<<<<<
 *                 self.opts.in_use = False
 * 
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_self->opts) != Py_None);
    if (__pyx_t_2) {

      /* "rocksdb/_rocksdb.pyx":2118
 *                 self.wrapped_db = NULL
 *             if self.opts is not None:
 *                 self.opts.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->opts->__pyx_base.in_use = 0;

      /* "rocksdb/_rocksdb.pyx":2117
 *                 st = self.wrapped_db.Close()
 *                 self.wrapped_db = NULL
 *             if self.opts is not None:             # <<<<<<<<<<<<<<
 *                 self.opts.in_use = False
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2101
 *         cdef cpp_bool c_safe = safe
 *         cdef Status st
 *         if self.wrapped_db != NULL:             # <<<<<<<<<<<<<<
 *             # We need stop backround compactions
 *             with nogil:
 */
  }

  /* "rocksdb/_rocksdb.pyx":2097
 *         self.opts.in_use = True
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2120
 *                 self.opts.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) != DB:
 *             self.wrapped_db = NULL
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_2DB_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_2DB_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_2DB_4__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_2DB_4__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":2121
 * 
 *     def __dealloc__(self):
 *         if type(self) != DB:             # <<<<<<<<<<<<<<
 *             self.wrapped_db = NULL
 *             return
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2121, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2122
 *     def __dealloc__(self):
 *         if type(self) != DB:
 *             self.wrapped_db = NULL             # <<<<<<<<<<<<<<
 *             return
 *         self.close()
 */
    __pyx_v_self->wrapped_db = NULL;

    /* "rocksdb/_rocksdb.pyx":2123
 *         if type(self) != DB:
 *             self.wrapped_db = NULL
 *             return             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2121
 * 
 *     def __dealloc__(self):
 *         if type(self) != DB:             # <<<<<<<<<<<<<<
 *             self.wrapped_db = NULL
 *             return
 */
  }

  /* "rocksdb/_rocksdb.pyx":2124
 *             self.wrapped_db = NULL
 *             return
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2120
 *                 self.opts.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if type(self) != DB:
 *             self.wrapped_db = NULL
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.DB.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":2126
 *         self.close()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def column_families(self):
 *         return [handle.weakref for handle in self.cf_handles]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15column_families_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15column_families_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_15column_families___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_15column_families___get__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_8genexpr2__pyx_v_handle = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":2128
 *     @property
 *     def column_families(self):
 *         return [handle.weakref for handle in self.cf_handles]             # <<<<<<<<<<<<<<
 * 
 *     def get_column_family(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2128, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 2128, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_self->cf_handles; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2128, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_handle, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_handle, __pyx_n_s_weakref); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 2128, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_handle); __pyx_8genexpr2__pyx_v_handle = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_handle); __pyx_8genexpr2__pyx_v_handle = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2126
 *         self.close()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def column_families(self):
 *         return [handle.weakref for handle in self.cf_handles]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.column_families.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_handle);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2130
 *         return [handle.weakref for handle in self.cf_handles]
 * 
 *     def get_column_family(self, bytes name):             # <<<<<<<<<<<<<<
 *         for handle in self.cf_handles:
 *             if handle.name == name:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7get_column_family(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_7get_column_family = {"get_column_family", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_7get_column_family, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7get_column_family(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_family (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2130, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2130, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_column_family") < 0)) __PYX_ERR(0, 2130, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_name = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_family", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2130, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_column_family", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) __PYX_ERR(0, 2130, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_6get_column_family(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_6get_column_family(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_handle = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_family", 0);

  /* "rocksdb/_rocksdb.pyx":2131
 * 
 *     def get_column_family(self, bytes name):
 *         for handle in self.cf_handles:             # <<<<<<<<<<<<<<
 *             if handle.name == name:
 *                 return handle.weakref
 */
  if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2131, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->cf_handles; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 2131, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_handle, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":2132
 *     def get_column_family(self, bytes name):
 *         for handle in self.cf_handles:
 *             if handle.name == name:             # <<<<<<<<<<<<<<
 *                 return handle.weakref
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_handle, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PyBytes_Equals(__pyx_t_3, __pyx_v_name, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2132, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "rocksdb/_rocksdb.pyx":2133
 *         for handle in self.cf_handles:
 *             if handle.name == name:
 *                 return handle.weakref             # <<<<<<<<<<<<<<
 * 
 *     def put(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_handle, __pyx_n_s_weakref); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "rocksdb/_rocksdb.pyx":2132
 *     def get_column_family(self, bytes name):
 *         for handle in self.cf_handles:
 *             if handle.name == name:             # <<<<<<<<<<<<<<
 *                 return handle.weakref
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2131
 * 
 *     def get_column_family(self, bytes name):
 *         for handle in self.cf_handles:             # <<<<<<<<<<<<<<
 *             if handle.name == name:
 *                 return handle.weakref
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2130
 *         return [handle.weakref for handle in self.cf_handles]
 * 
 *     def get_column_family(self, bytes name):             # <<<<<<<<<<<<<<
 *         for handle in self.cf_handles:
 *             if handle.name == name:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_column_family", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handle);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2135
 *                 return handle.weakref
 * 
 *     def put(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_9put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_9put = {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_9put, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_9put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_v_ignore_missing_column_families = 0;
  PyObject *__pyx_v_no_slowdown = 0;
  PyObject *__pyx_v_low_pri = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2135, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,&__pyx_n_s_ignore_missing_column_families,&__pyx_n_s_no_slowdown,&__pyx_n_s_low_pri,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("put", 0, 2, 7, 1); __PYX_ERR(0, 2135, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sync);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_disable_wal);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ignore_missing_column_families);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_slowdown);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_low_pri);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "put") < 0)) __PYX_ERR(0, 2135, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
    __pyx_v_sync = values[2];
    __pyx_v_disable_wal = values[3];
    __pyx_v_ignore_missing_column_families = values[4];
    __pyx_v_no_slowdown = values[5];
    __pyx_v_low_pri = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 0, 2, 7, __pyx_nargs); __PYX_ERR(0, 2135, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_8put(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_sync, __pyx_v_disable_wal, __pyx_v_ignore_missing_column_families, __pyx_v_no_slowdown, __pyx_v_low_pri);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_8put(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  PyObject *__pyx_v_column_family = NULL;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::Slice __pyx_v_c_value;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  rocksdb::Slice __pyx_t_7;
  rocksdb::ColumnFamilyHandle *__pyx_t_8;
  rocksdb::Status __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("put", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":2138
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2138, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2139
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2139, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2140
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families             # <<<<<<<<<<<<<<
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_missing_column_families); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2140, __pyx_L1_error)
  __pyx_v_opts.ignore_missing_column_families = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2141
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown             # <<<<<<<<<<<<<<
 *         opts.low_pri = low_pri
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_no_slowdown); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2141, __pyx_L1_error)
  __pyx_v_opts.no_slowdown = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2142
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(key, tuple):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_low_pri); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2142, __pyx_L1_error)
  __pyx_v_opts.low_pri = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2144
 *         opts.low_pri = low_pri
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2145
 * 
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *         else:
 *             column_family = None
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2145, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 2145, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2145, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2144
 *         opts.low_pri = low_pri
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2147
 *             column_family, key = key
 *         else:
 *             column_family = None             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_column_family = Py_None;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":2149
 *             column_family = None
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2149, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2150
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2150, __pyx_L1_error)
  __pyx_v_c_value = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2151
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2152
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_column_family); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2152, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2153
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2153, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_8 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2153, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_8;

    /* "rocksdb/_rocksdb.pyx":2152
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2155
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Put(opts, cf_handle, c_key, c_value)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2156
 * 
 *         with nogil:
 *             st = self.wrapped_db.Put(opts, cf_handle, c_key, c_value)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_9 = __pyx_v_self->wrapped_db->Put(__pyx_v_opts, __pyx_v_cf_handle, __pyx_v_c_key, __pyx_v_c_value);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2156, __pyx_L8_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_9);
      }

      /* "rocksdb/_rocksdb.pyx":2155
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Put(opts, cf_handle, c_key, c_value)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L8_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L9:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2157
 *         with nogil:
 *             st = self.wrapped_db.Put(opts, cf_handle, c_key, c_value)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, key, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2135
 *                 return handle.weakref
 * 
 *     def put(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2159
 *         check_status(st)
 * 
 *     def delete(self, key, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_11delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_11delete = {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_11delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_11delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_v_ignore_missing_column_families = 0;
  PyObject *__pyx_v_no_slowdown = 0;
  PyObject *__pyx_v_low_pri = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2159, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,&__pyx_n_s_ignore_missing_column_families,&__pyx_n_s_no_slowdown,&__pyx_n_s_low_pri,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sync);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_disable_wal);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ignore_missing_column_families);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_slowdown);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_low_pri);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "delete") < 0)) __PYX_ERR(0, 2159, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_sync = values[1];
    __pyx_v_disable_wal = values[2];
    __pyx_v_ignore_missing_column_families = values[3];
    __pyx_v_no_slowdown = values[4];
    __pyx_v_low_pri = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 0, 1, 6, __pyx_nargs); __PYX_ERR(0, 2159, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_10delete(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_sync, __pyx_v_disable_wal, __pyx_v_ignore_missing_column_families, __pyx_v_no_slowdown, __pyx_v_low_pri);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_10delete(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  PyObject *__pyx_v_column_family = NULL;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  rocksdb::Slice __pyx_t_7;
  rocksdb::ColumnFamilyHandle *__pyx_t_8;
  rocksdb::Status __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":2162
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2162, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2163
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2163, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2164
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families             # <<<<<<<<<<<<<<
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_missing_column_families); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2164, __pyx_L1_error)
  __pyx_v_opts.ignore_missing_column_families = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2165
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown             # <<<<<<<<<<<<<<
 *         opts.low_pri = low_pri
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_no_slowdown); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2165, __pyx_L1_error)
  __pyx_v_opts.no_slowdown = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2166
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(key, tuple):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_low_pri); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2166, __pyx_L1_error)
  __pyx_v_opts.low_pri = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2168
 *         opts.low_pri = low_pri
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2169
 * 
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *         else:
 *             column_family = None
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2169, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 2169, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2169, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2168
 *         opts.low_pri = low_pri
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2171
 *             column_family, key = key
 *         else:
 *             column_family = None             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_column_family = Py_None;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":2173
 *             column_family = None
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2173, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2174
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2175
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_column_family); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2175, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2176
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2176, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_8 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2176, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_8;

    /* "rocksdb/_rocksdb.pyx":2175
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2178
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Delete(opts, cf_handle, c_key)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2179
 * 
 *         with nogil:
 *             st = self.wrapped_db.Delete(opts, cf_handle, c_key)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_9 = __pyx_v_self->wrapped_db->Delete(__pyx_v_opts, __pyx_v_cf_handle, __pyx_v_c_key);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2179, __pyx_L8_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_9);
      }

      /* "rocksdb/_rocksdb.pyx":2178
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Delete(opts, cf_handle, c_key)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L8_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L9:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2180
 *         with nogil:
 *             st = self.wrapped_db.Delete(opts, cf_handle, c_key)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2159
 *         check_status(st)
 * 
 *     def delete(self, key, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2182
 *         check_status(st)
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_13merge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_13merge = {"merge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_13merge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_13merge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_v_ignore_missing_column_families = 0;
  PyObject *__pyx_v_no_slowdown = 0;
  PyObject *__pyx_v_low_pri = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2182, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,&__pyx_n_s_ignore_missing_column_families,&__pyx_n_s_no_slowdown,&__pyx_n_s_low_pri,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("merge", 0, 2, 7, 1); __PYX_ERR(0, 2182, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sync);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_disable_wal);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ignore_missing_column_families);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_slowdown);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_low_pri);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2182, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "merge") < 0)) __PYX_ERR(0, 2182, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
    __pyx_v_sync = values[2];
    __pyx_v_disable_wal = values[3];
    __pyx_v_ignore_missing_column_families = values[4];
    __pyx_v_no_slowdown = values[5];
    __pyx_v_low_pri = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 0, 2, 7, __pyx_nargs); __PYX_ERR(0, 2182, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_12merge(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_sync, __pyx_v_disable_wal, __pyx_v_ignore_missing_column_families, __pyx_v_no_slowdown, __pyx_v_low_pri);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_12merge(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  PyObject *__pyx_v_column_family = NULL;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::Slice __pyx_v_c_value;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  rocksdb::Slice __pyx_t_7;
  rocksdb::ColumnFamilyHandle *__pyx_t_8;
  rocksdb::Status __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":2185
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2185, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2186
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2186, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2187
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families             # <<<<<<<<<<<<<<
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_missing_column_families); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2187, __pyx_L1_error)
  __pyx_v_opts.ignore_missing_column_families = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2188
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown             # <<<<<<<<<<<<<<
 *         opts.low_pri = low_pri
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_no_slowdown); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2188, __pyx_L1_error)
  __pyx_v_opts.no_slowdown = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2189
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(key, tuple):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_low_pri); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2189, __pyx_L1_error)
  __pyx_v_opts.low_pri = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2191
 *         opts.low_pri = low_pri
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2192
 * 
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *         else:
 *             column_family = None
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2192, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2192, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2192, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2192, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 2192, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2192, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2191
 *         opts.low_pri = low_pri
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2194
 *             column_family, key = key
 *         else:
 *             column_family = None             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_column_family = Py_None;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":2196
 *             column_family = None
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2196, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2197
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2197, __pyx_L1_error)
  __pyx_v_c_value = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2198
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2199
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_column_family); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2199, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2200
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2200, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_8 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2200, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_8;

    /* "rocksdb/_rocksdb.pyx":2199
 *         cdef Slice c_value = bytes_to_slice(value)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2202
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Merge(opts, cf_handle, c_key, c_value)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2203
 * 
 *         with nogil:
 *             st = self.wrapped_db.Merge(opts, cf_handle, c_key, c_value)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_9 = __pyx_v_self->wrapped_db->Merge(__pyx_v_opts, __pyx_v_cf_handle, __pyx_v_c_key, __pyx_v_c_value);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2203, __pyx_L8_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_9);
      }

      /* "rocksdb/_rocksdb.pyx":2202
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Merge(opts, cf_handle, c_key, c_value)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L8_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L9:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2204
 *         with nogil:
 *             st = self.wrapped_db.Merge(opts, cf_handle, c_key, c_value)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2182
 *         check_status(st)
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2206
 *         check_status(st)
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_15write = {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_15write, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_v_ignore_missing_column_families = 0;
  PyObject *__pyx_v_no_slowdown = 0;
  PyObject *__pyx_v_low_pri = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2206, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_batch,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,&__pyx_n_s_ignore_missing_column_families,&__pyx_n_s_no_slowdown,&__pyx_n_s_low_pri,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_batch)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sync);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_disable_wal);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ignore_missing_column_families);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_slowdown);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_low_pri);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "write") < 0)) __PYX_ERR(0, 2206, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)values[0]);
    __pyx_v_sync = values[1];
    __pyx_v_disable_wal = values[2];
    __pyx_v_ignore_missing_column_families = values[3];
    __pyx_v_no_slowdown = values[4];
    __pyx_v_low_pri = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 1, 6, __pyx_nargs); __PYX_ERR(0, 2206, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_batch), __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, 1, "batch", 0))) __PYX_ERR(0, 2206, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_14write(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_batch, __pyx_v_sync, __pyx_v_disable_wal, __pyx_v_ignore_missing_column_families, __pyx_v_no_slowdown, __pyx_v_low_pri);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_14write(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal, PyObject *__pyx_v_ignore_missing_column_families, PyObject *__pyx_v_no_slowdown, PyObject *__pyx_v_low_pri) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "rocksdb/_rocksdb.pyx":2209
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2209, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2210
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2210, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2211
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families             # <<<<<<<<<<<<<<
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_missing_column_families); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2211, __pyx_L1_error)
  __pyx_v_opts.ignore_missing_column_families = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2212
 *         opts.disableWAL = disable_wal
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown             # <<<<<<<<<<<<<<
 *         opts.low_pri = low_pri
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_no_slowdown); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2212, __pyx_L1_error)
  __pyx_v_opts.no_slowdown = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2213
 *         opts.ignore_missing_column_families = ignore_missing_column_families
 *         opts.no_slowdown = no_slowdown
 *         opts.low_pri = low_pri             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_low_pri); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2213, __pyx_L1_error)
  __pyx_v_opts.low_pri = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2215
 *         opts.low_pri = low_pri
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Write(opts, batch.batch)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2216
 * 
 *         with nogil:
 *             st = self.wrapped_db.Write(opts, batch.batch)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->wrapped_db->Write(__pyx_v_opts, __pyx_v_batch->batch);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2216, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2215
 *         opts.low_pri = low_pri
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Write(opts, batch.batch)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2217
 *         with nogil:
 *             st = self.wrapped_db.Write(opts, batch.batch)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def get(self, key, *args, **kwargs):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2206
 *         check_status(st)
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2219
 *         check_status(st)
 * 
 *     def get(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string res
 *         cdef Status st
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_17get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_17get = {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_17get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_17get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2219, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2219, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "get") < 0)) __PYX_ERR(0, 2219, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 2219, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_16get(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_16get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::string __pyx_v_res;
  rocksdb::Status __pyx_v_st;
  rocksdb::ReadOptions __pyx_v_opts;
  PyObject *__pyx_v_column_family = NULL;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  rocksdb::ReadOptions __pyx_t_4;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  rocksdb::Slice __pyx_t_7;
  rocksdb::ColumnFamilyHandle *__pyx_t_8;
  rocksdb::Status __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":2224
 *         cdef options.ReadOptions opts
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(key, tuple):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_3))) __PYX_ERR(0, 2224, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "rocksdb/_rocksdb.pyx":2226
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
  __pyx_t_5 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":2227
 * 
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *         else:
 *             column_family = None
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2227, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_1), 2) < 0) __PYX_ERR(0, 2227, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2227, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":2226
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2229
 *             column_family, key = key
 *         else:
 *             column_family = None             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_column_family = Py_None;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":2231
 *             column_family = None
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 */
  __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2231, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2232
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2233
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_column_family); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2233, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":2234
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2234, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_8 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2234, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_8;

    /* "rocksdb/_rocksdb.pyx":2233
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2236
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Get(opts, cf_handle, c_key, cython.address(res))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2237
 * 
 *         with nogil:
 *             st = self.wrapped_db.Get(opts, cf_handle, c_key, cython.address(res))             # <<<<<<<<<<<<<<
 * 
 *         if st.ok():
 */
        try {
          __pyx_t_9 = __pyx_v_self->wrapped_db->Get(__pyx_v_opts, __pyx_v_cf_handle, __pyx_v_c_key, (&__pyx_v_res));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2237, __pyx_L8_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_9);
      }

      /* "rocksdb/_rocksdb.pyx":2236
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.Get(opts, cf_handle, c_key, cython.address(res))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L8_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L9:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2239
 *             st = self.wrapped_db.Get(opts, cf_handle, c_key, cython.address(res))
 * 
 *         if st.ok():             # <<<<<<<<<<<<<<
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():
 */
  __pyx_t_5 = (__pyx_v_st.ok() != 0);
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":2240
 * 
 *         if st.ok():
 *             return string_to_bytes(res)             # <<<<<<<<<<<<<<
 *         elif st.IsNotFound():
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2239
 *             st = self.wrapped_db.Get(opts, cf_handle, c_key, cython.address(res))
 * 
 *         if st.ok():             # <<<<<<<<<<<<<<
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():
 */
  }

  /* "rocksdb/_rocksdb.pyx":2241
 *         if st.ok():
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_5 = (__pyx_v_st.IsNotFound() != 0);
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":2242
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             check_status(st)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2241
 *         if st.ok():
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":2244
 *             return None
 *         else:
 *             check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "rocksdb/_rocksdb.pyx":2219
 *         check_status(st)
 * 
 *     def get(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string res
 *         cdef Status st
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2246
 *             check_status(st)
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if as_dict:
 *             # Remove duplicate keys
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_19multi_get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_19multi_get = {"multi_get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_19multi_get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_19multi_get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_keys = 0;
  PyObject *__pyx_v_as_dict = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("multi_get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2246, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keys,&__pyx_n_s_as_dict,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_keys)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2246, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2246, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "multi_get") < 0)) __PYX_ERR(0, 2246, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_keys = values[0];
    __pyx_v_as_dict = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("multi_get", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 2246, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.multi_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_18multi_get(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_keys, __pyx_v_as_dict, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_18multi_get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_keys, PyObject *__pyx_v_as_dict, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::vector<std::string>  __pyx_v_values;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  std::vector<rocksdb::ColumnFamilyHandle *>  __pyx_v_cf_handles;
  std::vector<rocksdb::Slice>  __pyx_v_c_keys;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_py_handle = NULL;
  rocksdb::ReadOptions __pyx_v_opts;
  std::vector<rocksdb::Status>  __pyx_v_res;
  PyObject *__pyx_v_ret_dict = 0;
  PyObject *__pyx_v_ret_list = 0;
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  rocksdb::ColumnFamilyHandle *__pyx_t_10;
  rocksdb::Slice __pyx_t_11;
  rocksdb::ReadOptions __pyx_t_12;
  std::vector<rocksdb::Status>  __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("multi_get", 0);
  __Pyx_INCREF(__pyx_v_keys);

  /* "rocksdb/_rocksdb.pyx":2247
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):
 *         if as_dict:             # <<<<<<<<<<<<<<
 *             # Remove duplicate keys
 *             keys = list(dict.fromkeys(keys))
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_as_dict); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2247, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2249
 *         if as_dict:
 *             # Remove duplicate keys
 *             keys = list(dict.fromkeys(keys))             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[string] values
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_fromkeys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_keys};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_keys, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":2247
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):
 *         if as_dict:             # <<<<<<<<<<<<<<
 *             # Remove duplicate keys
 *             keys = list(dict.fromkeys(keys))
 */
  }

  /* "rocksdb/_rocksdb.pyx":2252
 * 
 *         cdef vector[string] values
 *         values.resize(len(keys))             # <<<<<<<<<<<<<<
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_keys); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2252, __pyx_L1_error)
  try {
    __pyx_v_values.resize(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2252, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":2257
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 *         cdef vector[Slice] c_keys
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             if isinstance(key, tuple):
 *                 py_handle, key = key
 */
  if (likely(PyList_CheckExact(__pyx_v_keys)) || PyTuple_CheckExact(__pyx_v_keys)) {
    __pyx_t_3 = __pyx_v_keys; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2257, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2257, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2257, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2257, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":2258
 *         cdef vector[Slice] c_keys
 *         for key in keys:
 *             if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *                 py_handle, key = key
 *                 cf_handle = (<ColumnFamilyHandle?>py_handle).get_handle()
 */
    __pyx_t_1 = PyTuple_Check(__pyx_v_key); 
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":2259
 *         for key in keys:
 *             if isinstance(key, tuple):
 *                 py_handle, key = key             # <<<<<<<<<<<<<<
 *                 cf_handle = (<ColumnFamilyHandle?>py_handle).get_handle()
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
        PyObject* sequence = __pyx_v_key;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 2259, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
        index = 0; __pyx_t_2 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 2259, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 2259, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_py_handle, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":2260
 *             if isinstance(key, tuple):
 *                 py_handle, key = key
 *                 cf_handle = (<ColumnFamilyHandle?>py_handle).get_handle()             # <<<<<<<<<<<<<<
 *             else:
 *                 cf_handle = self.wrapped_db.DefaultColumnFamily()
 */
      if (!(likely(__Pyx_TypeTest(__pyx_v_py_handle, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2260, __pyx_L1_error)
      __pyx_t_10 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_py_handle)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_py_handle)); if (unlikely(__pyx_t_10 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2260, __pyx_L1_error)
      __pyx_v_cf_handle = __pyx_t_10;

      /* "rocksdb/_rocksdb.pyx":2258
 *         cdef vector[Slice] c_keys
 *         for key in keys:
 *             if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *                 py_handle, key = key
 *                 cf_handle = (<ColumnFamilyHandle?>py_handle).get_handle()
 */
      goto __pyx_L6;
    }

    /* "rocksdb/_rocksdb.pyx":2262
 *                 cf_handle = (<ColumnFamilyHandle?>py_handle).get_handle()
 *             else:
 *                 cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 *             cf_handles.push_back(cf_handle)
 */
    /*else*/ {
      __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();
    }
    __pyx_L6:;

    /* "rocksdb/_rocksdb.pyx":2263
 *             else:
 *                 cf_handle = self.wrapped_db.DefaultColumnFamily()
 *             c_keys.push_back(bytes_to_slice(key))             # <<<<<<<<<<<<<<
 *             cf_handles.push_back(cf_handle)
 * 
 */
    __pyx_t_11 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2263, __pyx_L1_error)
    try {
      __pyx_v_c_keys.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2263, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":2264
 *                 cf_handle = self.wrapped_db.DefaultColumnFamily()
 *             c_keys.push_back(bytes_to_slice(key))
 *             cf_handles.push_back(cf_handle)             # <<<<<<<<<<<<<<
 * 
 *         cdef options.ReadOptions opts
 */
    try {
      __pyx_v_cf_handles.push_back(__pyx_v_cf_handle);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2264, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":2257
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 *         cdef vector[Slice] c_keys
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             if isinstance(key, tuple):
 *                 py_handle, key = key
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2267
 * 
 *         cdef options.ReadOptions opts
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Status] res
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 2267, __pyx_L1_error)
  __pyx_t_12 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_12);

  /* "rocksdb/_rocksdb.pyx":2270
 * 
 *         cdef vector[Status] res
 *         with nogil:             # <<<<<<<<<<<<<<
 *             res = self.wrapped_db.MultiGet(
 *                 opts,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2271
 *         cdef vector[Status] res
 *         with nogil:
 *             res = self.wrapped_db.MultiGet(             # <<<<<<<<<<<<<<
 *                 opts,
 *                 cf_handles,
 */
        try {
          __pyx_t_13 = __pyx_v_self->wrapped_db->MultiGet(__pyx_v_opts, __pyx_v_cf_handles, __pyx_v_c_keys, (&__pyx_v_values));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2271, __pyx_L11_error)
        }
        __pyx_v_res = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);
      }

      /* "rocksdb/_rocksdb.pyx":2270
 * 
 *         cdef vector[Status] res
 *         with nogil:             # <<<<<<<<<<<<<<
 *             res = self.wrapped_db.MultiGet(
 *                 opts,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L12;
        }
        __pyx_L11_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L12:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2277
 *                 cython.address(values))
 * 
 *         cdef dict ret_dict = {}             # <<<<<<<<<<<<<<
 *         cdef list ret_list = []
 *         if as_dict:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret_dict = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2278
 * 
 *         cdef dict ret_dict = {}
 *         cdef list ret_list = []             # <<<<<<<<<<<<<<
 *         if as_dict:
 *             for index in range(len(keys)):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret_list = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2279
 *         cdef dict ret_dict = {}
 *         cdef list ret_list = []
 *         if as_dict:             # <<<<<<<<<<<<<<
 *             for index in range(len(keys)):
 *                 if res[index].ok():
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_as_dict); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2279, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2280
 *         cdef list ret_list = []
 *         if as_dict:
 *             for index in range(len(keys)):             # <<<<<<<<<<<<<<
 *                 if res[index].ok():
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_keys); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2280, __pyx_L1_error)
    __pyx_t_14 = __pyx_t_6;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_index = __pyx_t_15;

      /* "rocksdb/_rocksdb.pyx":2281
 *         if as_dict:
 *             for index in range(len(keys)):
 *                 if res[index].ok():             # <<<<<<<<<<<<<<
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])
 *                 elif res[index].IsNotFound():
 */
      __pyx_t_1 = ((__pyx_v_res[__pyx_v_index]).ok() != 0);
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":2282
 *             for index in range(len(keys)):
 *                 if res[index].ok():
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])             # <<<<<<<<<<<<<<
 *                 elif res[index].IsNotFound():
 *                     ret_dict[keys[index]] = None
 */
        __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes((__pyx_v_values[__pyx_v_index])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_keys, __pyx_v_index, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely((PyDict_SetItem(__pyx_v_ret_dict, __pyx_t_4, __pyx_t_2) < 0))) __PYX_ERR(0, 2282, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "rocksdb/_rocksdb.pyx":2281
 *         if as_dict:
 *             for index in range(len(keys)):
 *                 if res[index].ok():             # <<<<<<<<<<<<<<
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])
 *                 elif res[index].IsNotFound():
 */
        goto __pyx_L16;
      }

      /* "rocksdb/_rocksdb.pyx":2283
 *                 if res[index].ok():
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])
 *                 elif res[index].IsNotFound():             # <<<<<<<<<<<<<<
 *                     ret_dict[keys[index]] = None
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_res[__pyx_v_index]).IsNotFound() != 0);
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":2284
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])
 *                 elif res[index].IsNotFound():
 *                     ret_dict[keys[index]] = None             # <<<<<<<<<<<<<<
 *                 else:
 *                     check_status(res[index])
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_keys, __pyx_v_index, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely((PyDict_SetItem(__pyx_v_ret_dict, __pyx_t_2, Py_None) < 0))) __PYX_ERR(0, 2284, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "rocksdb/_rocksdb.pyx":2283
 *                 if res[index].ok():
 *                     ret_dict[keys[index]] = string_to_bytes(values[index])
 *                 elif res[index].IsNotFound():             # <<<<<<<<<<<<<<
 *                     ret_dict[keys[index]] = None
 *                 else:
 */
        goto __pyx_L16;
      }

      /* "rocksdb/_rocksdb.pyx":2286
 *                     ret_dict[keys[index]] = None
 *                 else:
 *                     check_status(res[index])             # <<<<<<<<<<<<<<
 * 
 *             return ret_dict
 */
      /*else*/ {
        __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status((__pyx_v_res[__pyx_v_index])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2286, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L16:;
    }

    /* "rocksdb/_rocksdb.pyx":2288
 *                     check_status(res[index])
 * 
 *             return ret_dict             # <<<<<<<<<<<<<<
 *         else:
 *             for index in range(len(keys)):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ret_dict);
    __pyx_r = __pyx_v_ret_dict;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2279
 *         cdef dict ret_dict = {}
 *         cdef list ret_list = []
 *         if as_dict:             # <<<<<<<<<<<<<<
 *             for index in range(len(keys)):
 *                 if res[index].ok():
 */
  }

  /* "rocksdb/_rocksdb.pyx":2290
 *             return ret_dict
 *         else:
 *             for index in range(len(keys)):             # <<<<<<<<<<<<<<
 *                 if res[index].ok():
 *                     ret_list.append(string_to_bytes(values[index]))
 */
  /*else*/ {
    __pyx_t_6 = PyObject_Length(__pyx_v_keys); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2290, __pyx_L1_error)
    __pyx_t_14 = __pyx_t_6;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_index = __pyx_t_15;

      /* "rocksdb/_rocksdb.pyx":2291
 *         else:
 *             for index in range(len(keys)):
 *                 if res[index].ok():             # <<<<<<<<<<<<<<
 *                     ret_list.append(string_to_bytes(values[index]))
 *                 elif res[index].IsNotFound():
 */
      __pyx_t_1 = ((__pyx_v_res[__pyx_v_index]).ok() != 0);
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":2292
 *             for index in range(len(keys)):
 *                 if res[index].ok():
 *                     ret_list.append(string_to_bytes(values[index]))             # <<<<<<<<<<<<<<
 *                 elif res[index].IsNotFound():
 *                     ret_list.append(None)
 */
        __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes((__pyx_v_values[__pyx_v_index])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_ret_list, __pyx_t_2); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 2292, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "rocksdb/_rocksdb.pyx":2291
 *         else:
 *             for index in range(len(keys)):
 *                 if res[index].ok():             # <<<<<<<<<<<<<<
 *                     ret_list.append(string_to_bytes(values[index]))
 *                 elif res[index].IsNotFound():
 */
        goto __pyx_L19;
      }

      /* "rocksdb/_rocksdb.pyx":2293
 *                 if res[index].ok():
 *                     ret_list.append(string_to_bytes(values[index]))
 *                 elif res[index].IsNotFound():             # <<<<<<<<<<<<<<
 *                     ret_list.append(None)
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_res[__pyx_v_index]).IsNotFound() != 0);
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":2294
 *                     ret_list.append(string_to_bytes(values[index]))
 *                 elif res[index].IsNotFound():
 *                     ret_list.append(None)             # <<<<<<<<<<<<<<
 *                 else:
 *                     check_status(res[index])
 */
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_ret_list, Py_None); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 2294, __pyx_L1_error)

        /* "rocksdb/_rocksdb.pyx":2293
 *                 if res[index].ok():
 *                     ret_list.append(string_to_bytes(values[index]))
 *                 elif res[index].IsNotFound():             # <<<<<<<<<<<<<<
 *                     ret_list.append(None)
 *                 else:
 */
        goto __pyx_L19;
      }

      /* "rocksdb/_rocksdb.pyx":2296
 *                     ret_list.append(None)
 *                 else:
 *                     check_status(res[index])             # <<<<<<<<<<<<<<
 * 
 *             return ret_list
 */
      /*else*/ {
        __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status((__pyx_v_res[__pyx_v_index])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2296, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L19:;
    }

    /* "rocksdb/_rocksdb.pyx":2298
 *                     check_status(res[index])
 * 
 *             return ret_list             # <<<<<<<<<<<<<<
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ret_list);
    __pyx_r = __pyx_v_ret_list;
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":2246
 *             check_status(st)
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if as_dict:
 *             # Remove duplicate keys
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.multi_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_py_handle);
  __Pyx_XDECREF(__pyx_v_ret_dict);
  __Pyx_XDECREF(__pyx_v_ret_list);
  __Pyx_XDECREF(__pyx_v_keys);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2300
 *             return ret_list
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef cpp_bool value_found
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_21key_may_exist(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_21key_may_exist = {"key_may_exist", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_21key_may_exist, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_21key_may_exist(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fetch = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("key_may_exist (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2300, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 2, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fetch,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2300, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fetch);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2300, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 2) ? kwd_pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "key_may_exist") < 0)) __PYX_ERR(0, 2300, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fetch = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("key_may_exist", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 2300, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.key_may_exist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_20key_may_exist(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_fetch, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_20key_may_exist(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fetch, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::string __pyx_v_value;
  bool __pyx_v_value_found;
  bool __pyx_v_exists;
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  rocksdb::ReadOptions __pyx_t_4;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  rocksdb::ColumnFamilyHandle *__pyx_t_7;
  rocksdb::Slice __pyx_t_8;
  bool __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("key_may_exist", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "rocksdb/_rocksdb.pyx":2306
 *         cdef options.ReadOptions opts
 *         cdef Slice c_key
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2308
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         if isinstance(key, tuple):
 *             column_family, key = key
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_3))) __PYX_ERR(0, 2308, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

  /* "rocksdb/_rocksdb.pyx":2309
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_t_5 = PyTuple_Check(__pyx_v_key); 
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":2310
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         if isinstance(key, tuple):
 *             column_family, key = key             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_key))) || (PyList_CheckExact(__pyx_v_key))) {
      PyObject* sequence = __pyx_v_key;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2310, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_1), 2) < 0) __PYX_ERR(0, 2310, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2310, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_column_family = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":2311
 *         if isinstance(key, tuple):
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         c_key = bytes_to_slice(key)
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2311, __pyx_L1_error)
    __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_7 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2311, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_7;

    /* "rocksdb/_rocksdb.pyx":2309
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         if isinstance(key, tuple):             # <<<<<<<<<<<<<<
 *             column_family, key = key
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  }

  /* "rocksdb/_rocksdb.pyx":2313
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         exists = False
 * 
 */
  __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2313, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

  /* "rocksdb/_rocksdb.pyx":2314
 * 
 *         c_key = bytes_to_slice(key)
 *         exists = False             # <<<<<<<<<<<<<<
 * 
 *         if fetch:
 */
  __pyx_v_exists = 0;

  /* "rocksdb/_rocksdb.pyx":2316
 *         exists = False
 * 
 *         if fetch:             # <<<<<<<<<<<<<<
 *             value_found = False
 *             with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_fetch); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2316, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":2317
 * 
 *         if fetch:
 *             value_found = False             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 exists = self.wrapped_db.KeyMayExist(
 */
    __pyx_v_value_found = 0;

    /* "rocksdb/_rocksdb.pyx":2318
 *         if fetch:
 *             value_found = False
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.wrapped_db.KeyMayExist(
 *                     opts,
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2319
 *             value_found = False
 *             with nogil:
 *                 exists = self.wrapped_db.KeyMayExist(             # <<<<<<<<<<<<<<
 *                     opts,
 *                     cf_handle,
 */
          try {
            __pyx_t_9 = __pyx_v_self->wrapped_db->KeyMayExist(__pyx_v_opts, __pyx_v_cf_handle, __pyx_v_c_key, (&__pyx_v_value), (&__pyx_v_value_found));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2319, __pyx_L8_error)
          }
          __pyx_v_exists = __pyx_t_9;
        }

        /* "rocksdb/_rocksdb.pyx":2318
 *         if fetch:
 *             value_found = False
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.wrapped_db.KeyMayExist(
 *                     opts,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L9;
          }
          __pyx_L8_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L9:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2326
 *                     cython.address(value_found))
 * 
 *             if exists:             # <<<<<<<<<<<<<<
 *                 if value_found:
 *                     return (True, string_to_bytes(value))
 */
    __pyx_t_5 = (__pyx_v_exists != 0);
    if (__pyx_t_5) {

      /* "rocksdb/_rocksdb.pyx":2327
 * 
 *             if exists:
 *                 if value_found:             # <<<<<<<<<<<<<<
 *                     return (True, string_to_bytes(value))
 *                 else:
 */
      __pyx_t_5 = (__pyx_v_value_found != 0);
      if (__pyx_t_5) {

        /* "rocksdb/_rocksdb.pyx":2328
 *             if exists:
 *                 if value_found:
 *                     return (True, string_to_bytes(value))             # <<<<<<<<<<<<<<
 *                 else:
 *                     return (True, None)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(Py_True);
        __Pyx_GIVEREF(Py_True);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, Py_True)) __PYX_ERR(0, 2328, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_2);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 2328, __pyx_L1_error);
        __pyx_t_2 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "rocksdb/_rocksdb.pyx":2327
 * 
 *             if exists:
 *                 if value_found:             # <<<<<<<<<<<<<<
 *                     return (True, string_to_bytes(value))
 *                 else:
 */
      }

      /* "rocksdb/_rocksdb.pyx":2330
 *                     return (True, string_to_bytes(value))
 *                 else:
 *                     return (True, None)             # <<<<<<<<<<<<<<
 *             else:
 *                 return (False, None)
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__7);
        __pyx_r = __pyx_tuple__7;
        goto __pyx_L0;
      }

      /* "rocksdb/_rocksdb.pyx":2326
 *                     cython.address(value_found))
 * 
 *             if exists:             # <<<<<<<<<<<<<<
 *                 if value_found:
 *                     return (True, string_to_bytes(value))
 */
    }

    /* "rocksdb/_rocksdb.pyx":2332
 *                     return (True, None)
 *             else:
 *                 return (False, None)             # <<<<<<<<<<<<<<
 *         else:
 *             with nogil:
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_tuple__8);
      __pyx_r = __pyx_tuple__8;
      goto __pyx_L0;
    }

    /* "rocksdb/_rocksdb.pyx":2316
 *         exists = False
 * 
 *         if fetch:             # <<<<<<<<<<<<<<
 *             value_found = False
 *             with nogil:
 */
  }

  /* "rocksdb/_rocksdb.pyx":2334
 *                 return (False, None)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.wrapped_db.KeyMayExist(
 *                     opts,
 */
  /*else*/ {
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2335
 *         else:
 *             with nogil:
 *                 exists = self.wrapped_db.KeyMayExist(             # <<<<<<<<<<<<<<
 *                     opts,
 *                     cf_handle,
 */
          try {
            __pyx_t_9 = __pyx_v_self->wrapped_db->KeyMayExist(__pyx_v_opts, __pyx_v_cf_handle, __pyx_v_c_key, (&__pyx_v_value));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2335, __pyx_L13_error)
          }
          __pyx_v_exists = __pyx_t_9;
        }

        /* "rocksdb/_rocksdb.pyx":2334
 *                 return (False, None)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.wrapped_db.KeyMayExist(
 *                     opts,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L14;
          }
          __pyx_L13_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L14:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2341
 *                     cython.address(value))
 * 
 *             return (exists, None)             # <<<<<<<<<<<<<<
 * 
 *     def iterkeys(self, ColumnFamilyHandle column_family=None, *args, **kwargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(0, 2341, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":2300
 *             return ret_list
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef cpp_bool value_found
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.key_may_exist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2343
 *             return (exists, None)
 * 
 *     def iterkeys(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_23iterkeys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_23iterkeys = {"iterkeys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_23iterkeys, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_23iterkeys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterkeys (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2343, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_family,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_family);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2343, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "iterkeys") < 0)) __PYX_ERR(0, 2343, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_column_family = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "column_family", 0))) __PYX_ERR(0, 2343, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_22iterkeys(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_family, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_22iterkeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  rocksdb::ReadOptions __pyx_v_opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_it = 0;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  rocksdb::ColumnFamilyHandle *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  rocksdb::ReadOptions __pyx_t_6;
  rocksdb::Iterator *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterkeys", 0);

  /* "rocksdb/_rocksdb.pyx":2346
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = column_family.get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2347
 *         cdef KeysIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_column_family)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2347, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2348
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = column_family.get_handle()             # <<<<<<<<<<<<<<
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family->__pyx_vtab)->get_handle(__pyx_v_column_family); if (unlikely(__pyx_t_2 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2348, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_2;

    /* "rocksdb/_rocksdb.pyx":2347
 *         cdef KeysIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2350
 *             cf_handle = column_family.get_handle()
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         it = KeysIterator(self, column_family)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_5))) __PYX_ERR(0, 2350, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_5)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "rocksdb/_rocksdb.pyx":2351
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         it = KeysIterator(self, column_family)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 2351, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_column_family);
  __Pyx_GIVEREF((PyObject *)__pyx_v_column_family);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_column_family))) __PYX_ERR(0, 2351, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2353
 *         it = KeysIterator(self, column_family)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2354
 * 
 *         with nogil:
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
        try {
          __pyx_t_7 = __pyx_v_self->wrapped_db->NewIterator(__pyx_v_opts, __pyx_v_cf_handle);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2354, __pyx_L5_error)
        }
        __pyx_v_it->__pyx_base.ptr = __pyx_t_7;
      }

      /* "rocksdb/_rocksdb.pyx":2353
 *         it = KeysIterator(self, column_family)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2355
 *         with nogil:
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def itervalues(self, ColumnFamilyHandle column_family=None, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_it);
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2343
 *             return (exists, None)
 * 
 *     def iterkeys(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2357
 *         return it
 * 
 *     def itervalues(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_25itervalues(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_25itervalues = {"itervalues", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_25itervalues, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_25itervalues(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervalues (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2357, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_family,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_family);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2357, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "itervalues") < 0)) __PYX_ERR(0, 2357, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_column_family = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "column_family", 0))) __PYX_ERR(0, 2357, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_24itervalues(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_family, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_24itervalues(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  rocksdb::ReadOptions __pyx_v_opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_it = 0;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  rocksdb::ColumnFamilyHandle *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  rocksdb::ReadOptions __pyx_t_6;
  rocksdb::Iterator *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("itervalues", 0);

  /* "rocksdb/_rocksdb.pyx":2360
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = column_family.get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2361
 *         cdef ValuesIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_column_family)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2361, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2362
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = column_family.get_handle()             # <<<<<<<<<<<<<<
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family->__pyx_vtab)->get_handle(__pyx_v_column_family); if (unlikely(__pyx_t_2 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2362, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_2;

    /* "rocksdb/_rocksdb.pyx":2361
 *         cdef ValuesIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2364
 *             cf_handle = column_family.get_handle()
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         it = ValuesIterator(self)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_5))) __PYX_ERR(0, 2364, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_5)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "rocksdb/_rocksdb.pyx":2366
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         it = ValuesIterator(self)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "rocksdb/_rocksdb.pyx":2368
 *         it = ValuesIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2369
 * 
 *         with nogil:
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
        try {
          __pyx_t_7 = __pyx_v_self->wrapped_db->NewIterator(__pyx_v_opts, __pyx_v_cf_handle);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2369, __pyx_L5_error)
        }
        __pyx_v_it->__pyx_base.ptr = __pyx_t_7;
      }

      /* "rocksdb/_rocksdb.pyx":2368
 *         it = ValuesIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2370
 *         with nogil:
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def iteritems(self, ColumnFamilyHandle column_family=None, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_it);
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2357
 *         return it
 * 
 *     def itervalues(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2372
 *         return it
 * 
 *     def iteritems(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_27iteritems(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_27iteritems = {"iteritems", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_27iteritems, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_27iteritems(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iteritems (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2372, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_family,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_family);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "iteritems") < 0)) __PYX_ERR(0, 2372, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_column_family = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "column_family", 0))) __PYX_ERR(0, 2372, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_26iteritems(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_family, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_26iteritems(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  rocksdb::ReadOptions __pyx_v_opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_it = 0;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  rocksdb::ColumnFamilyHandle *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  rocksdb::ReadOptions __pyx_t_6;
  rocksdb::Iterator *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iteritems", 0);

  /* "rocksdb/_rocksdb.pyx":2375
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = column_family.get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2376
 *         cdef ItemsIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_column_family)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2376, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2377
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = column_family.get_handle()             # <<<<<<<<<<<<<<
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family->__pyx_vtab)->get_handle(__pyx_v_column_family); if (unlikely(__pyx_t_2 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2377, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_2;

    /* "rocksdb/_rocksdb.pyx":2376
 *         cdef ItemsIterator it
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
  }

  /* "rocksdb/_rocksdb.pyx":2378
 *         if column_family:
 *             cf_handle = column_family.get_handle()
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         it = ItemsIterator(self, column_family)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_5))) __PYX_ERR(0, 2378, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_5)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "rocksdb/_rocksdb.pyx":2380
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         it = ItemsIterator(self, column_family)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 2380, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_column_family);
  __Pyx_GIVEREF((PyObject *)__pyx_v_column_family);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_column_family))) __PYX_ERR(0, 2380, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2382
 *         it = ItemsIterator(self, column_family)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2383
 * 
 *         with nogil:
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
        try {
          __pyx_t_7 = __pyx_v_self->wrapped_db->NewIterator(__pyx_v_opts, __pyx_v_cf_handle);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2383, __pyx_L5_error)
        }
        __pyx_v_it->__pyx_base.ptr = __pyx_t_7;
      }

      /* "rocksdb/_rocksdb.pyx":2382
 *         it = ItemsIterator(self, column_family)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2384
 *         with nogil:
 *             it.ptr = self.wrapped_db.NewIterator(opts, cf_handle)
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_it);
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2372
 *         return it
 * 
 *     def iteritems(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2386
 *         return it
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_29iterskeys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_29iterskeys = {"iterskeys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_29iterskeys, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_29iterskeys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_column_families = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterskeys (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2386, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_families,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_families)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2386, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "iterskeys") < 0)) __PYX_ERR(0, 2386, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_column_families = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iterskeys", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 2386, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterskeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_28iterskeys(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_families, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_28iterskeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_column_families, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::vector<rocksdb::Iterator *>  __pyx_v_iters;
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::Iterator *__pyx_v_it_ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_it = 0;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  std::vector<rocksdb::ColumnFamilyHandle *>  __pyx_v_cf_handles;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_v_cf_iter = NULL;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  rocksdb::ColumnFamilyHandle *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  rocksdb::ReadOptions __pyx_t_7;
  std::vector<rocksdb::Iterator *> ::iterator __pyx_t_8;
  rocksdb::Iterator *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterskeys", 0);

  /* "rocksdb/_rocksdb.pyx":2388
 *     def iterskeys(self, column_families, *args, **kwargs):
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef db.Iterator* it_ptr
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_column_families); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2388, __pyx_L1_error)
  try {
    __pyx_v_iters.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2388, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":2395
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 * 
 *         for column_family in column_families:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)
 */
  if (likely(PyList_CheckExact(__pyx_v_column_families)) || PyTuple_CheckExact(__pyx_v_column_families)) {
    __pyx_t_2 = __pyx_v_column_families; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_column_families); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2395, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 2395, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 2395, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2395, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_column_family, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2396
 * 
 *         for column_family in column_families:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 *             cf_handles.push_back(cf_handle)
 * 
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2396, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_5 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2396, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":2397
 *         for column_family in column_families:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)             # <<<<<<<<<<<<<<
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
    try {
      __pyx_v_cf_handles.push_back(__pyx_v_cf_handle);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2397, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":2395
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 * 
 *         for column_family in column_families:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2399
 *             cf_handles.push_back(cf_handle)
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_6))) __PYX_ERR(0, 2399, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2400
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2401
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)             # <<<<<<<<<<<<<<
 * 
 *         cf_iter = iter(column_families)
 */
        try {
          __pyx_v_self->wrapped_db->NewIterators(__pyx_v_opts, __pyx_v_cf_handles, (&__pyx_v_iters));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2401, __pyx_L7_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2400
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2403
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 *         cf_iter = iter(column_families)             # <<<<<<<<<<<<<<
 *         cdef list ret = []
 *         for it_ptr in iters:
 */
  __pyx_t_6 = PyObject_GetIter(__pyx_v_column_families); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_cf_iter = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "rocksdb/_rocksdb.pyx":2404
 * 
 *         cf_iter = iter(column_families)
 *         cdef list ret = []             # <<<<<<<<<<<<<<
 *         for it_ptr in iters:
 *             it = KeysIterator(self, next(cf_iter))
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ret = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "rocksdb/_rocksdb.pyx":2405
 *         cf_iter = iter(column_families)
 *         cdef list ret = []
 *         for it_ptr in iters:             # <<<<<<<<<<<<<<
 *             it = KeysIterator(self, next(cf_iter))
 *             it.ptr = it_ptr
 */
  __pyx_t_8 = __pyx_v_iters.begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_v_iters.end())) break;
    __pyx_t_9 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it_ptr = __pyx_t_9;

    /* "rocksdb/_rocksdb.pyx":2406
 *         cdef list ret = []
 *         for it_ptr in iters:
 *             it = KeysIterator(self, next(cf_iter))             # <<<<<<<<<<<<<<
 *             it.ptr = it_ptr
 *             ret.append(it)
 */
    __pyx_t_6 = __Pyx_PyIter_Next(__pyx_v_cf_iter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 2406, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6)) __PYX_ERR(0, 2406, __pyx_L1_error);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator), __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_it, ((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "rocksdb/_rocksdb.pyx":2407
 *         for it_ptr in iters:
 *             it = KeysIterator(self, next(cf_iter))
 *             it.ptr = it_ptr             # <<<<<<<<<<<<<<
 *             ret.append(it)
 *         return ret
 */
    __pyx_v_it->__pyx_base.ptr = __pyx_v_it_ptr;

    /* "rocksdb/_rocksdb.pyx":2408
 *             it = KeysIterator(self, next(cf_iter))
 *             it.ptr = it_ptr
 *             ret.append(it)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_it)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2408, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2405
 *         cf_iter = iter(column_families)
 *         cdef list ret = []
 *         for it_ptr in iters:             # <<<<<<<<<<<<<<
 *             it = KeysIterator(self, next(cf_iter))
 *             it.ptr = it_ptr
 */
  }

  /* "rocksdb/_rocksdb.pyx":2409
 *             it.ptr = it_ptr
 *             ret.append(it)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def itersvalues(self, column_families, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2386
 *         return it
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterskeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_cf_iter);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2411
 *         return ret
 * 
 *     def itersvalues(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_31itersvalues(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_31itersvalues = {"itersvalues", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_31itersvalues, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_31itersvalues(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_column_families = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itersvalues (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2411, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_families,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_families)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2411, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "itersvalues") < 0)) __PYX_ERR(0, 2411, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_column_families = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("itersvalues", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 2411, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.itersvalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_30itersvalues(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_families, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_30itersvalues(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_column_families, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::vector<rocksdb::Iterator *>  __pyx_v_iters;
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::Iterator *__pyx_v_it_ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_it = 0;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  std::vector<rocksdb::ColumnFamilyHandle *>  __pyx_v_cf_handles;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  rocksdb::ColumnFamilyHandle *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  rocksdb::ReadOptions __pyx_t_7;
  std::vector<rocksdb::Iterator *> ::iterator __pyx_t_8;
  rocksdb::Iterator *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("itersvalues", 0);

  /* "rocksdb/_rocksdb.pyx":2413
 *     def itersvalues(self, column_families, *args, **kwargs):
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef db.Iterator* it_ptr
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_column_families); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2413, __pyx_L1_error)
  try {
    __pyx_v_iters.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2413, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":2420
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 * 
 *         for column_family in column_families:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)
 */
  if (likely(PyList_CheckExact(__pyx_v_column_families)) || PyTuple_CheckExact(__pyx_v_column_families)) {
    __pyx_t_2 = __pyx_v_column_families; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_column_families); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2420, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 2420, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2420, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 2420, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2420, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2420, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_column_family, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2421
 * 
 *         for column_family in column_families:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 *             cf_handles.push_back(cf_handle)
 * 
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2421, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_5 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2421, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":2422
 *         for column_family in column_families:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)             # <<<<<<<<<<<<<<
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
    try {
      __pyx_v_cf_handles.push_back(__pyx_v_cf_handle);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2422, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":2420
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 * 
 *         for column_family in column_families:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2424
 *             cf_handles.push_back(cf_handle)
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_6))) __PYX_ERR(0, 2424, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2425
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2426
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)             # <<<<<<<<<<<<<<
 * 
 *         cdef list ret = []
 */
        try {
          __pyx_v_self->wrapped_db->NewIterators(__pyx_v_opts, __pyx_v_cf_handles, (&__pyx_v_iters));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2426, __pyx_L7_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2425
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2428
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 *         cdef list ret = []             # <<<<<<<<<<<<<<
 *         for it_ptr in iters:
 *             it = ValuesIterator(self)
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ret = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "rocksdb/_rocksdb.pyx":2429
 * 
 *         cdef list ret = []
 *         for it_ptr in iters:             # <<<<<<<<<<<<<<
 *             it = ValuesIterator(self)
 *             it.ptr = it_ptr
 */
  __pyx_t_8 = __pyx_v_iters.begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_v_iters.end())) break;
    __pyx_t_9 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it_ptr = __pyx_t_9;

    /* "rocksdb/_rocksdb.pyx":2430
 *         cdef list ret = []
 *         for it_ptr in iters:
 *             it = ValuesIterator(self)             # <<<<<<<<<<<<<<
 *             it.ptr = it_ptr
 *             ret.append(it)
 */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_it, ((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "rocksdb/_rocksdb.pyx":2431
 *         for it_ptr in iters:
 *             it = ValuesIterator(self)
 *             it.ptr = it_ptr             # <<<<<<<<<<<<<<
 *             ret.append(it)
 *         return ret
 */
    __pyx_v_it->__pyx_base.ptr = __pyx_v_it_ptr;

    /* "rocksdb/_rocksdb.pyx":2432
 *             it = ValuesIterator(self)
 *             it.ptr = it_ptr
 *             ret.append(it)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_it)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2432, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2429
 * 
 *         cdef list ret = []
 *         for it_ptr in iters:             # <<<<<<<<<<<<<<
 *             it = ValuesIterator(self)
 *             it.ptr = it_ptr
 */
  }

  /* "rocksdb/_rocksdb.pyx":2433
 *             it.ptr = it_ptr
 *             ret.append(it)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2411
 *         return ret
 * 
 *     def itersvalues(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.itersvalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2435
 *         return ret
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_33iterskeys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_33iterskeys = {"iterskeys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_33iterskeys, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_33iterskeys(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_column_families = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterskeys (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2435, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_FASTCALL(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_families,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_families)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2435, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "iterskeys") < 0)) __PYX_ERR(0, 2435, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_column_families = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iterskeys", 0, 1, 1, __pyx_nargs); __PYX_ERR(0, 2435, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterskeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_32iterskeys(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_families, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_32iterskeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_column_families, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::vector<rocksdb::Iterator *>  __pyx_v_iters;
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::Iterator *__pyx_v_it_ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_it = 0;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  std::vector<rocksdb::ColumnFamilyHandle *>  __pyx_v_cf_handles;
  PyObject *__pyx_v_column_family = NULL;
  PyObject *__pyx_v_cf_iter = NULL;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  rocksdb::ColumnFamilyHandle *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  rocksdb::ReadOptions __pyx_t_7;
  std::vector<rocksdb::Iterator *> ::iterator __pyx_t_8;
  rocksdb::Iterator *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterskeys", 0);

  /* "rocksdb/_rocksdb.pyx":2437
 *     def iterskeys(self, column_families, *args, **kwargs):
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef db.Iterator* it_ptr
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_column_families); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2437, __pyx_L1_error)
  try {
    __pyx_v_iters.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2437, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":2444
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 * 
 *         for column_family in column_families:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)
 */
  if (likely(PyList_CheckExact(__pyx_v_column_families)) || PyTuple_CheckExact(__pyx_v_column_families)) {
    __pyx_t_2 = __pyx_v_column_families; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_column_families); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2444, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 2444, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2444, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 2444, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2444, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2444, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_column_family, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2445
 * 
 *         for column_family in column_families:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 *             cf_handles.push_back(cf_handle)
 * 
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_column_family, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2445, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_5 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2445, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":2446
 *         for column_family in column_families:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)             # <<<<<<<<<<<<<<
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 */
    try {
      __pyx_v_cf_handles.push_back(__pyx_v_cf_handle);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2446, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":2444
 *         cdef vector[db.ColumnFamilyHandle*] cf_handles
 * 
 *         for column_family in column_families:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 *             cf_handles.push_back(cf_handle)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2448
 *             cf_handles.push_back(cf_handle)
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_6))) __PYX_ERR(0, 2448, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_opts = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2449
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2450
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        try {
          __pyx_v_self->wrapped_db->NewIterators(__pyx_v_opts, __pyx_v_cf_handles, (&__pyx_v_iters));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2450, __pyx_L7_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2449
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.NewIterators(opts, cf_handles, &iters)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2453
 * 
 * 
 *         cf_iter = iter(column_families)             # <<<<<<<<<<<<<<
 *         cdef list ret = []
 *         for it_ptr in iters:
 */
  __pyx_t_6 = PyObject_GetIter(__pyx_v_column_families); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_cf_iter = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "rocksdb/_rocksdb.pyx":2454
 * 
 *         cf_iter = iter(column_families)
 *         cdef list ret = []             # <<<<<<<<<<<<<<
 *         for it_ptr in iters:
 *             it = ItemsIterator(self, next(cf_iter))
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ret = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "rocksdb/_rocksdb.pyx":2455
 *         cf_iter = iter(column_families)
 *         cdef list ret = []
 *         for it_ptr in iters:             # <<<<<<<<<<<<<<
 *             it = ItemsIterator(self, next(cf_iter))
 *             it.ptr = it_ptr
 */
  __pyx_t_8 = __pyx_v_iters.begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_v_iters.end())) break;
    __pyx_t_9 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it_ptr = __pyx_t_9;

    /* "rocksdb/_rocksdb.pyx":2456
 *         cdef list ret = []
 *         for it_ptr in iters:
 *             it = ItemsIterator(self, next(cf_iter))             # <<<<<<<<<<<<<<
 *             it.ptr = it_ptr
 *             ret.append(it)
 */
    __pyx_t_6 = __Pyx_PyIter_Next(__pyx_v_cf_iter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 2456, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6)) __PYX_ERR(0, 2456, __pyx_L1_error);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator), __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_it, ((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "rocksdb/_rocksdb.pyx":2457
 *         for it_ptr in iters:
 *             it = ItemsIterator(self, next(cf_iter))
 *             it.ptr = it_ptr             # <<<<<<<<<<<<<<
 *             ret.append(it)
 *         return ret
 */
    __pyx_v_it->__pyx_base.ptr = __pyx_v_it_ptr;

    /* "rocksdb/_rocksdb.pyx":2458
 *             it = ItemsIterator(self, next(cf_iter))
 *             it.ptr = it_ptr
 *             ret.append(it)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_it)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2458, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2455
 *         cf_iter = iter(column_families)
 *         cdef list ret = []
 *         for it_ptr in iters:             # <<<<<<<<<<<<<<
 *             it = ItemsIterator(self, next(cf_iter))
 *             it.ptr = it_ptr
 */
  }

  /* "rocksdb/_rocksdb.pyx":2459
 *             it.ptr = it_ptr
 *             ret.append(it)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def snapshot(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2435
 *         return ret
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterskeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_column_family);
  __Pyx_XDECREF(__pyx_v_cf_iter);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2461
 *         return ret
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_35snapshot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_35snapshot = {"snapshot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_35snapshot, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_35snapshot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("snapshot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2461, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("snapshot", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "snapshot", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_34snapshot(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_34snapshot(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("snapshot", 0);

  /* "rocksdb/_rocksdb.pyx":2462
 * 
 *     def snapshot(self):
 *         return Snapshot(self)             # <<<<<<<<<<<<<<
 * 
 *     def get_property(self, prop, ColumnFamilyHandle column_family=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_Snapshot), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2461
 *         return ret
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2464
 *         return Snapshot(self)
 * 
 *     def get_property(self, prop, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_37get_property(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_37get_property = {"get_property", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_37get_property, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_37get_property(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_prop = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_property (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2464, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prop,&__pyx_n_s_column_family,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prop)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2464, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_family);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2464, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_property") < 0)) __PYX_ERR(0, 2464, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_prop = values[0];
    __pyx_v_column_family = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_property", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 2464, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "column_family", 0))) __PYX_ERR(0, 2464, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_36get_property(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_prop, __pyx_v_column_family);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_36get_property(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_prop, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family) {
  std::string __pyx_v_value;
  rocksdb::Slice __pyx_v_c_prop;
  bool __pyx_v_ret;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  int __pyx_t_2;
  rocksdb::ColumnFamilyHandle *__pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_property", 0);

  /* "rocksdb/_rocksdb.pyx":2466
 *     def get_property(self, prop, ColumnFamilyHandle column_family=None):
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)             # <<<<<<<<<<<<<<
 *         cdef cpp_bool ret = False
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_prop); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2466, __pyx_L1_error)
  __pyx_v_c_prop = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2467
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 *         cdef cpp_bool ret = False             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 */
  __pyx_v_ret = 0;

  /* "rocksdb/_rocksdb.pyx":2468
 *         cdef Slice c_prop = bytes_to_slice(prop)
 *         cdef cpp_bool ret = False
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = column_family.get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2469
 *         cdef cpp_bool ret = False
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_column_family)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2469, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2470
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = column_family.get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family->__pyx_vtab)->get_handle(__pyx_v_column_family); if (unlikely(__pyx_t_3 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2470, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":2469
 *         cdef cpp_bool ret = False
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = column_family.get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2472
 *             cf_handle = column_family.get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = self.wrapped_db.GetProperty(cf_handle, c_prop, cython.address(value))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2473
 * 
 *         with nogil:
 *             ret = self.wrapped_db.GetProperty(cf_handle, c_prop, cython.address(value))             # <<<<<<<<<<<<<<
 * 
 *         if ret:
 */
        try {
          __pyx_t_4 = __pyx_v_self->wrapped_db->GetProperty(__pyx_v_cf_handle, __pyx_v_c_prop, (&__pyx_v_value));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2473, __pyx_L5_error)
        }
        __pyx_v_ret = __pyx_t_4;
      }

      /* "rocksdb/_rocksdb.pyx":2472
 *             cf_handle = column_family.get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = self.wrapped_db.GetProperty(cf_handle, c_prop, cython.address(value))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2475
 *             ret = self.wrapped_db.GetProperty(cf_handle, c_prop, cython.address(value))
 * 
 *         if ret:             # <<<<<<<<<<<<<<
 *             return string_to_bytes(value)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_ret != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2476
 * 
 *         if ret:
 *             return string_to_bytes(value)             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2475
 *             ret = self.wrapped_db.GetProperty(cf_handle, c_prop, cython.address(value))
 * 
 *         if ret:             # <<<<<<<<<<<<<<
 *             return string_to_bytes(value)
 *         else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":2478
 *             return string_to_bytes(value)
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def get_live_files_metadata(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":2464
 *         return Snapshot(self)
 * 
 *     def get_property(self, prop, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2480
 *             return None
 * 
 *     def get_live_files_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_39get_live_files_metadata(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_39get_live_files_metadata = {"get_live_files_metadata", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_39get_live_files_metadata, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_39get_live_files_metadata(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_live_files_metadata (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2480, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_live_files_metadata", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_live_files_metadata", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_live_files_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_38get_live_files_metadata(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_38get_live_files_metadata(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  std::vector<struct rocksdb::LiveFileMetaData>  __pyx_v_metadata;
  PyObject *__pyx_v_ret = NULL;
  struct rocksdb::LiveFileMetaData __pyx_v_ob;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct rocksdb::LiveFileMetaData> ::iterator __pyx_t_2;
  struct rocksdb::LiveFileMetaData __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_live_files_metadata", 0);

  /* "rocksdb/_rocksdb.pyx":2483
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.GetLiveFilesMetaData(cython.address(metadata))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2484
 * 
 *         with nogil:
 *             self.wrapped_db.GetLiveFilesMetaData(cython.address(metadata))             # <<<<<<<<<<<<<<
 * 
 *         ret = []
 */
        try {
          __pyx_v_self->wrapped_db->GetLiveFilesMetaData((&__pyx_v_metadata));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2484, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2483
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.GetLiveFilesMetaData(cython.address(metadata))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2486
 *             self.wrapped_db.GetLiveFilesMetaData(cython.address(metadata))
 * 
 *         ret = []             # <<<<<<<<<<<<<<
 *         for ob in metadata:
 *             t = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2487
 * 
 *         ret = []
 *         for ob in metadata:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['name'] = string_to_path(ob.name)
 */
  __pyx_t_2 = __pyx_v_metadata.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_metadata.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_ob = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":2488
 *         ret = []
 *         for ob in metadata:
 *             t = {}             # <<<<<<<<<<<<<<
 *             t['name'] = string_to_path(ob.name)
 *             t['level'] = ob.level
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2489
 *         for ob in metadata:
 *             t = {}
 *             t['name'] = string_to_path(ob.name)             # <<<<<<<<<<<<<<
 *             t['level'] = ob.level
 *             t['size'] = ob.size
 */
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_path(__pyx_v_ob.name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_name, __pyx_t_1) < 0))) __PYX_ERR(0, 2489, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2490
 *             t = {}
 *             t['name'] = string_to_path(ob.name)
 *             t['level'] = ob.level             # <<<<<<<<<<<<<<
 *             t['size'] = ob.size
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_ob.level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_level, __pyx_t_1) < 0))) __PYX_ERR(0, 2490, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2491
 *             t['name'] = string_to_path(ob.name)
 *             t['level'] = ob.level
 *             t['size'] = ob.size             # <<<<<<<<<<<<<<
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_size, __pyx_t_1) < 0))) __PYX_ERR(0, 2491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2492
 *             t['level'] = ob.level
 *             t['size'] = ob.size
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)             # <<<<<<<<<<<<<<
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 *             t['smallest_seqno'] = ob.smallest_seqno
 */
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_ob.smallestkey); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_smallestkey, __pyx_t_1) < 0))) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2493
 *             t['size'] = ob.size
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 *             t['largestkey'] = string_to_bytes(ob.largestkey)             # <<<<<<<<<<<<<<
 *             t['smallest_seqno'] = ob.smallest_seqno
 *             t['largest_seqno'] = ob.largest_seqno
 */
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_ob.largestkey); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_largestkey, __pyx_t_1) < 0))) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2494
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 *             t['smallest_seqno'] = ob.smallest_seqno             # <<<<<<<<<<<<<<
 *             t['largest_seqno'] = ob.largest_seqno
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.smallest_seqno); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_smallest_seqno, __pyx_t_1) < 0))) __PYX_ERR(0, 2494, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2495
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 *             t['smallest_seqno'] = ob.smallest_seqno
 *             t['largest_seqno'] = ob.largest_seqno             # <<<<<<<<<<<<<<
 * 
 *             ret.append(t)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.largest_seqno); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_largest_seqno, __pyx_t_1) < 0))) __PYX_ERR(0, 2495, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":2497
 *             t['largest_seqno'] = ob.largest_seqno
 * 
 *             ret.append(t)             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_v_t); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 2497, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2487
 * 
 *         ret = []
 *         for ob in metadata:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['name'] = string_to_path(ob.name)
 */
  }

  /* "rocksdb/_rocksdb.pyx":2499
 *             ret.append(t)
 * 
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def get_column_family_meta_data(self, ColumnFamilyHandle column_family=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2480
 *             return None
 * 
 *     def get_live_files_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_live_files_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2501
 *         return ret
 * 
 *     def get_column_family_meta_data(self, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyMetaData metadata
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_41get_column_family_meta_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_41get_column_family_meta_data = {"get_column_family_meta_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_41get_column_family_meta_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_41get_column_family_meta_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_column_family_meta_data (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2501, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_column_family,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_family);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2501, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_column_family_meta_data") < 0)) __PYX_ERR(0, 2501, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_column_family = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_column_family_meta_data", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 2501, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_column_family_meta_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "column_family", 0))) __PYX_ERR(0, 2501, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_40get_column_family_meta_data(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_column_family);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_40get_column_family_meta_data(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family) {
  struct rocksdb::ColumnFamilyMetaData __pyx_v_metadata;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  rocksdb::ColumnFamilyHandle *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_column_family_meta_data", 0);

  /* "rocksdb/_rocksdb.pyx":2504
 *         cdef db.ColumnFamilyMetaData metadata
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2505
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_column_family)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2505, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2506
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2506, __pyx_L1_error)
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_2 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2506, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_2;

    /* "rocksdb/_rocksdb.pyx":2505
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2508
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.GetColumnFamilyMetaData(cf_handle, cython.address(metadata))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2509
 * 
 *         with nogil:
 *             self.wrapped_db.GetColumnFamilyMetaData(cf_handle, cython.address(metadata))             # <<<<<<<<<<<<<<
 * 
 *         return {
 */
        try {
          __pyx_v_self->wrapped_db->GetColumnFamilyMetaData(__pyx_v_cf_handle, (&__pyx_v_metadata));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2509, __pyx_L5_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2508
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.GetColumnFamilyMetaData(cf_handle, cython.address(metadata))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2511
 *             self.wrapped_db.GetColumnFamilyMetaData(cf_handle, cython.address(metadata))
 * 
 *         return {             # <<<<<<<<<<<<<<
 *             "size":metadata.size,
 *             "file_count":metadata.file_count,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "rocksdb/_rocksdb.pyx":2512
 * 
 *         return {
 *             "size":metadata.size,             # <<<<<<<<<<<<<<
 *             "file_count":metadata.file_count,
 *         }
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_metadata.size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_size, __pyx_t_4) < 0) __PYX_ERR(0, 2512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2513
 *         return {
 *             "size":metadata.size,
 *             "file_count":metadata.file_count,             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_metadata.file_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_file_count, __pyx_t_4) < 0) __PYX_ERR(0, 2512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2501
 *         return ret
 * 
 *     def get_column_family_meta_data(self, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyMetaData metadata
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_column_family_meta_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2516
 *         }
 * 
 *     def compact_range(self, begin=None, end=None, ColumnFamilyHandle column_family=None, **py_options):             # <<<<<<<<<<<<<<
 *         cdef options.CompactRangeOptions c_options
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_43compact_range(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_43compact_range = {"compact_range", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_43compact_range, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_43compact_range(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_begin = 0;
  PyObject *__pyx_v_end = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family = 0;
  PyObject *__pyx_v_py_options = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compact_range (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2516, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_py_options = PyDict_New(); if (unlikely(!__pyx_v_py_options)) return NULL;
  __Pyx_GOTREF(__pyx_v_py_options);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_begin,&__pyx_n_s_end,&__pyx_n_s_column_family,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_begin);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2516, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_end);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2516, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_family);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2516, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_py_options, values + 0, kwd_pos_args, "compact_range") < 0)) __PYX_ERR(0, 2516, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_begin = values[0];
    __pyx_v_end = values[1];
    __pyx_v_column_family = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compact_range", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 2516, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_py_options); __pyx_v_py_options = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.compact_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "column_family", 0))) __PYX_ERR(0, 2516, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_42compact_range(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_begin, __pyx_v_end, __pyx_v_column_family, __pyx_v_py_options);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_py_options);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_42compact_range(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_begin, PyObject *__pyx_v_end, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_column_family, PyObject *__pyx_v_py_options) {
  rocksdb::CompactRangeOptions __pyx_v_c_options;
  PyObject *__pyx_v_blc = NULL;
  rocksdb::Status __pyx_v_st;
  rocksdb::Slice __pyx_v_begin_val;
  rocksdb::Slice __pyx_v_end_val;
  rocksdb::Slice *__pyx_v_begin_ptr;
  rocksdb::Slice *__pyx_v_end_ptr;
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  rocksdb::Slice __pyx_t_5;
  rocksdb::ColumnFamilyHandle *__pyx_t_6;
  rocksdb::Status __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compact_range", 0);

  /* "rocksdb/_rocksdb.pyx":2519
 *         cdef options.CompactRangeOptions c_options
 * 
 *         c_options.change_level = py_options.get('change_level', False)             # <<<<<<<<<<<<<<
 *         c_options.target_level = py_options.get('target_level', -1)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_py_options, __pyx_n_u_change_level, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c_options.change_level = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":2520
 * 
 *         c_options.change_level = py_options.get('change_level', False)
 *         c_options.target_level = py_options.get('target_level', -1)             # <<<<<<<<<<<<<<
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_py_options, __pyx_n_u_target_level, __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c_options.target_level = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":2522
 *         c_options.target_level = py_options.get('target_level', -1)
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')             # <<<<<<<<<<<<<<
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_py_options, __pyx_n_u_bottommost_level_compaction, __pyx_n_u_if_compaction_filter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_blc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2523
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 *         if blc == 'skip':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_blc, __pyx_n_u_skip, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2523, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2524
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip             # <<<<<<<<<<<<<<
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 */
    __pyx_v_c_options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kSkip;

    /* "rocksdb/_rocksdb.pyx":2523
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 *         if blc == 'skip':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2525
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_blc, __pyx_n_u_if_compaction_filter, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2525, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2526
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter             # <<<<<<<<<<<<<<
 *         elif blc == 'force':
 *             c_options.bottommost_level_compaction = options.blc_force
 */
    __pyx_v_c_options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kIfHaveCompactionFilter;

    /* "rocksdb/_rocksdb.pyx":2525
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2527
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 */
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_blc, __pyx_n_u_force, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2527, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "rocksdb/_rocksdb.pyx":2528
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':
 *             c_options.bottommost_level_compaction = options.blc_force             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("bottommost_level_compaction is not valid")
 */
    __pyx_v_c_options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kForce;

    /* "rocksdb/_rocksdb.pyx":2527
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":2530
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 *             raise ValueError("bottommost_level_compaction is not valid")             # <<<<<<<<<<<<<<
 * 
 *         cdef Status st
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2530, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":2539
 *         cdef Slice* end_ptr
 * 
 *         begin_ptr = NULL             # <<<<<<<<<<<<<<
 *         end_ptr = NULL
 * 
 */
  __pyx_v_begin_ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":2540
 * 
 *         begin_ptr = NULL
 *         end_ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *         if begin is not None:
 */
  __pyx_v_end_ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":2542
 *         end_ptr = NULL
 * 
 *         if begin is not None:             # <<<<<<<<<<<<<<
 *             begin_val = bytes_to_slice(begin)
 *             begin_ptr = cython.address(begin_val)
 */
  __pyx_t_4 = (__pyx_v_begin != Py_None);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2543
 * 
 *         if begin is not None:
 *             begin_val = bytes_to_slice(begin)             # <<<<<<<<<<<<<<
 *             begin_ptr = cython.address(begin_val)
 * 
 */
    __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_begin); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2543, __pyx_L1_error)
    __pyx_v_begin_val = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

    /* "rocksdb/_rocksdb.pyx":2544
 *         if begin is not None:
 *             begin_val = bytes_to_slice(begin)
 *             begin_ptr = cython.address(begin_val)             # <<<<<<<<<<<<<<
 * 
 *         if end is not None:
 */
    __pyx_v_begin_ptr = (&__pyx_v_begin_val);

    /* "rocksdb/_rocksdb.pyx":2542
 *         end_ptr = NULL
 * 
 *         if begin is not None:             # <<<<<<<<<<<<<<
 *             begin_val = bytes_to_slice(begin)
 *             begin_ptr = cython.address(begin_val)
 */
  }

  /* "rocksdb/_rocksdb.pyx":2546
 *             begin_ptr = cython.address(begin_val)
 * 
 *         if end is not None:             # <<<<<<<<<<<<<<
 *             end_val = bytes_to_slice(end)
 *             end_ptr = cython.address(end_val)
 */
  __pyx_t_4 = (__pyx_v_end != Py_None);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2547
 * 
 *         if end is not None:
 *             end_val = bytes_to_slice(end)             # <<<<<<<<<<<<<<
 *             end_ptr = cython.address(end_val)
 * 
 */
    __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_end); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2547, __pyx_L1_error)
    __pyx_v_end_val = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

    /* "rocksdb/_rocksdb.pyx":2548
 *         if end is not None:
 *             end_val = bytes_to_slice(end)
 *             end_ptr = cython.address(end_val)             # <<<<<<<<<<<<<<
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 */
    __pyx_v_end_ptr = (&__pyx_v_end_val);

    /* "rocksdb/_rocksdb.pyx":2546
 *             begin_ptr = cython.address(begin_val)
 * 
 *         if end is not None:             # <<<<<<<<<<<<<<
 *             end_val = bytes_to_slice(end)
 *             end_ptr = cython.address(end_val)
 */
  }

  /* "rocksdb/_rocksdb.pyx":2550
 *             end_ptr = cython.address(end_val)
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()             # <<<<<<<<<<<<<<
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 */
  __pyx_v_cf_handle = __pyx_v_self->wrapped_db->DefaultColumnFamily();

  /* "rocksdb/_rocksdb.pyx":2551
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_column_family)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2551, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2552
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()             # <<<<<<<<<<<<<<
 * 
 *         st = self.wrapped_db.CompactRange(c_options, cf_handle, begin_ptr, end_ptr)
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_column_family), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)))) __PYX_ERR(0, 2552, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)->__pyx_vtab)->get_handle(((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_column_family)); if (unlikely(__pyx_t_6 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2552, __pyx_L1_error)
    __pyx_v_cf_handle = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":2551
 * 
 *         cdef db.ColumnFamilyHandle* cf_handle = self.wrapped_db.DefaultColumnFamily()
 *         if column_family:             # <<<<<<<<<<<<<<
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2554
 *             cf_handle = (<ColumnFamilyHandle?>column_family).get_handle()
 * 
 *         st = self.wrapped_db.CompactRange(c_options, cf_handle, begin_ptr, end_ptr)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
  try {
    __pyx_t_7 = __pyx_v_self->wrapped_db->CompactRange(__pyx_v_c_options, __pyx_v_cf_handle, __pyx_v_begin_ptr, __pyx_v_end_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2554, __pyx_L1_error)
  }
  __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "rocksdb/_rocksdb.pyx":2555
 * 
 *         st = self.wrapped_db.CompactRange(c_options, cf_handle, begin_ptr, end_ptr)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2516
 *         }
 * 
 *     def compact_range(self, begin=None, end=None, ColumnFamilyHandle column_family=None, **py_options):             # <<<<<<<<<<<<<<
 *         cdef options.CompactRangeOptions c_options
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.compact_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_blc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2557
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *             verify_checksums=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_45_DB__parse_read_opts(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_45_DB__parse_read_opts = {"_DB__parse_read_opts", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_45_DB__parse_read_opts, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_45_DB__parse_read_opts(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_verify_checksums = 0;
  PyObject *__pyx_v_fill_cache = 0;
  PyObject *__pyx_v_snapshot = 0;
  PyObject *__pyx_v_read_tier = 0;
  PyObject *__pyx_v_total_order_seek = 0;
  PyObject *__pyx_v_iterate_lower_bound = 0;
  PyObject *__pyx_v_iterate_upper_bound = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_DB__parse_read_opts (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2557, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,&__pyx_n_s_snapshot,&__pyx_n_s_read_tier,&__pyx_n_s_total_order_seek,&__pyx_n_s_iterate_lower_bound,&__pyx_n_s_iterate_upper_bound,0};

    /* "rocksdb/_rocksdb.pyx":2559
 *     @staticmethod
 *     def __parse_read_opts(
 *             verify_checksums=False,             # <<<<<<<<<<<<<<
 *             fill_cache=True,
 *             snapshot=None,
 */
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));

    /* "rocksdb/_rocksdb.pyx":2560
 *     def __parse_read_opts(
 *             verify_checksums=False,
 *             fill_cache=True,             # <<<<<<<<<<<<<<
 *             snapshot=None,
 *             read_tier="all",
 */
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));

    /* "rocksdb/_rocksdb.pyx":2561
 *             verify_checksums=False,
 *             fill_cache=True,
 *             snapshot=None,             # <<<<<<<<<<<<<<
 *             read_tier="all",
 *             total_order_seek=False,
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_all));

    /* "rocksdb/_rocksdb.pyx":2563
 *             snapshot=None,
 *             read_tier="all",
 *             total_order_seek=False,             # <<<<<<<<<<<<<<
 *             iterate_lower_bound=None,
 *             iterate_upper_bound=None
 */
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));

    /* "rocksdb/_rocksdb.pyx":2564
 *             read_tier="all",
 *             total_order_seek=False,
 *             iterate_lower_bound=None,             # <<<<<<<<<<<<<<
 *             iterate_upper_bound=None
 *     ):
 */
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "rocksdb/_rocksdb.pyx":2565
 *             total_order_seek=False,
 *             iterate_lower_bound=None,
 *             iterate_upper_bound=None             # <<<<<<<<<<<<<<
 *     ):
 * 
 */
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_verify_checksums);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fill_cache);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_snapshot);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_read_tier);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_total_order_seek);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iterate_lower_bound);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iterate_upper_bound);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2557, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_DB__parse_read_opts") < 0)) __PYX_ERR(0, 2557, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_verify_checksums = values[0];
    __pyx_v_fill_cache = values[1];
    __pyx_v_snapshot = values[2];
    __pyx_v_read_tier = values[3];
    __pyx_v_total_order_seek = values[4];
    __pyx_v_iterate_lower_bound = values[5];
    __pyx_v_iterate_upper_bound = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_DB__parse_read_opts", 0, 0, 7, __pyx_nargs); __PYX_ERR(0, 2557, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB._DB__parse_read_opts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_44__parse_read_opts(__pyx_v_verify_checksums, __pyx_v_fill_cache, __pyx_v_snapshot, __pyx_v_read_tier, __pyx_v_total_order_seek, __pyx_v_iterate_lower_bound, __pyx_v_iterate_upper_bound);

  /* "rocksdb/_rocksdb.pyx":2557
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *             verify_checksums=False,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_44__parse_read_opts(PyObject *__pyx_v_verify_checksums, PyObject *__pyx_v_fill_cache, PyObject *__pyx_v_snapshot, PyObject *__pyx_v_read_tier, PyObject *__pyx_v_total_order_seek, PyObject *__pyx_v_iterate_lower_bound, PyObject *__pyx_v_iterate_upper_bound) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_DB__parse_read_opts", 0);

  /* "rocksdb/_rocksdb.pyx":2569
 * 
 *         # TODO: Is this really effiencet ?
 *         return locals()             # <<<<<<<<<<<<<<
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):
 *         cdef options.ReadOptions opts
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__pyx_v_fill_cache) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fill_cache, __pyx_v_fill_cache) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  if (__pyx_v_iterate_lower_bound) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_iterate_lower_bound, __pyx_v_iterate_lower_bound) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  if (__pyx_v_iterate_upper_bound) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_iterate_upper_bound, __pyx_v_iterate_upper_bound) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  if (__pyx_v_read_tier) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_read_tier, __pyx_v_read_tier) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  if (__pyx_v_snapshot) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_snapshot, __pyx_v_snapshot) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  if (__pyx_v_total_order_seek) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_order_seek, __pyx_v_total_order_seek) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  if (__pyx_v_verify_checksums) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_verify_checksums, __pyx_v_verify_checksums) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2557
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *             verify_checksums=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB._DB__parse_read_opts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2587
 *             raise ValueError("Invalid read_tier")
 * 
 *         def make_bytes(iterate_bound):             # <<<<<<<<<<<<<<
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15build_read_opts_1make_bytes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_15build_read_opts_1make_bytes = {"make_bytes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_15build_read_opts_1make_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15build_read_opts_1make_bytes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_iterate_bound = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_bytes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2587, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iterate_bound,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iterate_bound)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2587, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "make_bytes") < 0)) __PYX_ERR(0, 2587, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_iterate_bound = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_bytes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2587, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.build_read_opts.make_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_15build_read_opts_make_bytes(__pyx_self, __pyx_v_iterate_bound);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_15build_read_opts_make_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_iterate_bound) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_bytes", 0);

  /* "rocksdb/_rocksdb.pyx":2588
 * 
 *         def make_bytes(iterate_bound):
 *             if isinstance(iterate_bound, bytes):             # <<<<<<<<<<<<<<
 *                 return iterate_bound
 *             elif isinstance(iterate_bound, str):
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_iterate_bound); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2589
 *         def make_bytes(iterate_bound):
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound             # <<<<<<<<<<<<<<
 *             elif isinstance(iterate_bound, str):
 *                 return str.encode(iterate_bound)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_iterate_bound);
    __pyx_r = __pyx_v_iterate_bound;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2588
 * 
 *         def make_bytes(iterate_bound):
 *             if isinstance(iterate_bound, bytes):             # <<<<<<<<<<<<<<
 *                 return iterate_bound
 *             elif isinstance(iterate_bound, str):
 */
  }

  /* "rocksdb/_rocksdb.pyx":2590
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound
 *             elif isinstance(iterate_bound, str):             # <<<<<<<<<<<<<<
 *                 return str.encode(iterate_bound)
 *             elif isinstance(iterate_bound, int):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_iterate_bound); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2591
 *                 return iterate_bound
 *             elif isinstance(iterate_bound, str):
 *                 return str.encode(iterate_bound)             # <<<<<<<<<<<<<<
 *             elif isinstance(iterate_bound, int):
 *                 return str.encode(str(iterate_bound))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyUnicode_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_iterate_bound};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2590
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound
 *             elif isinstance(iterate_bound, str):             # <<<<<<<<<<<<<<
 *                 return str.encode(iterate_bound)
 *             elif isinstance(iterate_bound, int):
 */
  }

  /* "rocksdb/_rocksdb.pyx":2592
 *             elif isinstance(iterate_bound, str):
 *                 return str.encode(iterate_bound)
 *             elif isinstance(iterate_bound, int):             # <<<<<<<<<<<<<<
 *                 return str.encode(str(iterate_bound))
 *             else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_iterate_bound); 
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2593
 *                 return str.encode(iterate_bound)
 *             elif isinstance(iterate_bound, int):
 *                 return str.encode(str(iterate_bound))             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyUnicode_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Str(__pyx_v_iterate_bound); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2592
 *             elif isinstance(iterate_bound, str):
 *                 return str.encode(iterate_bound)
 *             elif isinstance(iterate_bound, int):             # <<<<<<<<<<<<<<
 *                 return str.encode(str(iterate_bound))
 *             else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":2595
 *                 return str.encode(str(iterate_bound))
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 *         if py_opts['iterate_lower_bound'] is not None:
 *             # Calling this new without corresponding delete causes a memory leak.
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":2587
 *             raise ValueError("Invalid read_tier")
 * 
 *         def make_bytes(iterate_bound):             # <<<<<<<<<<<<<<
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.build_read_opts.make_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2570
 *         # TODO: Is this really effiencet ?
 *         return locals()
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']
 */

static rocksdb::ReadOptions __pyx_f_7rocksdb_8_rocksdb_2DB_build_read_opts(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_py_opts) {
  rocksdb::ReadOptions __pyx_v_opts;
  PyObject *__pyx_v_make_bytes = 0;
  rocksdb::ReadOptions __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  int __pyx_t_3;
  rocksdb::Snapshot const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  rocksdb::Slice *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build_read_opts", 0);

  /* "rocksdb/_rocksdb.pyx":2572
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']             # <<<<<<<<<<<<<<
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2572, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_verify_checksums); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_opts.verify_checksums = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":2573
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']
 *         opts.fill_cache = py_opts['fill_cache']             # <<<<<<<<<<<<<<
 *         if py_opts['snapshot'] is not None:
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2573, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_fill_cache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_opts.fill_cache = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":2574
 *         opts.verify_checksums = py_opts['verify_checksums']
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:             # <<<<<<<<<<<<<<
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2574, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_snapshot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2575
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr             # <<<<<<<<<<<<<<
 * 
 *         if py_opts['total_order_seek'] is not None:
 */
    if (unlikely(__pyx_v_py_opts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2575, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_snapshot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7rocksdb_8_rocksdb_Snapshot)))) __PYX_ERR(0, 2575, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_t_1)->ptr;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_opts.snapshot = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":2574
 *         opts.verify_checksums = py_opts['verify_checksums']
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:             # <<<<<<<<<<<<<<
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2577
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 *         if py_opts['total_order_seek'] is not None:             # <<<<<<<<<<<<<<
 *             opts.total_order_seek = py_opts['total_order_seek']
 * 
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2577, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_total_order_seek); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2578
 * 
 *         if py_opts['total_order_seek'] is not None:
 *             opts.total_order_seek = py_opts['total_order_seek']             # <<<<<<<<<<<<<<
 * 
 *         if py_opts['read_tier'] == "all":
 */
    if (unlikely(__pyx_v_py_opts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2578, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_total_order_seek); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_opts.total_order_seek = __pyx_t_2;

    /* "rocksdb/_rocksdb.pyx":2577
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 *         if py_opts['total_order_seek'] is not None:             # <<<<<<<<<<<<<<
 *             opts.total_order_seek = py_opts['total_order_seek']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2580
 *             opts.total_order_seek = py_opts['total_order_seek']
 * 
 *         if py_opts['read_tier'] == "all":             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2580, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_read_tier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_all, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2581
 * 
 *         if py_opts['read_tier'] == "all":
 *             opts.read_tier = options.kReadAllTier             # <<<<<<<<<<<<<<
 *         elif py_opts['read_tier'] == 'cache':
 *             opts.read_tier = options.kBlockCacheTier
 */
    __pyx_v_opts.read_tier = rocksdb::kReadAllTier;

    /* "rocksdb/_rocksdb.pyx":2580
 *             opts.total_order_seek = py_opts['total_order_seek']
 * 
 *         if py_opts['read_tier'] == "all":             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":2582
 *         if py_opts['read_tier'] == "all":
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2582, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_read_tier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_cache, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "rocksdb/_rocksdb.pyx":2583
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':
 *             opts.read_tier = options.kBlockCacheTier             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid read_tier")
 */
    __pyx_v_opts.read_tier = rocksdb::kBlockCacheTier;

    /* "rocksdb/_rocksdb.pyx":2582
 *         if py_opts['read_tier'] == "all":
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":2585
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 *             raise ValueError("Invalid read_tier")             # <<<<<<<<<<<<<<
 * 
 *         def make_bytes(iterate_bound):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2585, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "rocksdb/_rocksdb.pyx":2587
 *             raise ValueError("Invalid read_tier")
 * 
 *         def make_bytes(iterate_bound):             # <<<<<<<<<<<<<<
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_15build_read_opts_1make_bytes, 0, __pyx_n_s_DB_build_read_opts_locals_make_b, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_make_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2596
 *             else:
 *                 return None
 *         if py_opts['iterate_lower_bound'] is not None:             # <<<<<<<<<<<<<<
 *             # Calling this new without corresponding delete causes a memory leak.
 *             # TODO: Figure out where the object should be destroyed without causing segfaults
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2596, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_iterate_lower_bound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2599
 *             # Calling this new without corresponding delete causes a memory leak.
 *             # TODO: Figure out where the object should be destroyed without causing segfaults
 *             opts.iterate_lower_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_lower_bound']))             # <<<<<<<<<<<<<<
 *         if py_opts['iterate_upper_bound'] is not None:
 *             opts.iterate_upper_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_upper_bound']))
 */
    if (unlikely(__pyx_v_py_opts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2599, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_iterate_lower_bound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_pf_7rocksdb_8_rocksdb_2DB_15build_read_opts_make_bytes(__pyx_v_make_bytes, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_new_slice(__pyx_t_5); if (unlikely(__pyx_t_6 == ((rocksdb::Slice *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 2599, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_opts.iterate_lower_bound = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":2596
 *             else:
 *                 return None
 *         if py_opts['iterate_lower_bound'] is not None:             # <<<<<<<<<<<<<<
 *             # Calling this new without corresponding delete causes a memory leak.
 *             # TODO: Figure out where the object should be destroyed without causing segfaults
 */
  }

  /* "rocksdb/_rocksdb.pyx":2600
 *             # TODO: Figure out where the object should be destroyed without causing segfaults
 *             opts.iterate_lower_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_lower_bound']))
 *         if py_opts['iterate_upper_bound'] is not None:             # <<<<<<<<<<<<<<
 *             opts.iterate_upper_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_upper_bound']))
 * 
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2600, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_iterate_upper_bound); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__pyx_t_5 != Py_None);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":2601
 *             opts.iterate_lower_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_lower_bound']))
 *         if py_opts['iterate_upper_bound'] is not None:
 *             opts.iterate_upper_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_upper_bound']))             # <<<<<<<<<<<<<<
 * 
 *         return opts
 */
    if (unlikely(__pyx_v_py_opts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2601, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_u_iterate_upper_bound); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __pyx_pf_7rocksdb_8_rocksdb_2DB_15build_read_opts_make_bytes(__pyx_v_make_bytes, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_new_slice(__pyx_t_1); if (unlikely(__pyx_t_6 == ((rocksdb::Slice *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 2601, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_opts.iterate_upper_bound = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":2600
 *             # TODO: Figure out where the object should be destroyed without causing segfaults
 *             opts.iterate_lower_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_lower_bound']))
 *         if py_opts['iterate_upper_bound'] is not None:             # <<<<<<<<<<<<<<
 *             opts.iterate_upper_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_upper_bound']))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2603
 *             opts.iterate_upper_bound = bytes_to_new_slice(make_bytes(py_opts['iterate_upper_bound']))
 * 
 *         return opts             # <<<<<<<<<<<<<<
 * 
 *     property options:
 */
  __pyx_r = __pyx_v_opts;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2570
 *         # TODO: Is this really effiencet ?
 *         return locals()
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.build_read_opts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_make_bytes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2606
 * 
 *     property options:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7options_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7options_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_7options___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_7options___get__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":2607
 *     property options:
 *         def __get__(self):
 *             return self.opts             # <<<<<<<<<<<<<<
 * 
 *     def create_column_family(self, bytes name, ColumnFamilyOptions copts):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->opts);
  __pyx_r = ((PyObject *)__pyx_v_self->opts);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2606
 * 
 *     property options:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2609
 *             return self.opts
 * 
 *     def create_column_family(self, bytes name, ColumnFamilyOptions copts):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef Status st
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_47create_column_family(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_47create_column_family = {"create_column_family", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_47create_column_family, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_47create_column_family(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_column_family (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2609, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_copts,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2609, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_copts)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2609, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("create_column_family", 1, 2, 2, 1); __PYX_ERR(0, 2609, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "create_column_family") < 0)) __PYX_ERR(0, 2609, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_copts = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_column_family", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2609, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.create_column_family", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) __PYX_ERR(0, 2609, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_copts), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions, 1, "copts", 0))) __PYX_ERR(0, 2609, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_46create_column_family(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_name, __pyx_v_copts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_46create_column_family(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts) {
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_c_name;
  PyObject *__pyx_v_handle = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  rocksdb::Status __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_column_family", 0);

  /* "rocksdb/_rocksdb.pyx":2612
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef Status st
 *         cdef string c_name = name             # <<<<<<<<<<<<<<
 * 
 *         for handle in self.cf_handles:
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2612, __pyx_L1_error)
  __pyx_v_c_name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2614
 *         cdef string c_name = name
 * 
 *         for handle in self.cf_handles:             # <<<<<<<<<<<<<<
 *             if handle.name == name:
 *                 raise ValueError(f"{name} is already an existing column family")
 */
  if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2614, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->cf_handles; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2614, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_handle, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":2615
 * 
 *         for handle in self.cf_handles:
 *             if handle.name == name:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"{name} is already an existing column family")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_handle, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = (__Pyx_PyBytes_Equals(__pyx_t_4, __pyx_v_name, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_5)) {

      /* "rocksdb/_rocksdb.pyx":2616
 *         for handle in self.cf_handles:
 *             if handle.name == name:
 *                 raise ValueError(f"{name} is already an existing column family")             # <<<<<<<<<<<<<<
 * 
 *         if copts.in_use:
 */
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_4, __pyx_kp_u_is_already_an_existing_column_f); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 2616, __pyx_L1_error)

      /* "rocksdb/_rocksdb.pyx":2615
 * 
 *         for handle in self.cf_handles:
 *             if handle.name == name:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"{name} is already an existing column family")
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2614
 *         cdef string c_name = name
 * 
 *         for handle in self.cf_handles:             # <<<<<<<<<<<<<<
 *             if handle.name == name:
 *                 raise ValueError(f"{name} is already an existing column family")
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2618
 *                 raise ValueError(f"{name} is already an existing column family")
 * 
 *         if copts.in_use:             # <<<<<<<<<<<<<<
 *             raise Exception("ColumnFamilyOptions are in_use by another column family")
 * 
 */
  __pyx_t_5 = (__pyx_v_copts->in_use != 0);
  if (unlikely(__pyx_t_5)) {

    /* "rocksdb/_rocksdb.pyx":2619
 * 
 *         if copts.in_use:
 *             raise Exception("ColumnFamilyOptions are in_use by another column family")             # <<<<<<<<<<<<<<
 * 
 *         copts.in_use = True
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2619, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2618
 *                 raise ValueError(f"{name} is already an existing column family")
 * 
 *         if copts.in_use:             # <<<<<<<<<<<<<<
 *             raise Exception("ColumnFamilyOptions are in_use by another column family")
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2621
 *             raise Exception("ColumnFamilyOptions are in_use by another column family")
 * 
 *         copts.in_use = True             # <<<<<<<<<<<<<<
 *         with nogil:
 *             st = self.wrapped_db.CreateColumnFamily(deref(copts.copts), c_name, &cf_handle)
 */
  __pyx_v_copts->in_use = 1;

  /* "rocksdb/_rocksdb.pyx":2622
 * 
 *         copts.in_use = True
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.CreateColumnFamily(deref(copts.copts), c_name, &cf_handle)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2623
 *         copts.in_use = True
 *         with nogil:
 *             st = self.wrapped_db.CreateColumnFamily(deref(copts.copts), c_name, &cf_handle)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_7 = __pyx_v_self->wrapped_db->CreateColumnFamily((*__pyx_v_copts->copts), __pyx_v_c_name, (&__pyx_v_cf_handle));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2623, __pyx_L9_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);
      }

      /* "rocksdb/_rocksdb.pyx":2622
 * 
 *         copts.in_use = True
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.CreateColumnFamily(deref(copts.copts), c_name, &cf_handle)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L10;
        }
        __pyx_L9_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L10:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2624
 *         with nogil:
 *             st = self.wrapped_db.CreateColumnFamily(deref(copts.copts), c_name, &cf_handle)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *         handle = _ColumnFamilyHandle.from_handle_ptr(cf_handle)
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2626
 *         check_status(st)
 * 
 *         handle = _ColumnFamilyHandle.from_handle_ptr(cf_handle)             # <<<<<<<<<<<<<<
 * 
 *         self.cf_handles.append(handle)
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_from_handle_ptr(__pyx_v_cf_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF_SET(__pyx_v_handle, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2628
 *         handle = _ColumnFamilyHandle.from_handle_ptr(cf_handle)
 * 
 *         self.cf_handles.append(handle)             # <<<<<<<<<<<<<<
 *         self.cf_options.append(copts)
 *         return handle.weakref
 */
  if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 2628, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_self->cf_handles, __pyx_v_handle); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2628, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2629
 * 
 *         self.cf_handles.append(handle)
 *         self.cf_options.append(copts)             # <<<<<<<<<<<<<<
 *         return handle.weakref
 * 
 */
  if (unlikely(__pyx_v_self->cf_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 2629, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_self->cf_options, ((PyObject *)__pyx_v_copts)); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2629, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2630
 *         self.cf_handles.append(handle)
 *         self.cf_options.append(copts)
 *         return handle.weakref             # <<<<<<<<<<<<<<
 * 
 *     def drop_column_family(self, ColumnFamilyHandle weak_handle not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_handle, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2609
 *             return self.opts
 * 
 *     def create_column_family(self, bytes name, ColumnFamilyOptions copts):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef Status st
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.create_column_family", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handle);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2632
 *         return handle.weakref
 * 
 *     def drop_column_family(self, ColumnFamilyHandle weak_handle not None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef ColumnFamilyOptions copts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_49drop_column_family(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_49drop_column_family = {"drop_column_family", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_49drop_column_family, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_49drop_column_family(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_weak_handle = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drop_column_family (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2632, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weak_handle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_weak_handle)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2632, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "drop_column_family") < 0)) __PYX_ERR(0, 2632, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_weak_handle = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drop_column_family", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2632, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.drop_column_family", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weak_handle), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 0, "weak_handle", 0))) __PYX_ERR(0, 2632, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_48drop_column_family(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_weak_handle);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_48drop_column_family(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_weak_handle) {
  rocksdb::ColumnFamilyHandle *__pyx_v_cf_handle;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts = 0;
  rocksdb::Status __pyx_v_st;
  PyObject *__pyx_v_py_handle = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::ColumnFamilyHandle *__pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drop_column_family", 0);

  /* "rocksdb/_rocksdb.pyx":2637
 *         cdef Status st
 * 
 *         cf_handle = weak_handle.get_handle()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle *)__pyx_v_weak_handle->__pyx_vtab)->get_handle(__pyx_v_weak_handle); if (unlikely(__pyx_t_1 == ((rocksdb::ColumnFamilyHandle *)NULL))) __PYX_ERR(0, 2637, __pyx_L1_error)
  __pyx_v_cf_handle = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2639
 *         cf_handle = weak_handle.get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.DropColumnFamily(cf_handle)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2640
 * 
 *         with nogil:
 *             st = self.wrapped_db.DropColumnFamily(cf_handle)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->wrapped_db->DropColumnFamily(__pyx_v_cf_handle);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2640, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2639
 *         cf_handle = weak_handle.get_handle()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.wrapped_db.DropColumnFamily(cf_handle)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2641
 *         with nogil:
 *             st = self.wrapped_db.DropColumnFamily(cf_handle)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *         py_handle = weak_handle._ref()
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2643
 *         check_status(st)
 * 
 *         py_handle = weak_handle._ref()             # <<<<<<<<<<<<<<
 *         index = self.cf_handles.index(py_handle)
 *         copts = self.cf_options.pop(index)
 */
  __Pyx_INCREF(__pyx_v_weak_handle->_ref);
  __pyx_t_4 = __pyx_v_weak_handle->_ref; __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_py_handle = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2644
 * 
 *         py_handle = weak_handle._ref()
 *         index = self.cf_handles.index(py_handle)             # <<<<<<<<<<<<<<
 *         copts = self.cf_options.pop(index)
 *         del self.cf_handles[index]
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->cf_handles, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_py_handle};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_index = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2645
 *         py_handle = weak_handle._ref()
 *         index = self.cf_handles.index(py_handle)
 *         copts = self.cf_options.pop(index)             # <<<<<<<<<<<<<<
 *         del self.cf_handles[index]
 *         del py_handle
 */
  if (unlikely(__pyx_v_self->cf_options == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 2645, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2645, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyList_PopIndex(__pyx_v_self->cf_options, __pyx_v_index, __pyx_t_7, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions))))) __PYX_ERR(0, 2645, __pyx_L1_error)
  __pyx_v_copts = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2646
 *         index = self.cf_handles.index(py_handle)
 *         copts = self.cf_options.pop(index)
 *         del self.cf_handles[index]             # <<<<<<<<<<<<<<
 *         del py_handle
 *         if copts:
 */
  if (unlikely(__pyx_v_self->cf_handles == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2646, __pyx_L1_error)
  }
  if (unlikely((PyObject_DelItem(__pyx_v_self->cf_handles, __pyx_v_index) < 0))) __PYX_ERR(0, 2646, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2647
 *         copts = self.cf_options.pop(index)
 *         del self.cf_handles[index]
 *         del py_handle             # <<<<<<<<<<<<<<
 *         if copts:
 *             copts.in_use = False
 */
  __Pyx_DECREF(__pyx_v_py_handle); __pyx_v_py_handle = 0;

  /* "rocksdb/_rocksdb.pyx":2648
 *         del self.cf_handles[index]
 *         del py_handle
 *         if copts:             # <<<<<<<<<<<<<<
 *             copts.in_use = False
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_copts)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 2648, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "rocksdb/_rocksdb.pyx":2649
 *         del py_handle
 *         if copts:
 *             copts.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def try_catch_up_with_primary(self):
 */
    __pyx_v_copts->in_use = 0;

    /* "rocksdb/_rocksdb.pyx":2648
 *         del self.cf_handles[index]
 *         del py_handle
 *         if copts:             # <<<<<<<<<<<<<<
 *             copts.in_use = False
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2632
 *         return handle.weakref
 * 
 *     def drop_column_family(self, ColumnFamilyHandle weak_handle not None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef ColumnFamilyOptions copts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.drop_column_family", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copts);
  __Pyx_XDECREF(__pyx_v_py_handle);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2651
 *             copts.in_use = False
 * 
 *     def try_catch_up_with_primary(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.TryCatchUpWithPrimary()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_51try_catch_up_with_primary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_51try_catch_up_with_primary = {"try_catch_up_with_primary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_51try_catch_up_with_primary, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_51try_catch_up_with_primary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("try_catch_up_with_primary (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2651, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("try_catch_up_with_primary", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "try_catch_up_with_primary", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.try_catch_up_with_primary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_50try_catch_up_with_primary(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_50try_catch_up_with_primary(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("try_catch_up_with_primary", 0);

  /* "rocksdb/_rocksdb.pyx":2652
 * 
 *     def try_catch_up_with_primary(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.TryCatchUpWithPrimary()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2653
 *     def try_catch_up_with_primary(self):
 *         with nogil:
 *             self.wrapped_db.TryCatchUpWithPrimary()             # <<<<<<<<<<<<<<
 * 
 * 
 */
        try {
          __pyx_v_self->wrapped_db->TryCatchUpWithPrimary();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2653, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2652
 * 
 *     def try_catch_up_with_primary(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.wrapped_db.TryCatchUpWithPrimary()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2651
 *             copts.in_use = False
 * 
 *     def try_catch_up_with_primary(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.TryCatchUpWithPrimary()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.try_catch_up_with_primary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_53__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_53__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_53__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_53__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_52__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_52__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_55__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_55__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_55__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_55__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_54__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_54__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2656
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_1repair_db(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_1repair_db = {"repair_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_1repair_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_1repair_db(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_db_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("repair_db (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2656, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_name,&__pyx_n_s_opts,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2656, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opts)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2656, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("repair_db", 1, 2, 2, 1); __PYX_ERR(0, 2656, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "repair_db") < 0)) __PYX_ERR(0, 2656, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_db_name = values[0];
    __pyx_v_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("repair_db", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2656, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.repair_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opts), __pyx_ptype_7rocksdb_8_rocksdb_Options, 1, "opts", 0))) __PYX_ERR(0, 2656, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_repair_db(__pyx_self, __pyx_v_db_name, __pyx_v_opts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_repair_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_db_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("repair_db", 0);

  /* "rocksdb/_rocksdb.pyx":2660
 *     cdef string db_path
 * 
 *     db_path = path_to_string(db_name)             # <<<<<<<<<<<<<<
 *     st = db.RepairDB(db_path, deref(opts.opts))
 *     check_status(st)
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2660, __pyx_L1_error)
  __pyx_v_db_path = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2661
 * 
 *     db_path = path_to_string(db_name)
 *     st = db.RepairDB(db_path, deref(opts.opts))             # <<<<<<<<<<<<<<
 *     check_status(st)
 * 
 */
  __pyx_v_st = rocksdb::RepairDB(__pyx_v_db_path, (*__pyx_v_opts->opts));

  /* "rocksdb/_rocksdb.pyx":2662
 *     db_path = path_to_string(db_name)
 *     st = db.RepairDB(db_path, deref(opts.opts))
 *     check_status(st)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2656
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.repair_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2665
 * 
 * 
 * def list_column_families(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_3list_column_families(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_3list_column_families = {"list_column_families", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_3list_column_families, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_3list_column_families(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_db_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_column_families (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2665, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_name,&__pyx_n_s_opts,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2665, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opts)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2665, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("list_column_families", 1, 2, 2, 1); __PYX_ERR(0, 2665, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "list_column_families") < 0)) __PYX_ERR(0, 2665, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_db_name = values[0];
    __pyx_v_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_column_families", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2665, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.list_column_families", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opts), __pyx_ptype_7rocksdb_8_rocksdb_Options, 1, "opts", 0))) __PYX_ERR(0, 2665, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2list_column_families(__pyx_self, __pyx_v_db_name, __pyx_v_opts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2list_column_families(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_db_path;
  std::vector<std::string>  __pyx_v_column_families;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_column_families", 0);

  /* "rocksdb/_rocksdb.pyx":2670
 *     cdef vector[string] column_families
 * 
 *     db_path = path_to_string(db_name)             # <<<<<<<<<<<<<<
 *     with nogil:
 *         st = db.ListColumnFamilies(deref(opts.opts), db_path, &column_families)
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2670, __pyx_L1_error)
  __pyx_v_db_path = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2671
 * 
 *     db_path = path_to_string(db_name)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = db.ListColumnFamilies(deref(opts.opts), db_path, &column_families)
 *     check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2672
 *     db_path = path_to_string(db_name)
 *     with nogil:
 *         st = db.ListColumnFamilies(deref(opts.opts), db_path, &column_families)             # <<<<<<<<<<<<<<
 *     check_status(st)
 * 
 */
        try {
          __pyx_t_2 = rocksdb::DB::ListColumnFamilies((*__pyx_v_opts->opts), __pyx_v_db_path, (&__pyx_v_column_families));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2672, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2671
 * 
 *     db_path = path_to_string(db_name)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = db.ListColumnFamilies(deref(opts.opts), db_path, &column_families)
 *     check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2673
 *     with nogil:
 *         st = db.ListColumnFamilies(deref(opts.opts), db_path, &column_families)
 *     check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     return column_families
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2675
 *     check_status(st)
 * 
 *     return column_families             # <<<<<<<<<<<<<<
 * 
 * @cython.no_gc_clear
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_column_families); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2665
 * 
 * 
 * def list_column_families(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.list_column_families", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2681
 *     cdef TransactionDBOptions tdb_opts
 * 
 *     def __cinit__(self, db_name, Options opts,             # <<<<<<<<<<<<<<
 *                   dict column_families=None,
 *                   TransactionDBOptions tdb_opts=None,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_db_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts = 0;
  CYTHON_UNUSED PyObject *__pyx_v_column_families = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_tdb_opts = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2681, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 4, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_name,&__pyx_n_s_opts,&__pyx_n_s_column_families,&__pyx_n_s_tdb_opts,0};

    /* "rocksdb/_rocksdb.pyx":2682
 * 
 *     def __cinit__(self, db_name, Options opts,
 *                   dict column_families=None,             # <<<<<<<<<<<<<<
 *                   TransactionDBOptions tdb_opts=None,
 *                   *args, **kwargs):
 */
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject*)Py_None));

    /* "rocksdb/_rocksdb.pyx":2683
 *     def __cinit__(self, db_name, Options opts,
 *                   dict column_families=None,
 *                   TransactionDBOptions tdb_opts=None,             # <<<<<<<<<<<<<<
 *                   *args, **kwargs):
 *         self.tdb_opts = None
 */
    values[3] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2681, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opts)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2681, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, 1); __PYX_ERR(0, 2681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_families);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tdb_opts);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2681, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 4) ? kwd_pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2681, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_db_name = values[0];
    __pyx_v_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)values[1]);
    __pyx_v_column_families = ((PyObject*)values[2]);
    __pyx_v_tdb_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 2681, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opts), __pyx_ptype_7rocksdb_8_rocksdb_Options, 1, "opts", 0))) __PYX_ERR(0, 2681, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_column_families), (&PyDict_Type), 1, "column_families", 1))) __PYX_ERR(0, 2682, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tdb_opts), __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions, 1, "tdb_opts", 0))) __PYX_ERR(0, 2683, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self), __pyx_v_db_name, __pyx_v_opts, __pyx_v_column_families, __pyx_v_tdb_opts, __pyx_v_args, __pyx_v_kwargs);

  /* "rocksdb/_rocksdb.pyx":2681
 *     cdef TransactionDBOptions tdb_opts
 * 
 *     def __cinit__(self, db_name, Options opts,             # <<<<<<<<<<<<<<
 *                   dict column_families=None,
 *                   TransactionDBOptions tdb_opts=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts, CYTHON_UNUSED PyObject *__pyx_v_column_families, struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *__pyx_v_tdb_opts, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  std::string __pyx_v_db_path;
  rocksdb::Status __pyx_v_st;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  rocksdb::Status __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":2685
 *                   TransactionDBOptions tdb_opts=None,
 *                   *args, **kwargs):
 *         self.tdb_opts = None             # <<<<<<<<<<<<<<
 *         db_path = path_to_string(db_name)
 *         if tdb_opts.in_use:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->tdb_opts);
  __Pyx_DECREF((PyObject *)__pyx_v_self->tdb_opts);
  __pyx_v_self->tdb_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)Py_None);

  /* "rocksdb/_rocksdb.pyx":2686
 *                   *args, **kwargs):
 *         self.tdb_opts = None
 *         db_path = path_to_string(db_name)             # <<<<<<<<<<<<<<
 *         if tdb_opts.in_use:
 *             raise InvalidArgument(
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2686, __pyx_L1_error)
  __pyx_v_db_path = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2687
 *         self.tdb_opts = None
 *         db_path = path_to_string(db_name)
 *         if tdb_opts.in_use:             # <<<<<<<<<<<<<<
 *             raise InvalidArgument(
 *                 "Transaction Options object is already used by another DB")
 */
  __pyx_t_2 = (__pyx_v_tdb_opts->in_use != 0);
  if (unlikely(__pyx_t_2)) {

    /* "rocksdb/_rocksdb.pyx":2688
 *         db_path = path_to_string(db_name)
 *         if tdb_opts.in_use:
 *             raise InvalidArgument(             # <<<<<<<<<<<<<<
 *                 "Transaction Options object is already used by another DB")
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_Transaction_Options_object_is_al};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2688, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2688, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2687
 *         self.tdb_opts = None
 *         db_path = path_to_string(db_name)
 *         if tdb_opts.in_use:             # <<<<<<<<<<<<<<
 *             raise InvalidArgument(
 *                 "Transaction Options object is already used by another DB")
 */
  }

  /* "rocksdb/_rocksdb.pyx":2691
 *                 "Transaction Options object is already used by another DB")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = transaction_db.TransactionDB_Open_ColumnFamilies(
 *                 deref(opts.opts),
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2692
 * 
 *         with nogil:
 *             st = transaction_db.TransactionDB_Open_ColumnFamilies(             # <<<<<<<<<<<<<<
 *                 deref(opts.opts),
 *                 deref(tdb_opts.opts),
 */
        try {
          __pyx_t_7 = rocksdb::TransactionDB::Open((*__pyx_v_opts->opts), (*__pyx_v_tdb_opts->opts), __pyx_v_db_path, __pyx_v_self->__pyx_base.column_family_descriptors, (&__pyx_v_self->__pyx_base.column_family_handles), ((rocksdb::TransactionDB **)(&__pyx_v_self->__pyx_base.wrapped_db)));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2692, __pyx_L5_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);
      }

      /* "rocksdb/_rocksdb.pyx":2691
 *                 "Transaction Options object is already used by another DB")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = transaction_db.TransactionDB_Open_ColumnFamilies(
 *                 deref(opts.opts),
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2699
 *                 &self.column_family_handles,
 *                 <transaction_db.TransactionDB **>&self.wrapped_db)
 *         self.post_init_steps(st, opts)             # <<<<<<<<<<<<<<
 *         self.tdb_opts = tdb_opts
 *         self.tdb_opts.in_use = True
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.post_init_steps(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_st, __pyx_v_opts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2700
 *                 <transaction_db.TransactionDB **>&self.wrapped_db)
 *         self.post_init_steps(st, opts)
 *         self.tdb_opts = tdb_opts             # <<<<<<<<<<<<<<
 *         self.tdb_opts.in_use = True
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_tdb_opts);
  __Pyx_GIVEREF((PyObject *)__pyx_v_tdb_opts);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->tdb_opts);
  __Pyx_DECREF((PyObject *)__pyx_v_self->tdb_opts);
  __pyx_v_self->tdb_opts = __pyx_v_tdb_opts;

  /* "rocksdb/_rocksdb.pyx":2701
 *         self.post_init_steps(st, opts)
 *         self.tdb_opts = tdb_opts
 *         self.tdb_opts.in_use = True             # <<<<<<<<<<<<<<
 * 
 *     property transaction_options:
 */
  __pyx_v_self->tdb_opts->in_use = 1;

  /* "rocksdb/_rocksdb.pyx":2681
 *     cdef TransactionDBOptions tdb_opts
 * 
 *     def __cinit__(self, db_name, Options opts,             # <<<<<<<<<<<<<<
 *                   dict column_families=None,
 *                   TransactionDBOptions tdb_opts=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2704
 * 
 *     property transaction_options:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.tdb_opts
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_19transaction_options_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_19transaction_options_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_19transaction_options___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_19transaction_options___get__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":2705
 *     property transaction_options:
 *         def __get__(self):
 *             return self.tdb_opts             # <<<<<<<<<<<<<<
 * 
 *     def close(self, safe=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->tdb_opts);
  __pyx_r = ((PyObject *)__pyx_v_self->tdb_opts);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2704
 * 
 *     property transaction_options:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.tdb_opts
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2707
 *             return self.tdb_opts
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13TransactionDB_3close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_safe = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2707, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_safe,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_safe);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2707, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "close") < 0)) __PYX_ERR(0, 2707, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_safe = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("close", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 2707, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_2close(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self), __pyx_v_safe);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_2close(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self, PyObject *__pyx_v_safe) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *__pyx_v_copts = 0;
  bool __pyx_v_c_safe;
  CYTHON_UNUSED rocksdb::Status __pyx_v_st;
  CYTHON_UNUSED rocksdb::ColumnFamilyHandle *__pyx_v_cfhandle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  std::vector<rocksdb::ColumnFamilyHandle *> ::iterator __pyx_t_3;
  rocksdb::ColumnFamilyHandle *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  rocksdb::Status __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);

  /* "rocksdb/_rocksdb.pyx":2709
 *     def close(self, safe=True):
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         if self.wrapped_db != NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_safe); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2709, __pyx_L1_error)
  __pyx_v_c_safe = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2711
 *         cdef cpp_bool c_safe = safe
 *         cdef Status st
 *         if self.wrapped_db != NULL:             # <<<<<<<<<<<<<<
 *             # We need stop backround compactions
 *             with nogil:
 */
  __pyx_t_2 = (__pyx_v_self->__pyx_base.wrapped_db != NULL);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":2713
 *         if self.wrapped_db != NULL:
 *             # We need stop backround compactions
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 db.CancelAllBackgroundWork(self.wrapped_db, c_safe)
 *             # We have to make sure we delete the handles so rocksdb doesn't
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2714
 *             # We need stop backround compactions
 *             with nogil:
 *                 db.CancelAllBackgroundWork(self.wrapped_db, c_safe)             # <<<<<<<<<<<<<<
 *             # We have to make sure we delete the handles so rocksdb doesn't
 *             # assert when we delete the db
 */
          try {
            rocksdb::CancelAllBackgroundWork(__pyx_v_self->__pyx_base.wrapped_db, __pyx_v_c_safe);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2714, __pyx_L5_error)
          }
        }

        /* "rocksdb/_rocksdb.pyx":2713
 *         if self.wrapped_db != NULL:
 *             # We need stop backround compactions
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 db.CancelAllBackgroundWork(self.wrapped_db, c_safe)
 *             # We have to make sure we delete the handles so rocksdb doesn't
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L5_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2717
 *             # We have to make sure we delete the handles so rocksdb doesn't
 *             # assert when we delete the db
 *             del self.cf_handles[:]             # <<<<<<<<<<<<<<
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL
 */
    if (unlikely(__pyx_v_self->__pyx_base.cf_handles == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2717, __pyx_L1_error)
    }
    if (__Pyx_PyObject_DelSlice(__pyx_v_self->__pyx_base.cf_handles, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 2717, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2718
 *             # assert when we delete the db
 *             del self.cf_handles[:]
 *             for cfhandle in self.column_family_handles:             # <<<<<<<<<<<<<<
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 */
    __pyx_t_3 = __pyx_v_self->__pyx_base.column_family_handles.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_self->__pyx_base.column_family_handles.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_v_cfhandle = __pyx_t_4;

      /* "rocksdb/_rocksdb.pyx":2719
 *             del self.cf_handles[:]
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL             # <<<<<<<<<<<<<<
 *             for copts in self.cf_options:
 *                 if copts:
 */
      __pyx_v_cfhandle = NULL;

      /* "rocksdb/_rocksdb.pyx":2718
 *             # assert when we delete the db
 *             del self.cf_handles[:]
 *             for cfhandle in self.column_family_handles:             # <<<<<<<<<<<<<<
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 */
    }

    /* "rocksdb/_rocksdb.pyx":2720
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL
 *             for copts in self.cf_options:             # <<<<<<<<<<<<<<
 *                 if copts:
 *                     copts.in_use = False
 */
    if (unlikely(__pyx_v_self->__pyx_base.cf_options == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 2720, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_v_self->__pyx_base.cf_options; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2720, __pyx_L1_error)
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2720, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions))))) __PYX_ERR(0, 2720, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_copts, ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":2721
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 *                 if copts:             # <<<<<<<<<<<<<<
 *                     copts.in_use = False
 *             del self.cf_options[:]
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_copts)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 2721, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "rocksdb/_rocksdb.pyx":2722
 *             for copts in self.cf_options:
 *                 if copts:
 *                     copts.in_use = False             # <<<<<<<<<<<<<<
 *             del self.cf_options[:]
 *             with nogil:
 */
        __pyx_v_copts->in_use = 0;

        /* "rocksdb/_rocksdb.pyx":2721
 *                 cfhandle = NULL
 *             for copts in self.cf_options:
 *                 if copts:             # <<<<<<<<<<<<<<
 *                     copts.in_use = False
 *             del self.cf_options[:]
 */
      }

      /* "rocksdb/_rocksdb.pyx":2720
 *             for cfhandle in self.column_family_handles:
 *                 cfhandle = NULL
 *             for copts in self.cf_options:             # <<<<<<<<<<<<<<
 *                 if copts:
 *                     copts.in_use = False
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "rocksdb/_rocksdb.pyx":2723
 *                 if copts:
 *                     copts.in_use = False
 *             del self.cf_options[:]             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()
 */
    if (unlikely(__pyx_v_self->__pyx_base.cf_options == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2723, __pyx_L1_error)
    }
    if (__Pyx_PyObject_DelSlice(__pyx_v_self->__pyx_base.cf_options, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 2723, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":2724
 *                     copts.in_use = False
 *             del self.cf_options[:]
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()
 *             if self.opts is not None:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2725
 *             del self.cf_options[:]
 *             with nogil:
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()             # <<<<<<<<<<<<<<
 *             if self.opts is not None:
 *                 self.opts.in_use = False
 */
          try {
            __pyx_t_8 = ((rocksdb::TransactionDB *)__pyx_v_self->__pyx_base.wrapped_db)->Close();
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2725, __pyx_L15_error)
          }
          __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);
        }

        /* "rocksdb/_rocksdb.pyx":2724
 *                     copts.in_use = False
 *             del self.cf_options[:]
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()
 *             if self.opts is not None:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L16;
          }
          __pyx_L15_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L16:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2726
 *             with nogil:
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()
 *             if self.opts is not None:             # <<<<<<<<<<<<<<
 *                 self.opts.in_use = False
 *             if self.tdb_opts is not None:
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_self->__pyx_base.opts) != Py_None);
    if (__pyx_t_2) {

      /* "rocksdb/_rocksdb.pyx":2727
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()
 *             if self.opts is not None:
 *                 self.opts.in_use = False             # <<<<<<<<<<<<<<
 *             if self.tdb_opts is not None:
 *                 self.tdb_opts.in_use = False
 */
      __pyx_v_self->__pyx_base.opts->__pyx_base.in_use = 0;

      /* "rocksdb/_rocksdb.pyx":2726
 *             with nogil:
 *                 st = (<transaction_db.TransactionDB *>(self.wrapped_db)).Close()
 *             if self.opts is not None:             # <<<<<<<<<<<<<<
 *                 self.opts.in_use = False
 *             if self.tdb_opts is not None:
 */
    }

    /* "rocksdb/_rocksdb.pyx":2728
 *             if self.opts is not None:
 *                 self.opts.in_use = False
 *             if self.tdb_opts is not None:             # <<<<<<<<<<<<<<
 *                 self.tdb_opts.in_use = False
 * 
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_self->tdb_opts) != Py_None);
    if (__pyx_t_2) {

      /* "rocksdb/_rocksdb.pyx":2729
 *                 self.opts.in_use = False
 *             if self.tdb_opts is not None:
 *                 self.tdb_opts.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->tdb_opts->in_use = 0;

      /* "rocksdb/_rocksdb.pyx":2728
 *             if self.opts is not None:
 *                 self.opts.in_use = False
 *             if self.tdb_opts is not None:             # <<<<<<<<<<<<<<
 *                 self.tdb_opts.in_use = False
 * 
 */
    }

    /* "rocksdb/_rocksdb.pyx":2711
 *         cdef cpp_bool c_safe = safe
 *         cdef Status st
 *         if self.wrapped_db != NULL:             # <<<<<<<<<<<<<<
 *             # We need stop backround compactions
 *             with nogil:
 */
  }

  /* "rocksdb/_rocksdb.pyx":2707
 *             return self.tdb_opts
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2731
 *                 self.tdb_opts.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_4__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_4__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":2732
 * 
 *     def __dealloc__(self):
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 * @cython.no_gc_clear
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2731
 *                 self.tdb_opts.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.TransactionDB.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13TransactionDB_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_6__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13TransactionDB_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_8__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13TransactionDB_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.TransactionDB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2740
 *     cdef DB db
 * 
 *     def __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2740, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2740, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2740, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2740, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 2740, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_8Snapshot___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_v_self), __pyx_v_db);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_8Snapshot___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Snapshot const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":2741
 * 
 *     def __cinit__(self, DB db):
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 *         with nogil: self.ptr = db.wrapped_db.GetSnapshot()
 */
  __Pyx_INCREF((PyObject *)__pyx_v_db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_db);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->db);
  __Pyx_DECREF((PyObject *)__pyx_v_self->db);
  __pyx_v_self->db = __pyx_v_db;

  /* "rocksdb/_rocksdb.pyx":2742
 *     def __cinit__(self, DB db):
 *         self.db = db
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 *         with nogil: self.ptr = db.wrapped_db.GetSnapshot()
 * 
 */
  __pyx_v_self->ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":2743
 *         self.db = db
 *         self.ptr = NULL
 *         with nogil: self.ptr = db.wrapped_db.GetSnapshot()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        try {
          __pyx_t_1 = __pyx_v_db->wrapped_db->GetSnapshot();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2743, __pyx_L4_error)
        }
        __pyx_v_self->ptr = __pyx_t_1;
      }
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2740
 *     cdef DB db
 * 
 *     def __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2745
 *         with nogil: self.ptr = db.wrapped_db.GetSnapshot()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             with nogil:
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":2746
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self.db.wrapped_db.ReleaseSnapshot(self.ptr)
 */
  __pyx_t_1 = (!(__pyx_v_self->ptr == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2747
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self.db.wrapped_db.ReleaseSnapshot(self.ptr)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2748
 *         if not self.ptr == NULL:
 *             with nogil:
 *                 self.db.wrapped_db.ReleaseSnapshot(self.ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_self->db->wrapped_db->ReleaseSnapshot(__pyx_v_self->ptr);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2748, __pyx_L5_error)
          }
        }

        /* "rocksdb/_rocksdb.pyx":2747
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self.db.wrapped_db.ReleaseSnapshot(self.ptr)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L5_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2746
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self.db.wrapped_db.ReleaseSnapshot(self.ptr)
 */
  }

  /* "rocksdb/_rocksdb.pyx":2745
 *         with nogil: self.ptr = db.wrapped_db.GetSnapshot()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             with nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rocksdb._rocksdb.Snapshot.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_8Snapshot_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_4__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_8Snapshot_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_8Snapshot_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_6__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_8Snapshot_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2757
 *     cdef ColumnFamilyHandle handle
 * 
 *     def __cinit__(self, DB db, ColumnFamilyHandle handle = None):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_handle = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2757, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_handle,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2757, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_handle);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2757, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2757, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
    __pyx_v_handle = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 2757, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 2757, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_handle), __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, 1, "handle", 0))) __PYX_ERR(0, 2757, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), __pyx_v_db, __pyx_v_handle);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db, struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *__pyx_v_handle) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":2758
 * 
 *     def __cinit__(self, DB db, ColumnFamilyHandle handle = None):
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 *         self.handle = handle
 */
  __Pyx_INCREF((PyObject *)__pyx_v_db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_db);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->db);
  __Pyx_DECREF((PyObject *)__pyx_v_self->db);
  __pyx_v_self->db = __pyx_v_db;

  /* "rocksdb/_rocksdb.pyx":2759
 *     def __cinit__(self, DB db, ColumnFamilyHandle handle = None):
 *         self.db = db
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 *         self.handle = handle
 * 
 */
  __pyx_v_self->ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":2760
 *         self.db = db
 *         self.ptr = NULL
 *         self.handle = handle             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_handle);
  __Pyx_GIVEREF((PyObject *)__pyx_v_handle);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->handle);
  __Pyx_DECREF((PyObject *)__pyx_v_self->handle);
  __pyx_v_self->handle = __pyx_v_handle;

  /* "rocksdb/_rocksdb.pyx":2757
 *     cdef ColumnFamilyHandle handle
 * 
 *     def __cinit__(self, DB db, ColumnFamilyHandle handle = None):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2762
 *         self.handle = handle
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":2763
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->ptr == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2764
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:
 *             del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
    delete __pyx_v_self->ptr;

    /* "rocksdb/_rocksdb.pyx":2763
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2762
 *         self.handle = handle
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":2766
 *             del self.ptr
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_4__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_4__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":2767
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2766
 *             del self.ptr
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2769
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr.Valid():
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_6__next__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_6__next__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_error_without_exception = 0; /* StopIteration */
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  rocksdb::Status __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "rocksdb/_rocksdb.pyx":2770
 * 
 *     def __next__(self):
 *         if not self.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->ptr->Valid();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2770, __pyx_L1_error)
  }
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (unlikely(__pyx_t_2)) {

    /* "rocksdb/_rocksdb.pyx":2771
 *     def __next__(self):
 *         if not self.ptr.Valid():
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         cdef object ret = self.get_ob()
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "rocksdb/_rocksdb.pyx":2770
 * 
 *     def __next__(self):
 *         if not self.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2773
 *             raise StopIteration()
 * 
 *         cdef object ret = self.get_ob()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.Next()
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->__pyx_vtab)->get_ob(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ret = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2774
 * 
 *         cdef object ret = self.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Next()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2775
 *         cdef object ret = self.get_ob()
 *         with nogil:
 *             self.ptr.Next()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         return ret
 */
        try {
          __pyx_v_self->ptr->Next();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2775, __pyx_L5_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2774
 * 
 *         cdef object ret = self.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Next()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2776
 *         with nogil:
 *             self.ptr.Next()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2776, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2777
 *             self.ptr.Next()
 *         check_status(self.ptr.status())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2769
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr.Valid():
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  if (!__pyx_error_without_exception) {
    __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2779
 *         return ret
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef object ret = self.get_ob()
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_9get = {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2779, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_8get(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_8get(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "rocksdb/_rocksdb.pyx":2780
 * 
 *     def get(self):
 *         cdef object ret = self.get_ob()             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->__pyx_vtab)->get_ob(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2781
 *     def get(self):
 *         cdef object ret = self.get_ob()
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def __reversed__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2779
 *         return ret
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef object ret = self.get_ob()
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2783
 *         return ret
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return ReversedIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__ = {"__reversed__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reversed__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2783, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reversed__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reversed__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__reversed__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_10__reversed__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_10__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reversed__", 0);

  /* "rocksdb/_rocksdb.pyx":2784
 * 
 *     def __reversed__(self):
 *         return ReversedIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek_to_first(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2783
 *         return ret
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return ReversedIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__reversed__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2786
 *         return ReversedIterator(self)
 * 
 *     cpdef seek_to_first(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToFirst()
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  rocksdb::Status __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_first", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_to_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2786, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "rocksdb/_rocksdb.pyx":2787
 * 
 *     cpdef seek_to_first(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToFirst()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2788
 *     cpdef seek_to_first(self):
 *         with nogil:
 *             self.ptr.SeekToFirst()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->SeekToFirst();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2788, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2787
 * 
 *     cpdef seek_to_first(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToFirst()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2789
 *         with nogil:
 *             self.ptr.SeekToFirst()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek_to_last(self):
 */
  try {
    __pyx_t_6 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2789, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2786
 *         return ReversedIterator(self)
 * 
 *     cpdef seek_to_first(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToFirst()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first = {"seek_to_first", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_first (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2786, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_first", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_first", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_12seek_to_first(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_12seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_first", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2791
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_to_last(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToLast()
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  rocksdb::Status __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_last", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_to_last); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2791, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "rocksdb/_rocksdb.pyx":2792
 * 
 *     cpdef seek_to_last(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToLast()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2793
 *     cpdef seek_to_last(self):
 *         with nogil:
 *             self.ptr.SeekToLast()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->SeekToLast();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2793, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2792
 * 
 *     cpdef seek_to_last(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToLast()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2794
 *         with nogil:
 *             self.ptr.SeekToLast()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek(self, key):
 */
  try {
    __pyx_t_6 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2791
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_to_last(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToLast()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last = {"seek_to_last", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_last (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2791, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_last", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_last", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_14seek_to_last(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_14seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_last", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2796
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  rocksdb::Slice __pyx_t_6;
  rocksdb::Status __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2796, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "rocksdb/_rocksdb.pyx":2797
 * 
 *     cpdef seek(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.Seek(c_key)
 */
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2797, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "rocksdb/_rocksdb.pyx":2798
 *     cpdef seek(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Seek(c_key)
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2799
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 *             self.ptr.Seek(c_key)             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->Seek(__pyx_v_c_key);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2799, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2798
 *     cpdef seek(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Seek(c_key)
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2800
 *         with nogil:
 *             self.ptr.Seek(c_key)
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek_for_prev(self, key):
 */
  try {
    __pyx_t_7 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2800, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2796
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_17seek = {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2796, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2796, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "seek") < 0)) __PYX_ERR(0, 2796, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2796, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_16seek(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_16seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2802
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  rocksdb::Slice __pyx_t_6;
  rocksdb::Status __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_for_prev", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_for_prev); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2802, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "rocksdb/_rocksdb.pyx":2803
 * 
 *     cpdef seek_for_prev(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekForPrev(c_key)
 */
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2803, __pyx_L1_error)
  __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "rocksdb/_rocksdb.pyx":2804
 *     cpdef seek_for_prev(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekForPrev(c_key)
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2805
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 *             self.ptr.SeekForPrev(c_key)             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->SeekForPrev(__pyx_v_c_key);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2805, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2804
 *     cpdef seek_for_prev(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekForPrev(c_key)
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2806
 *         with nogil:
 *             self.ptr.SeekForPrev(c_key)
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
  try {
    __pyx_t_7 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2806, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2802
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev = {"seek_for_prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_for_prev (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2802, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2802, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "seek_for_prev") < 0)) __PYX_ERR(0, 2802, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek_for_prev", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2802, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_18seek_for_prev(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_18seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_for_prev", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2808
 *         check_status(self.ptr.status())
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":2809
 * 
 *     cdef object get_ob(self):
 *         return None             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2808
 *         check_status(self.ptr.status())
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_20__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_22__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2813
 * @cython.internal
 * cdef class KeysIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         with nogil:
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12KeysIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self) {
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":2815
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2816
 *         cdef Slice c_key
 *         with nogil:
 *             c_key = self.ptr.key()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         if self.handle:
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->key();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2816, __pyx_L4_error)
        }
        __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
      }

      /* "rocksdb/_rocksdb.pyx":2815
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2817
 *         with nogil:
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         if self.handle:
 *             return self.handle, slice_to_bytes(c_key)
 */
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2817, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2818
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 *         if self.handle:             # <<<<<<<<<<<<<<
 *             return self.handle, slice_to_bytes(c_key)
 *         return slice_to_bytes(c_key)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->__pyx_base.handle)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2818, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2819
 *         check_status(self.ptr.status())
 *         if self.handle:
 *             return self.handle, slice_to_bytes(c_key)             # <<<<<<<<<<<<<<
 *         return slice_to_bytes(c_key)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.handle);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.handle);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self->__pyx_base.handle))) __PYX_ERR(0, 2819, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(0, 2819, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2818
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 *         if self.handle:             # <<<<<<<<<<<<<<
 *             return self.handle, slice_to_bytes(c_key)
 *         return slice_to_bytes(c_key)
 */
  }

  /* "rocksdb/_rocksdb.pyx":2820
 *         if self.handle:
 *             return self.handle, slice_to_bytes(c_key)
 *         return slice_to_bytes(c_key)             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2813
 * @cython.internal
 * cdef class KeysIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.KeysIterator.get_ob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12KeysIterator_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.KeysIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12KeysIterator___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12KeysIterator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.KeysIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12KeysIterator_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.KeysIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12KeysIterator_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12KeysIterator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.KeysIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2824
 * @cython.internal
 * cdef class ValuesIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_value
 *         with nogil:
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14ValuesIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self) {
  rocksdb::Slice __pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":2826
 *     cdef object get_ob(self):
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2827
 *         cdef Slice c_value
 *         with nogil:
 *             c_value = self.ptr.value()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         return slice_to_bytes(c_value)
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->value();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2827, __pyx_L4_error)
        }
        __pyx_v_c_value = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
      }

      /* "rocksdb/_rocksdb.pyx":2826
 *     cdef object get_ob(self):
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2828
 *         with nogil:
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         return slice_to_bytes(c_value)
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2828, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2829
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 *         return slice_to_bytes(c_value)             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2824
 * @cython.internal
 * cdef class ValuesIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_value
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ValuesIterator.get_ob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_14ValuesIterator_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ValuesIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_14ValuesIterator___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14ValuesIterator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ValuesIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_14ValuesIterator_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ValuesIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_14ValuesIterator_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_14ValuesIterator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ValuesIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2833
 * @cython.internal
 * cdef class ItemsIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         cdef Slice c_value
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_13ItemsIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self) {
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::Slice __pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":2836
 *         cdef Slice c_key
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2837
 *         cdef Slice c_value
 *         with nogil:
 *             c_key = self.ptr.key()             # <<<<<<<<<<<<<<
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->key();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2837, __pyx_L4_error)
        }
        __pyx_v_c_key = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

        /* "rocksdb/_rocksdb.pyx":2838
 *         with nogil:
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         if self.handle:
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->value();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2838, __pyx_L4_error)
        }
        __pyx_v_c_value = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
      }

      /* "rocksdb/_rocksdb.pyx":2836
 *         cdef Slice c_key
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2839
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         if self.handle:
 *             return ((self.handle, slice_to_bytes(c_key)), slice_to_bytes(c_value))
 */
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2839, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2840
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 *         if self.handle:             # <<<<<<<<<<<<<<
 *             return ((self.handle, slice_to_bytes(c_key)), slice_to_bytes(c_value))
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->__pyx_base.handle)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 2840, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":2841
 *         check_status(self.ptr.status())
 *         if self.handle:
 *             return ((self.handle, slice_to_bytes(c_key)), slice_to_bytes(c_value))             # <<<<<<<<<<<<<<
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.handle);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.handle);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self->__pyx_base.handle))) __PYX_ERR(0, 2841, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(0, 2841, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5)) __PYX_ERR(0, 2841, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3)) __PYX_ERR(0, 2841, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":2840
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 *         if self.handle:             # <<<<<<<<<<<<<<
 *             return ((self.handle, slice_to_bytes(c_key)), slice_to_bytes(c_value))
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))
 */
  }

  /* "rocksdb/_rocksdb.pyx":2842
 *         if self.handle:
 *             return ((self.handle, slice_to_bytes(c_key)), slice_to_bytes(c_value))
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6)) __PYX_ERR(0, 2842, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(0, 2842, __pyx_L1_error);
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2833
 * @cython.internal
 * cdef class ItemsIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         cdef Slice c_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rocksdb._rocksdb.ItemsIterator.get_ob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13ItemsIterator_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ItemsIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13ItemsIterator___reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13ItemsIterator___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ItemsIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13ItemsIterator_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ItemsIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_13ItemsIterator_2__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_13ItemsIterator_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ItemsIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2848
 *     cdef BaseIterator it
 * 
 *     def __cinit__(self, BaseIterator it):             # <<<<<<<<<<<<<<
 *         self.it = it
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_it = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2848, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_it,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_it)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2848, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2848, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2848, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_it), __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, 1, "it", 0))) __PYX_ERR(0, 2848, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), __pyx_v_it);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_it) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":2849
 * 
 *     def __cinit__(self, BaseIterator it):
 *         self.it = it             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_first(self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_it);
  __Pyx_GIVEREF((PyObject *)__pyx_v_it);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->it);
  __Pyx_DECREF((PyObject *)__pyx_v_self->it);
  __pyx_v_self->it = __pyx_v_it;

  /* "rocksdb/_rocksdb.pyx":2848
 *     cdef BaseIterator it
 * 
 *     def __cinit__(self, BaseIterator it):             # <<<<<<<<<<<<<<
 *         self.it = it
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2851
 *         self.it = it
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_first()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first = {"seek_to_first", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_first (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2851, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_first", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_first", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_2seek_to_first(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_2seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_first", 0);

  /* "rocksdb/_rocksdb.pyx":2852
 * 
 *     def seek_to_first(self):
 *         self.it.seek_to_first()             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_last(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek_to_first(__pyx_v_self->it, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2851
 *         self.it = it
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_first()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2854
 *         self.it.seek_to_first()
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_last()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last = {"seek_to_last", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_last (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2854, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_last", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_last", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_4seek_to_last(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_4seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_last", 0);

  /* "rocksdb/_rocksdb.pyx":2855
 * 
 *     def seek_to_last(self):
 *         self.it.seek_to_last()             # <<<<<<<<<<<<<<
 * 
 *     def seek(self, key):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek_to_last(__pyx_v_self->it, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2854
 *         self.it.seek_to_first()
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_last()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2857
 *         self.it.seek_to_last()
 * 
 *     def seek(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek(key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_7seek = {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2857, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2857, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "seek") < 0)) __PYX_ERR(0, 2857, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2857, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_6seek(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_6seek(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 0);

  /* "rocksdb/_rocksdb.pyx":2858
 * 
 *     def seek(self, key):
 *         self.it.seek(key)             # <<<<<<<<<<<<<<
 * 
 *     def seek_for_prev(self, key):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek(__pyx_v_self->it, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2857
 *         self.it.seek_to_last()
 * 
 *     def seek(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek(key)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2860
 *         self.it.seek(key)
 * 
 *     def seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek_for_prev(key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev = {"seek_for_prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_for_prev (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2860, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2860, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "seek_for_prev") < 0)) __PYX_ERR(0, 2860, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek_for_prev", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2860, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_8seek_for_prev(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_8seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_for_prev", 0);

  /* "rocksdb/_rocksdb.pyx":2861
 * 
 *     def seek_for_prev(self, key):
 *         self.it.seek_for_prev(key)             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek_for_prev(__pyx_v_self->it, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":2860
 *         self.it.seek(key)
 * 
 *     def seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek_for_prev(key)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2863
 *         self.it.seek_for_prev(key)
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         return self.it.get()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_11get = {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2863, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_10get(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_10get(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);

  /* "rocksdb/_rocksdb.pyx":2864
 * 
 *     def get(self):
 *         return self.it.get()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->it), __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2863
 *         self.it.seek_for_prev(key)
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         return self.it.get()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2866
 *         return self.it.get()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_12__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_12__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":2867
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __reversed__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2866
 *         return self.it.get()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2869
 *         return self
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return self.it
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__ = {"__reversed__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reversed__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2869, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reversed__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reversed__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__reversed__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_14__reversed__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_14__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reversed__", 0);

  /* "rocksdb/_rocksdb.pyx":2870
 * 
 *     def __reversed__(self):
 *         return self.it             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->it);
  __pyx_r = ((PyObject *)__pyx_v_self->it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2869
 *         return self
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return self.it
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2872
 *         return self.it
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.it.ptr.Valid():
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_16__next__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_16__next__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_error_without_exception = 0; /* StopIteration */
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  rocksdb::Status __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "rocksdb/_rocksdb.pyx":2873
 * 
 *     def __next__(self):
 *         if not self.it.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->it->ptr->Valid();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2873, __pyx_L1_error)
  }
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (unlikely(__pyx_t_2)) {

    /* "rocksdb/_rocksdb.pyx":2874
 *     def __next__(self):
 *         if not self.it.ptr.Valid():
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         cdef object ret = self.it.get_ob()
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "rocksdb/_rocksdb.pyx":2873
 * 
 *     def __next__(self):
 *         if not self.it.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":2876
 *             raise StopIteration()
 * 
 *         cdef object ret = self.it.get_ob()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.it.ptr.Prev()
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->get_ob(__pyx_v_self->it); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ret = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2877
 * 
 *         cdef object ret = self.it.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2878
 *         cdef object ret = self.it.get_ob()
 *         with nogil:
 *             self.it.ptr.Prev()             # <<<<<<<<<<<<<<
 *         check_status(self.it.ptr.status())
 *         return ret
 */
        try {
          __pyx_v_self->it->ptr->Prev();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2878, __pyx_L5_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2877
 * 
 *         cdef object ret = self.it.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2879
 *         with nogil:
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->it->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2879, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2880
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2872
 *         return self.it
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.it.ptr.Valid():
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  if (!__pyx_error_without_exception) {
    __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_18__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_20__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2886
 *     cdef checkpoint.Checkpoint* checkpoint
 * 
 *     def  __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         self.checkpoint = NULL
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2886, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2886, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2886, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2886, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 2886, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *)__pyx_v_self), __pyx_v_db);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db) {
  rocksdb::Status __pyx_v_st;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Status __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":2888
 *     def  __cinit__(self, DB db):
 *         cdef Status st
 *         self.checkpoint = NULL             # <<<<<<<<<<<<<<
 *         st = checkpoint.Checkpoint_Create(
 *             db.wrapped_db,
 */
  __pyx_v_self->checkpoint = NULL;

  /* "rocksdb/_rocksdb.pyx":2889
 *         cdef Status st
 *         self.checkpoint = NULL
 *         st = checkpoint.Checkpoint_Create(             # <<<<<<<<<<<<<<
 *             db.wrapped_db,
 *             cython.address(self.checkpoint))
 */
  try {
    __pyx_t_1 = rocksdb::Checkpoint::Create(__pyx_v_db->wrapped_db, (&__pyx_v_self->checkpoint));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2889, __pyx_L1_error)
  }
  __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2893
 *             cython.address(self.checkpoint))
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2886
 *     cdef checkpoint.Checkpoint* checkpoint
 * 
 *     def  __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         self.checkpoint = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2895
 *         check_status(st)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.checkpoint == NULL:
 *             with nogil:
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":2896
 * 
 *     def __dealloc__(self):
 *         if not self.checkpoint == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.checkpoint
 */
  __pyx_t_1 = (!(__pyx_v_self->checkpoint == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2897
 *     def __dealloc__(self):
 *         if not self.checkpoint == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.checkpoint
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2898
 *         if not self.checkpoint == NULL:
 *             with nogil:
 *                 del self.checkpoint             # <<<<<<<<<<<<<<
 * 
 *     def create_checkpoint(self, checkpoint_dir):
 */
          delete __pyx_v_self->checkpoint;
        }

        /* "rocksdb/_rocksdb.pyx":2897
 *     def __dealloc__(self):
 *         if not self.checkpoint == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.checkpoint
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2896
 * 
 *     def __dealloc__(self):
 *         if not self.checkpoint == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.checkpoint
 */
  }

  /* "rocksdb/_rocksdb.pyx":2895
 *         check_status(st)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.checkpoint == NULL:
 *             with nogil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":2900
 *                 del self.checkpoint
 * 
 *     def create_checkpoint(self, checkpoint_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_checkpoint_dir
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_5create_checkpoint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10Checkpoint_5create_checkpoint = {"create_checkpoint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_5create_checkpoint, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_5create_checkpoint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_checkpoint_dir = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_checkpoint (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2900, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_checkpoint_dir,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_checkpoint_dir)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2900, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "create_checkpoint") < 0)) __PYX_ERR(0, 2900, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_checkpoint_dir = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_checkpoint", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2900, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.create_checkpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_4create_checkpoint(((struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *)__pyx_v_self), __pyx_v_checkpoint_dir);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_4create_checkpoint(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self, PyObject *__pyx_v_checkpoint_dir) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_c_checkpoint_dir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_checkpoint", 0);

  /* "rocksdb/_rocksdb.pyx":2903
 *         cdef Status st
 *         cdef string c_checkpoint_dir
 *         c_checkpoint_dir = path_to_string(checkpoint_dir)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_checkpoint_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2903, __pyx_L1_error)
  __pyx_v_c_checkpoint_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2905
 *         c_checkpoint_dir = path_to_string(checkpoint_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.checkpoint.CreateCheckpoint(c_checkpoint_dir)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2906
 * 
 *         with nogil:
 *             st = self.checkpoint.CreateCheckpoint(c_checkpoint_dir)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->checkpoint->CreateCheckpoint(__pyx_v_c_checkpoint_dir);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2906, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2905
 *         c_checkpoint_dir = path_to_string(checkpoint_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.checkpoint.CreateCheckpoint(c_checkpoint_dir)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2907
 *         with nogil:
 *             st = self.checkpoint.CreateCheckpoint(c_checkpoint_dir)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2900
 *                 del self.checkpoint
 * 
 *     def create_checkpoint(self, checkpoint_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_checkpoint_dir
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.create_checkpoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10Checkpoint_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_6__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_10Checkpoint_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_8__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10Checkpoint_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Checkpoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2913
 *     cdef backup.BackupEngine* engine
 * 
 *     def  __cinit__(self, backup_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_backup_dir
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_backup_dir = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2913, __pyx_L3_error)
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_backup_dir,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_backup_dir)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2913, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2913, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_backup_dir = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2913, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_backup_dir);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_dir) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_c_backup_dir;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":2916
 *         cdef Status st
 *         cdef string c_backup_dir
 *         self.engine = NULL             # <<<<<<<<<<<<<<
 * 
 *         c_backup_dir = path_to_string(backup_dir)
 */
  __pyx_v_self->engine = NULL;

  /* "rocksdb/_rocksdb.pyx":2918
 *         self.engine = NULL
 * 
 *         c_backup_dir = path_to_string(backup_dir)             # <<<<<<<<<<<<<<
 *         st = backup.BackupEngine_Open(
 *             env.Env_Default(),
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_backup_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2918, __pyx_L1_error)
  __pyx_v_c_backup_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2919
 * 
 *         c_backup_dir = path_to_string(backup_dir)
 *         st = backup.BackupEngine_Open(             # <<<<<<<<<<<<<<
 *             env.Env_Default(),
 *             backup.BackupableDBOptions(c_backup_dir),
 */
  __pyx_v_st = rocksdb::BackupEngine::Open(rocksdb::Env::Default(), rocksdb::BackupableDBOptions(__pyx_v_c_backup_dir), (&__pyx_v_self->engine));

  /* "rocksdb/_rocksdb.pyx":2924
 *             cython.address(self.engine))
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":2913
 *     cdef backup.BackupEngine* engine
 * 
 *     def  __cinit__(self, backup_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_backup_dir
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2926
 *         check_status(st)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.engine == NULL:
 *             with nogil:
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":2927
 * 
 *     def __dealloc__(self):
 *         if not self.engine == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.engine
 */
  __pyx_t_1 = (!(__pyx_v_self->engine == NULL));
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":2928
 *     def __dealloc__(self):
 *         if not self.engine == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.engine
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":2929
 *         if not self.engine == NULL:
 *             with nogil:
 *                 del self.engine             # <<<<<<<<<<<<<<
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):
 */
          delete __pyx_v_self->engine;
        }

        /* "rocksdb/_rocksdb.pyx":2928
 *     def __dealloc__(self):
 *         if not self.engine == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.engine
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":2927
 * 
 *     def __dealloc__(self):
 *         if not self.engine == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.engine
 */
  }

  /* "rocksdb/_rocksdb.pyx":2926
 *         check_status(st)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.engine == NULL:
 *             with nogil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":2931
 *                 del self.engine
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef cpp_bool c_flush_before_backup
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_5create_backup = {"create_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  PyObject *__pyx_v_flush_before_backup = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_backup (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2931, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_flush_before_backup,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2931, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flush_before_backup);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2931, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "create_backup") < 0)) __PYX_ERR(0, 2931, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
    __pyx_v_flush_before_backup = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_backup", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 2931, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.create_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 2931, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_4create_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_db, __pyx_v_flush_before_backup);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_4create_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db, PyObject *__pyx_v_flush_before_backup) {
  rocksdb::Status __pyx_v_st;
  bool __pyx_v_c_flush_before_backup;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_backup", 0);

  /* "rocksdb/_rocksdb.pyx":2935
 *         cdef cpp_bool c_flush_before_backup
 * 
 *         c_flush_before_backup = flush_before_backup             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_flush_before_backup); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2935, __pyx_L1_error)
  __pyx_v_c_flush_before_backup = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2937
 *         c_flush_before_backup = flush_before_backup
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.CreateNewBackup(db.wrapped_db, c_flush_before_backup)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2938
 * 
 *         with nogil:
 *             st = self.engine.CreateNewBackup(db.wrapped_db, c_flush_before_backup)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->CreateNewBackup(__pyx_v_db->wrapped_db, __pyx_v_c_flush_before_backup);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2938, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2937
 *         c_flush_before_backup = flush_before_backup
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.CreateNewBackup(db.wrapped_db, c_flush_before_backup)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2939
 *         with nogil:
 *             st = self.engine.CreateNewBackup(db.wrapped_db, c_flush_before_backup)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2931
 *                 del self.engine
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef cpp_bool c_flush_before_backup
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.create_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2941
 *         check_status(st)
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup = {"restore_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_backup_id = 0;
  PyObject *__pyx_v_db_dir = 0;
  PyObject *__pyx_v_wal_dir = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_backup (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2941, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_backup_id,&__pyx_n_s_db_dir,&__pyx_n_s_wal_dir,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_backup_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2941, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_dir)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2941, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("restore_backup", 1, 3, 3, 1); __PYX_ERR(0, 2941, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wal_dir)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2941, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("restore_backup", 1, 3, 3, 2); __PYX_ERR(0, 2941, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "restore_backup") < 0)) __PYX_ERR(0, 2941, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_backup_id = values[0];
    __pyx_v_db_dir = values[1];
    __pyx_v_wal_dir = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_backup", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 2941, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_6restore_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_backup_id, __pyx_v_db_dir, __pyx_v_wal_dir);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_6restore_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir) {
  rocksdb::Status __pyx_v_st;
  rocksdb::BackupID __pyx_v_c_backup_id;
  std::string __pyx_v_c_db_dir;
  std::string __pyx_v_c_wal_dir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::BackupID __pyx_t_1;
  std::string __pyx_t_2;
  rocksdb::Status __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore_backup", 0);

  /* "rocksdb/_rocksdb.pyx":2947
 *         cdef string c_wal_dir
 * 
 *         c_backup_id = backup_id             # <<<<<<<<<<<<<<
 *         c_db_dir = path_to_string(db_dir)
 *         c_wal_dir = path_to_string(wal_dir)
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_backup_id); if (unlikely((__pyx_t_1 == ((rocksdb::BackupID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2947, __pyx_L1_error)
  __pyx_v_c_backup_id = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2948
 * 
 *         c_backup_id = backup_id
 *         c_db_dir = path_to_string(db_dir)             # <<<<<<<<<<<<<<
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2948, __pyx_L1_error)
  __pyx_v_c_db_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":2949
 *         c_backup_id = backup_id
 *         c_db_dir = path_to_string(db_dir)
 *         c_wal_dir = path_to_string(wal_dir)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_wal_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2949, __pyx_L1_error)
  __pyx_v_c_wal_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":2951
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromBackup(
 *                 c_backup_id,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2952
 * 
 *         with nogil:
 *             st = self.engine.RestoreDBFromBackup(             # <<<<<<<<<<<<<<
 *                 c_backup_id,
 *                 c_db_dir,
 */
        try {
          __pyx_t_3 = __pyx_v_self->engine->RestoreDBFromBackup(__pyx_v_c_backup_id, __pyx_v_c_db_dir, __pyx_v_c_wal_dir);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2952, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);
      }

      /* "rocksdb/_rocksdb.pyx":2951
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromBackup(
 *                 c_backup_id,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2957
 *                 c_wal_dir)
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":2941
 *         check_status(st)
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2959
 *         check_status(st)
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_db_dir
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup = {"restore_latest_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_db_dir = 0;
  PyObject *__pyx_v_wal_dir = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_latest_backup (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2959, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_dir,&__pyx_n_s_wal_dir,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_dir)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2959, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wal_dir)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2959, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("restore_latest_backup", 1, 2, 2, 1); __PYX_ERR(0, 2959, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "restore_latest_backup") < 0)) __PYX_ERR(0, 2959, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_db_dir = values[0];
    __pyx_v_wal_dir = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_latest_backup", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2959, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_latest_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_8restore_latest_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_db_dir, __pyx_v_wal_dir);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_8restore_latest_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_c_db_dir;
  std::string __pyx_v_c_wal_dir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore_latest_backup", 0);

  /* "rocksdb/_rocksdb.pyx":2964
 *         cdef string c_wal_dir
 * 
 *         c_db_dir = path_to_string(db_dir)             # <<<<<<<<<<<<<<
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2964, __pyx_L1_error)
  __pyx_v_c_db_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2965
 * 
 *         c_db_dir = path_to_string(db_dir)
 *         c_wal_dir = path_to_string(wal_dir)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_wal_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2965, __pyx_L1_error)
  __pyx_v_c_wal_dir = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":2967
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2968
 * 
 *         with nogil:
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)             # <<<<<<<<<<<<<<
 * 
 *         check_status(st)
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->RestoreDBFromLatestBackup(__pyx_v_c_db_dir, __pyx_v_c_wal_dir);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2968, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2967
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2970
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def stop_backup(self):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2959
 *         check_status(st)
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_db_dir
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_latest_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2972
 *         check_status(st)
 * 
 *     def stop_backup(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.engine.StopBackup()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup = {"stop_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_backup (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2972, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("stop_backup", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "stop_backup", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.stop_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_10stop_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_10stop_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop_backup", 0);

  /* "rocksdb/_rocksdb.pyx":2973
 * 
 *     def stop_backup(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.StopBackup()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2974
 *     def stop_backup(self):
 *         with nogil:
 *             self.engine.StopBackup()             # <<<<<<<<<<<<<<
 * 
 *     def purge_old_backups(self, num_backups_to_keep):
 */
        try {
          __pyx_v_self->engine->StopBackup();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2974, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":2973
 * 
 *     def stop_backup(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.StopBackup()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2972
 *         check_status(st)
 * 
 *     def stop_backup(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.engine.StopBackup()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.stop_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2976
 *             self.engine.StopBackup()
 * 
 *     def purge_old_backups(self, num_backups_to_keep):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef uint32_t c_num_backups_to_keep
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups = {"purge_old_backups", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_num_backups_to_keep = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("purge_old_backups (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2976, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_backups_to_keep,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_backups_to_keep)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2976, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "purge_old_backups") < 0)) __PYX_ERR(0, 2976, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_num_backups_to_keep = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("purge_old_backups", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2976, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.purge_old_backups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_12purge_old_backups(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_num_backups_to_keep);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_12purge_old_backups(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_num_backups_to_keep) {
  rocksdb::Status __pyx_v_st;
  uint32_t __pyx_v_c_num_backups_to_keep;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("purge_old_backups", 0);

  /* "rocksdb/_rocksdb.pyx":2980
 *         cdef uint32_t c_num_backups_to_keep
 * 
 *         c_num_backups_to_keep = num_backups_to_keep             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_num_backups_to_keep); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2980, __pyx_L1_error)
  __pyx_v_c_num_backups_to_keep = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2982
 *         c_num_backups_to_keep = num_backups_to_keep
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2983
 * 
 *         with nogil:
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->PurgeOldBackups(__pyx_v_c_num_backups_to_keep);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2983, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2982
 *         c_num_backups_to_keep = num_backups_to_keep
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2984
 *         with nogil:
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def delete_backup(self, backup_id):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2976
 *             self.engine.StopBackup()
 * 
 *     def purge_old_backups(self, num_backups_to_keep):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef uint32_t c_num_backups_to_keep
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.purge_old_backups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2986
 *         check_status(st)
 * 
 *     def delete_backup(self, backup_id):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup = {"delete_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_backup_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_backup (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2986, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_backup_id,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_backup_id)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2986, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "delete_backup") < 0)) __PYX_ERR(0, 2986, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_backup_id = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete_backup", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2986, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.delete_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_14delete_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_backup_id);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_14delete_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id) {
  rocksdb::Status __pyx_v_st;
  rocksdb::BackupID __pyx_v_c_backup_id;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::BackupID __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete_backup", 0);

  /* "rocksdb/_rocksdb.pyx":2990
 *         cdef backup.BackupID c_backup_id
 * 
 *         c_backup_id = backup_id             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_backup_id); if (unlikely((__pyx_t_1 == ((rocksdb::BackupID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2990, __pyx_L1_error)
  __pyx_v_c_backup_id = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":2992
 *         c_backup_id = backup_id
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.DeleteBackup(c_backup_id)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":2993
 * 
 *         with nogil:
 *             st = self.engine.DeleteBackup(c_backup_id)             # <<<<<<<<<<<<<<
 * 
 *         check_status(st)
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->DeleteBackup(__pyx_v_c_backup_id);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 2993, __pyx_L4_error)
        }
        __pyx_v_st = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
      }

      /* "rocksdb/_rocksdb.pyx":2992
 *         c_backup_id = backup_id
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.DeleteBackup(c_backup_id)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":2995
 *             st = self.engine.DeleteBackup(c_backup_id)
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def get_backup_info(self):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2986
 *         check_status(st)
 * 
 *     def delete_backup(self, backup_id):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.delete_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":2997
 *         check_status(st)
 * 
 *     def get_backup_info(self):             # <<<<<<<<<<<<<<
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info = {"get_backup_info", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_backup_info (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(0, 2997, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_backup_info", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_backup_info", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.get_backup_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_16get_backup_info(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_16get_backup_info(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  std::vector<struct rocksdb::BackupInfo>  __pyx_v_backup_info;
  PyObject *__pyx_v_ret = NULL;
  struct rocksdb::BackupInfo __pyx_v_ob;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct rocksdb::BackupInfo> ::iterator __pyx_t_2;
  struct rocksdb::BackupInfo __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_backup_info", 0);

  /* "rocksdb/_rocksdb.pyx":3000
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.GetBackupInfo(cython.address(backup_info))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":3001
 * 
 *         with nogil:
 *             self.engine.GetBackupInfo(cython.address(backup_info))             # <<<<<<<<<<<<<<
 * 
 *         ret = []
 */
        try {
          __pyx_v_self->engine->GetBackupInfo((&__pyx_v_backup_info));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 3001, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":3000
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.GetBackupInfo(cython.address(backup_info))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":3003
 *             self.engine.GetBackupInfo(cython.address(backup_info))
 * 
 *         ret = []             # <<<<<<<<<<<<<<
 *         for ob in backup_info:
 *             t = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":3004
 * 
 *         ret = []
 *         for ob in backup_info:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['backup_id'] = ob.backup_id
 */
  __pyx_t_2 = __pyx_v_backup_info.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_backup_info.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_ob = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":3005
 *         ret = []
 *         for ob in backup_info:
 *             t = {}             # <<<<<<<<<<<<<<
 *             t['backup_id'] = ob.backup_id
 *             t['timestamp'] = ob.timestamp
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":3006
 *         for ob in backup_info:
 *             t = {}
 *             t['backup_id'] = ob.backup_id             # <<<<<<<<<<<<<<
 *             t['timestamp'] = ob.timestamp
 *             t['size'] = ob.size
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_ob.backup_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_backup_id, __pyx_t_1) < 0))) __PYX_ERR(0, 3006, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":3007
 *             t = {}
 *             t['backup_id'] = ob.backup_id
 *             t['timestamp'] = ob.timestamp             # <<<<<<<<<<<<<<
 *             t['size'] = ob.size
 *             ret.append(t)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_ob.timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_timestamp, __pyx_t_1) < 0))) __PYX_ERR(0, 3007, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":3008
 *             t['backup_id'] = ob.backup_id
 *             t['timestamp'] = ob.timestamp
 *             t['size'] = ob.size             # <<<<<<<<<<<<<<
 *             ret.append(t)
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_t, __pyx_n_u_size, __pyx_t_1) < 0))) __PYX_ERR(0, 3008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":3009
 *             t['timestamp'] = ob.timestamp
 *             t['size'] = ob.size
 *             ret.append(t)             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_v_t); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 3009, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":3004
 * 
 *         ret = []
 *         for ob in backup_info:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['backup_id'] = ob.backup_id
 */
  }

  /* "rocksdb/_rocksdb.pyx":3011
 *             ret.append(t)
 * 
 *         return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":2997
 *         check_status(st)
 * 
 *     def get_backup_info(self):             # <<<<<<<<<<<<<<
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.get_backup_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  goto __pyx_L4_argument_unpacking_done;
  goto __pyx_L3_error;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_18__reduce_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 3, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_20__setstate_cython__(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PyComparator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_5__pyx_unpickle_PyComparator(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_5__pyx_unpickle_PyComparator = {"__pyx_unpickle_PyComparator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_5__pyx_unpickle_PyComparator, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_5__pyx_unpickle_PyComparator(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyComparator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyComparator", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyComparator", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_PyComparator") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyComparator", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyComparator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_4__pyx_unpickle_PyComparator(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_4__pyx_unpickle_PyComparator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyComparator", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyComparator.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = PyComparator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyComparator.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyComparator), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyComparator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = PyComparator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyComparator__set_state(((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyComparator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PyComparator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyComparator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyComparator__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyComparator__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyComparator__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PyFilterPolicy(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7__pyx_unpickle_PyFilterPolicy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_7__pyx_unpickle_PyFilterPolicy = {"__pyx_unpickle_PyFilterPolicy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7__pyx_unpickle_PyFilterPolicy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7__pyx_unpickle_PyFilterPolicy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyFilterPolicy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyFilterPolicy", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyFilterPolicy", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_PyFilterPolicy") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyFilterPolicy", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyFilterPolicy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_6__pyx_unpickle_PyFilterPolicy(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_6__pyx_unpickle_PyFilterPolicy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyFilterPolicy", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyFilterPolicy.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = PyFilterPolicy.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyFilterPolicy.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyFilterPolicy.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = PyFilterPolicy.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyFilterPolicy__set_state(((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyFilterPolicy.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PyFilterPolicy(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyFilterPolicy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyFilterPolicy__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyFilterPolicy__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PyFilterPolicy__set_state(<PyFilterPolicy> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyFilterPolicy__set_state(PyFilterPolicy __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyFilterPolicy__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PyCache(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_9__pyx_unpickle_PyCache(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_9__pyx_unpickle_PyCache = {"__pyx_unpickle_PyCache", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_9__pyx_unpickle_PyCache, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_9__pyx_unpickle_PyCache(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyCache (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyCache", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyCache", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_PyCache") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PyCache", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_8__pyx_unpickle_PyCache(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_8__pyx_unpickle_PyCache(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyCache", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyCache.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = PyCache.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyCache.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyCache), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyCache.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = PyCache.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyCache__set_state(((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = PyCache.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PyCache(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyCache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_PyCache__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PyCache__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_PyCache__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_CompressionType(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_11__pyx_unpickle_CompressionType(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_11__pyx_unpickle_CompressionType = {"__pyx_unpickle_CompressionType", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_11__pyx_unpickle_CompressionType, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_11__pyx_unpickle_CompressionType(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_CompressionType (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompressionType", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompressionType", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_CompressionType") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompressionType", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_CompressionType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10__pyx_unpickle_CompressionType(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10__pyx_unpickle_CompressionType(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CompressionType", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompressionType.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = CompressionType.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompressionType.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompressionType.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = CompressionType.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompressionType__set_state(((struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompressionType.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CompressionType(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_CompressionType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompressionType__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CompressionType__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_CompressionType__set_state(<CompressionType> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CompressionType__set_state(CompressionType __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_CompressionType__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_CompactionPri(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13__pyx_unpickle_CompactionPri(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_13__pyx_unpickle_CompactionPri = {"__pyx_unpickle_CompactionPri", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13__pyx_unpickle_CompactionPri, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_13__pyx_unpickle_CompactionPri(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_CompactionPri (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args);
  if (unlikely((__pyx_nargs < 0))) __PYX_ERR(1, 1, __pyx_L3_error)
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompactionPri", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompactionPri", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_CompactionPri") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CompactionPri", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  goto __pyx_L3_error;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_CompactionPri", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12__pyx_unpickle_CompactionPri(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12__pyx_unpickle_CompactionPri(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CompactionPri", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompactionPri.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = CompactionPri.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompactionPri.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompactionPri.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = CompactionPri.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompactionPri__set_state(((struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = CompactionPri.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CompactionPri(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_CompactionPri", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb___pyx_unpickle_CompactionPri__set_state(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CompactionPri__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_CompactionPri__set_state(<CompactionPri> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CompactionPri__set_state(CompactionPri __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.__pyx_unpickle_CompactionPri__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator __pyx_vtable_7rocksdb_8_rocksdb_PyComparator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyComparator[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12PyComparator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyComparator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyComparator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyComparator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyComparator_spec = {
  "rocksdb._rocksdb.PyComparator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyComparator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyComparator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyComparator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyComparator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyComparator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericComparator __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator;
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericComparator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericComparator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->ob);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o;
  e = ((likely(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator)) ? ((__pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_traverse) ? __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator)); if (e) return e;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o;
  if (likely(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator)) { if (__pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_clear) __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator);
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyGenericComparator[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericComparator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyGenericComparator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator_spec = {
  "rocksdb._rocksdb.PyGenericComparator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyGenericComparator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBytewiseComparator __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator;
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyBytewiseComparator[] = {
  {"name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"compare", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyBytewiseComparator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator_spec = {
  "rocksdb._rocksdb.PyBytewiseComparator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyBytewiseComparator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyBytewiseComparator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyFilterPolicy[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyFilterPolicy_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyFilterPolicy},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy_spec = {
  "rocksdb._rocksdb.PyFilterPolicy",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyFilterPolicy", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyFilterPolicy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericFilterPolicy __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  new((void*)&(p->policy)) std::shared_ptr<py_rocks::FilterPolicyWrapper> ();
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericFilterPolicy) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->policy);
  Py_CLEAR(p->ob);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o;
  e = ((likely(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)) ? ((__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_traverse) ? __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy)); if (e) return e;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o;
  if (likely(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)) { if (__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_clear) __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy);
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyGenericFilterPolicy[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericFilterPolicy},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyGenericFilterPolicy},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy_spec = {
  "rocksdb._rocksdb.PyGenericFilterPolicy",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyGenericFilterPolicy", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBloomFilterPolicy __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  new((void*)&(p->policy)) std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy> ();
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyBloomFilterPolicy(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyBloomFilterPolicy) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->policy);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyBloomFilterPolicy[] = {
  {"name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_filter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"key_may_match", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyBloomFilterPolicy},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyBloomFilterPolicy},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy_spec = {
  "rocksdb._rocksdb.PyBloomFilterPolicy",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyBloomFilterPolicy", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyBloomFilterPolicy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyBloomFilterPolicy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator __pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator;
  new((void*)&(p->merge_op)) std::shared_ptr<rocksdb::MergeOperator> ();
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMergeOperator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMergeOperator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->merge_op);
  Py_CLEAR(p->ob);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PyMergeOperator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PyMergeOperator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o;
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyMergeOperator[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMergeOperator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_PyMergeOperator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_PyMergeOperator},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyMergeOperator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator_spec = {
  "rocksdb._rocksdb.PyMergeOperator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyMergeOperator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache __pyx_vtable_7rocksdb_8_rocksdb_PyCache;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyCache(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyCache;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyCache[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7PyCache_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7PyCache_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyCache_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyCache},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyCache},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyCache_spec = {
  "rocksdb._rocksdb.PyCache",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyCache_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyCache = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyCache", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyCache, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyCache, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyLRUCache __pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyCache(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache;
  new((void*)&(p->cache_ob)) std::shared_ptr<rocksdb::Cache> ();
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyLRUCache(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyLRUCache) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->cache_ob);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyLRUCache[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyLRUCache_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyLRUCache},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyLRUCache},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyLRUCache_spec = {
  "rocksdb._rocksdb.PyLRUCache",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyLRUCache_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyLRUCache = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyLRUCache", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyLRUCache, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyLRUCache, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform;
  new((void*)&(p->transfomer)) std::shared_ptr<rocksdb::SliceTransform> ();
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PySliceTransform(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PySliceTransform) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->transfomer);
  Py_CLEAR(p->ob);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PySliceTransform(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PySliceTransform(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o;
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PySliceTransform[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PySliceTransform_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PySliceTransform},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_PySliceTransform},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_PySliceTransform},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PySliceTransform},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PySliceTransform_spec = {
  "rocksdb._rocksdb.PySliceTransform",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_PySliceTransform_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PySliceTransform = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PySliceTransform", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PySliceTransform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PySliceTransform, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PySliceTransform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PySliceTransform, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory __pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;
  new((void*)&(p->factory)) std::shared_ptr<rocksdb::TableFactory> ();
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->factory);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyTableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14PyTableFactory_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyTableFactory_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyTableFactory},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyTableFactory_spec = {
  "rocksdb._rocksdb.PyTableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyTableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyTableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyTableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyTableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BlockBasedTableFactory __pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  p->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_BlockBasedTableFactory) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->py_filter_policy);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o;
  e = ((likely(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory)) ? ((__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_traverse) ? __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory)); if (e) return e;
  if (p->py_filter_policy) {
    e = (*v)(((PyObject *)p->py_filter_policy), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o;
  if (likely(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory)) { if (__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_clear) __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory);
  tmp = ((PyObject*)p->py_filter_policy);
  p->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_BlockBasedTableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_BlockBasedTableFactory},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_BlockBasedTableFactory},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory_spec = {
  "rocksdb._rocksdb.BlockBasedTableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""BlockBasedTableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PlainTableFactory __pyx_vtable_7rocksdb_8_rocksdb_PlainTableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PlainTableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PlainTableFactory},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory_spec = {
  "rocksdb._rocksdb.PlainTableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PlainTableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PlainTableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_PyMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  new((void*)&(p->factory)) std::shared_ptr<rocksdb::MemTableRepFactory> ();
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->factory);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyMemtableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_17PyMemtableFactory_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_PyMemtableFactory},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory_spec = {
  "rocksdb._rocksdb.PyMemtableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""PyMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_SkipListMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_SkipListMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_SkipListMemtableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_SkipListMemtableFactory},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory_spec = {
  "rocksdb._rocksdb.SkipListMemtableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""SkipListMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_SkipListMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_VectorMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_VectorMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_VectorMemtableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_VectorMemtableFactory},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory_spec = {
  "rocksdb._rocksdb.VectorMemtableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""VectorMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_VectorMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashSkipListMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_HashSkipListMemtableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_HashSkipListMemtableFactory},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory_spec = {
  "rocksdb._rocksdb.HashSkipListMemtableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""HashSkipListMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_HashSkipListMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashLinkListMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_HashLinkListMemtableFactory[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_HashLinkListMemtableFactory},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory_spec = {
  "rocksdb._rocksdb.HashLinkListMemtableFactory",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""HashLinkListMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_HashLinkListMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompressionType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompressionType(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompressionType) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_CompressionType[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_15CompressionType_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_CompressionType_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_CompressionType},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_CompressionType},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_CompressionType},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_CompressionType_spec = {
  "rocksdb._rocksdb.CompressionType",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_CompressionType_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_CompressionType = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""CompressionType", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompressionType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_CompressionType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_CompressionType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompactionPri(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompactionPri) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_CompactionPri[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13CompactionPri_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_CompactionPri_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_CompactionPri},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_CompactionPri},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_CompactionPri_spec = {
  "rocksdb._rocksdb.CompactionPri",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_CompactionPri_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_CompactionPri = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""CompactionPri", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompactionPri, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_CompactionPri, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb__ColumnFamilyHandle __pyx_vtable_7rocksdb_8_rocksdb__ColumnFamilyHandle;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb__ColumnFamilyHandle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb__ColumnFamilyHandle;
  p->weak_handle = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb__ColumnFamilyHandle(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *p = (struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb__ColumnFamilyHandle) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->weak_handle);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb__ColumnFamilyHandle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *p = (struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)o;
  if (p->weak_handle) {
    e = (*v)(p->weak_handle, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb__ColumnFamilyHandle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *p = (struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *)o;
  tmp = ((PyObject*)p->weak_handle);
  p->weak_handle = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_4name_1__get__(o);
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_2id_1__get__(o);
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_weakref(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7weakref_1__get__(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb__ColumnFamilyHandle[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb__ColumnFamilyHandle[] = {
  {(char *)"name", __pyx_getprop_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_name, 0, (char *)0, 0},
  {(char *)"id", __pyx_getprop_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_id, 0, (char *)0, 0},
  {(char *)"weakref", __pyx_getprop_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_weakref, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb__ColumnFamilyHandle},
  {Py_tp_doc, (void *)PyDoc_STR(" This is an internal class that we will weakref for safety ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb__ColumnFamilyHandle},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb__ColumnFamilyHandle},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb__ColumnFamilyHandle},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb__ColumnFamilyHandle},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb__ColumnFamilyHandle},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle_spec = {
  "rocksdb._rocksdb._ColumnFamilyHandle",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""_ColumnFamilyHandle", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb__ColumnFamilyHandle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR(" This is an internal class that we will weakref for safety "), /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb__ColumnFamilyHandle, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb__ColumnFamilyHandle, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb__ColumnFamilyHandle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb__ColumnFamilyHandle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb__ColumnFamilyHandle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ColumnFamilyHandle __pyx_vtable_7rocksdb_8_rocksdb_ColumnFamilyHandle;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyHandle(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_ColumnFamilyHandle;
  p->_ref = Py_None; Py_INCREF(Py_None);
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyHandle(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyHandle) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_ref);
  Py_CLEAR(p->name);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyHandle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)o;
  if (p->_ref) {
    e = (*v)(p->_ref, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyHandle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)o;
  tmp = ((PyObject*)p->_ref);
  p->_ref = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_7rocksdb_8_rocksdb_ColumnFamilyHandle(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_7__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_11__ne__(o1, o2);
    }
    case Py_LT: {
      return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_9__lt__(o1, o2);
    }
    case Py_GT: {
      return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_13__gt__(o1, o2);
    }
    case Py_LE: {
      return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_15__le__(o1, o2);
    }
    case Py_GE: {
      return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_17__ge__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_18ColumnFamilyHandle_is_valid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_8is_valid_1__get__(o);
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_18ColumnFamilyHandle_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_4name_1__get__(o);
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_18ColumnFamilyHandle_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_2id_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__(self);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_ColumnFamilyHandle[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_ColumnFamilyHandle[] = {
  {(char *)"is_valid", __pyx_getprop_7rocksdb_8_rocksdb_18ColumnFamilyHandle_is_valid, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_7rocksdb_8_rocksdb_18ColumnFamilyHandle_name, 0, (char *)0, 0},
  {(char *)"id", __pyx_getprop_7rocksdb_8_rocksdb_18ColumnFamilyHandle_id, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {Py_tp_repr, (void *)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__},
  {Py_tp_hash, (void *)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_19__hash__},
  {Py_tp_doc, (void *)PyDoc_STR(" This represents a ColumnFamilyHandle ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyHandle},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle_spec = {
  "rocksdb._rocksdb.ColumnFamilyHandle",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""ColumnFamilyHandle", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_19__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR(" This represents a ColumnFamilyHandle "), /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_clear*/
  __pyx_tp_richcompare_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_18ColumnFamilyHandle_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyHandle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyOptions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)o);
  p->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)Py_None); Py_INCREF(Py_None);
  p->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)Py_None); Py_INCREF(Py_None);
  p->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)Py_None); Py_INCREF(Py_None);
  p->py_table_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)Py_None); Py_INCREF(Py_None);
  p->py_memtable_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyOptions(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyOptions) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->py_comparator);
  Py_CLEAR(p->py_merge_operator);
  Py_CLEAR(p->py_prefix_extractor);
  Py_CLEAR(p->py_table_factory);
  Py_CLEAR(p->py_memtable_factory);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyOptions(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)o;
  if (p->py_comparator) {
    e = (*v)(((PyObject *)p->py_comparator), a); if (e) return e;
  }
  if (p->py_merge_operator) {
    e = (*v)(((PyObject *)p->py_merge_operator), a); if (e) return e;
  }
  if (p->py_prefix_extractor) {
    e = (*v)(((PyObject *)p->py_prefix_extractor), a); if (e) return e;
  }
  if (p->py_table_factory) {
    e = (*v)(((PyObject *)p->py_table_factory), a); if (e) return e;
  }
  if (p->py_memtable_factory) {
    e = (*v)(((PyObject *)p->py_memtable_factory), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyOptions(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions *)o;
  tmp = ((PyObject*)p->py_comparator);
  p->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_merge_operator);
  p->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_prefix_extractor);
  p->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_table_factory);
  p->py_table_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_memtable_factory);
  p->py_memtable_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_write_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_write_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_17write_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_write_buffer_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_write_buffer_number(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_23max_write_buffer_number_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_min_write_buffer_number_to_merge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_min_write_buffer_number_to_merge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_32min_write_buffer_number_to_merge_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression_opts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression_opts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compression_opts_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_bottommost_compression_opts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_bottommost_compression_opts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27bottommost_compression_opts_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_pri(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_pri(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14compaction_pri_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_11compression_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_compaction_bytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_compaction_bytes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20max_compaction_bytes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_num_levels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_num_levels(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10num_levels_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_file_num_compaction_trigger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_file_num_compaction_trigger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_34level0_file_num_compaction_trigger_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_slowdown_writes_trigger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_slowdown_writes_trigger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30level0_slowdown_writes_trigger_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_stop_writes_trigger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_stop_writes_trigger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_26level0_stop_writes_trigger_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_mem_compaction_level(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_mem_compaction_level(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_mem_compaction_level_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_base(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_21target_file_size_base_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_multiplier(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_multiplier(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_27target_file_size_multiplier_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_base(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24max_bytes_for_level_base_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_30max_bytes_for_level_multiplier_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier_additional(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier_additional(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_41max_bytes_for_level_multiplier_additional_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_arena_block_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_arena_block_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16arena_block_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_disable_auto_compactions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_disable_auto_compactions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24disable_auto_compactions_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_style(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_style(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16compaction_style_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_options_universal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_options_universal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_28compaction_options_universal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_sequential_skip_in_iterations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_sequential_skip_in_iterations(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_33max_sequential_skip_in_iterations_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_support(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_support(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_22inplace_update_support_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_table_factory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_table_factory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_13table_factory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_memtable_factory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_memtable_factory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16memtable_factory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_num_locks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_num_locks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_24inplace_update_num_locks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_comparator(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_comparator(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_10comparator_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_merge_operator(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_merge_operator(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_14merge_operator_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_prefix_extractor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_prefix_extractor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_16prefix_extractor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_optimize_filters_for_hits(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_optimize_filters_for_hits(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_25optimize_filters_for_hits_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_paranoid_file_checks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_paranoid_file_checks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_20paranoid_file_checks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_ColumnFamilyOptions[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_ColumnFamilyOptions[] = {
  {(char *)"write_buffer_size", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_write_buffer_size, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_write_buffer_size, (char *)0, 0},
  {(char *)"max_write_buffer_number", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_write_buffer_number, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_write_buffer_number, (char *)0, 0},
  {(char *)"min_write_buffer_number_to_merge", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_min_write_buffer_number_to_merge, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_min_write_buffer_number_to_merge, (char *)0, 0},
  {(char *)"compression_opts", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression_opts, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression_opts, (char *)0, 0},
  {(char *)"bottommost_compression_opts", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_bottommost_compression_opts, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_bottommost_compression_opts, (char *)0, 0},
  {(char *)"compaction_pri", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_pri, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_pri, (char *)0, 0},
  {(char *)"compression", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compression, (char *)0, 0},
  {(char *)"max_compaction_bytes", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_compaction_bytes, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_compaction_bytes, (char *)0, 0},
  {(char *)"num_levels", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_num_levels, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_num_levels, (char *)0, 0},
  {(char *)"level0_file_num_compaction_trigger", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_file_num_compaction_trigger, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_file_num_compaction_trigger, (char *)0, 0},
  {(char *)"level0_slowdown_writes_trigger", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_slowdown_writes_trigger, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_slowdown_writes_trigger, (char *)0, 0},
  {(char *)"level0_stop_writes_trigger", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_stop_writes_trigger, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_level0_stop_writes_trigger, (char *)0, 0},
  {(char *)"max_mem_compaction_level", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_mem_compaction_level, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_mem_compaction_level, (char *)0, 0},
  {(char *)"target_file_size_base", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_base, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_base, (char *)0, 0},
  {(char *)"target_file_size_multiplier", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_multiplier, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_target_file_size_multiplier, (char *)0, 0},
  {(char *)"max_bytes_for_level_base", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_base, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_base, (char *)0, 0},
  {(char *)"max_bytes_for_level_multiplier", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier, (char *)0, 0},
  {(char *)"max_bytes_for_level_multiplier_additional", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier_additional, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_bytes_for_level_multiplier_additional, (char *)0, 0},
  {(char *)"arena_block_size", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_arena_block_size, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_arena_block_size, (char *)0, 0},
  {(char *)"disable_auto_compactions", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_disable_auto_compactions, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_disable_auto_compactions, (char *)0, 0},
  {(char *)"compaction_style", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_style, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_style, (char *)0, 0},
  {(char *)"compaction_options_universal", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_options_universal, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_compaction_options_universal, (char *)0, 0},
  {(char *)"max_sequential_skip_in_iterations", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_sequential_skip_in_iterations, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_max_sequential_skip_in_iterations, (char *)0, 0},
  {(char *)"inplace_update_support", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_support, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_support, (char *)0, 0},
  {(char *)"table_factory", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_table_factory, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_table_factory, (char *)0, 0},
  {(char *)"memtable_factory", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_memtable_factory, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_memtable_factory, (char *)0, 0},
  {(char *)"inplace_update_num_locks", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_num_locks, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_inplace_update_num_locks, (char *)0, 0},
  {(char *)"comparator", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_comparator, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_comparator, (char *)0, 0},
  {(char *)"merge_operator", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_merge_operator, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_merge_operator, (char *)0, 0},
  {(char *)"prefix_extractor", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_prefix_extractor, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_prefix_extractor, (char *)0, 0},
  {(char *)"optimize_filters_for_hits", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_optimize_filters_for_hits, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_optimize_filters_for_hits, (char *)0, 0},
  {(char *)"paranoid_file_checks", __pyx_getprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_paranoid_file_checks, __pyx_setprop_7rocksdb_8_rocksdb_19ColumnFamilyOptions_paranoid_file_checks, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyOptions},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyOptions},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyOptions},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_ColumnFamilyOptions},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb_ColumnFamilyOptions},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyOptions},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions_spec = {
  "rocksdb._rocksdb.ColumnFamilyOptions",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""ColumnFamilyOptions", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyOptions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyOptions, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyOptions, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_ColumnFamilyOptions, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_ColumnFamilyOptions, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_19ColumnFamilyOptions_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Options(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_ColumnFamilyOptions(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o);
  p->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_7Options_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_Options(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_Options) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_7Options_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->py_row_cache);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_ColumnFamilyOptions(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_Options(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o;
  e = __pyx_tp_traverse_7rocksdb_8_rocksdb_ColumnFamilyOptions(o, v, a); if (e) return e;
  if (p->py_row_cache) {
    e = (*v)(((PyObject *)p->py_row_cache), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_Options(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o;
  __pyx_tp_clear_7rocksdb_8_rocksdb_ColumnFamilyOptions(o);
  tmp = ((PyObject*)p->py_row_cache);
  p->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_create_if_missing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_create_if_missing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_create_missing_column_families(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_create_missing_column_families(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_30create_missing_column_families_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_error_if_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_error_if_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_paranoid_checks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_paranoid_checks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_open_files(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_open_files(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_file_opening_threads(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_file_opening_threads(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_file_opening_threads_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_total_wal_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_total_wal_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_total_wal_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_use_fsync(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_fsync(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_db_log_dir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_db_log_dir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_dir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_dir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_jobs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_19max_background_jobs_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_jobs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_19max_background_jobs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_base_background_compactions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27base_background_compactions_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_base_background_compactions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27base_background_compactions_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_compactions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_compactions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_subcompactions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_subcompactions_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_subcompactions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18max_subcompactions_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_flushes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_flushes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_log_file_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_log_file_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_recycle_log_file_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_recycle_log_file_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_20recycle_log_file_num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_use_direct_reads(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16use_direct_reads_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_direct_reads(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16use_direct_reads_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_use_direct_io_for_flush_and_compaction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_direct_io_for_flush_and_compaction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_38use_direct_io_for_flush_and_compaction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_fallocate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15allow_fallocate_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_fallocate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15allow_fallocate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_persist_period_sec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_persist_period_sec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24stats_persist_period_sec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_persist_stats_to_disk(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_persist_stats_to_disk(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21persist_stats_to_disk_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_history_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_history_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_25stats_history_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_db_write_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_db_write_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_20db_write_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_new_table_reader_for_compaction_inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_new_table_reader_for_compaction_inputs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_38new_table_reader_for_compaction_inputs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_readahead_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_readahead_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_25compaction_readahead_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_random_access_max_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_random_access_max_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_29random_access_max_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_writable_file_max_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_writable_file_max_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_29writable_file_max_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_bytes_per_sync(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_bytes_per_sync(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18wal_bytes_per_sync_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_strict_bytes_per_sync(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_strict_bytes_per_sync(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21strict_bytes_per_sync_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_thread_tracking(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_thread_tracking(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_thread_tracking_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_delayed_write_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_delayed_write_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18delayed_write_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_pipelined_write(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_pipelined_write(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22enable_pipelined_write_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_unordered_write(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15unordered_write_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_unordered_write(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15unordered_write_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_write_batch_group_size_bytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_write_batch_group_size_bytes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_32max_write_batch_group_size_bytes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_write_thread_max_yield_usec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_thread_max_yield_usec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27write_thread_max_yield_usec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_write_thread_slow_yield_usec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_thread_slow_yield_usec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_28write_thread_slow_yield_usec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_skip_stats_update_on_db_open(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_skip_stats_update_on_db_open(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_28skip_stats_update_on_db_open_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_skip_checking_sst_file_sizes_on_db_open(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_skip_checking_sst_file_sizes_on_db_open(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_39skip_checking_sst_file_sizes_on_db_open_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_2pc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_9allow_2pc_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_2pc(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_9allow_2pc_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_row_cache(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_row_cache(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_fail_if_options_file_error(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_fail_if_options_file_error(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_26fail_if_options_file_error_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_dump_malloc_stats(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_dump_malloc_stats(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17dump_malloc_stats_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_recovery(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_recovery(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_recovery_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_shutdown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_shutdown(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27avoid_flush_during_shutdown_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_ingest_behind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_ingest_behind(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_19allow_ingest_behind_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_preserve_deletes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16preserve_deletes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_preserve_deletes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16preserve_deletes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_two_write_queues(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16two_write_queues_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_two_write_queues(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16two_write_queues_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_manual_wal_flush(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_manual_wal_flush(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16manual_wal_flush_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_atomic_flush(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_12atomic_flush_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_atomic_flush(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_12atomic_flush_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_avoid_unnecessary_blocking_io(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_avoid_unnecessary_blocking_io(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_29avoid_unnecessary_blocking_io_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_write_dbid_to_manifest(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_dbid_to_manifest(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22write_dbid_to_manifest_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_log_readahead_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18log_readahead_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_log_readahead_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18log_readahead_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_best_efforts_recovery(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_best_efforts_recovery(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21best_efforts_recovery_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_Options[] = {
  {"IncreaseParallelism", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7Options_7IncreaseParallelism, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7Options_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_7Options_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_Options[] = {
  {(char *)"create_if_missing", __pyx_getprop_7rocksdb_8_rocksdb_7Options_create_if_missing, __pyx_setprop_7rocksdb_8_rocksdb_7Options_create_if_missing, (char *)0, 0},
  {(char *)"create_missing_column_families", __pyx_getprop_7rocksdb_8_rocksdb_7Options_create_missing_column_families, __pyx_setprop_7rocksdb_8_rocksdb_7Options_create_missing_column_families, (char *)0, 0},
  {(char *)"error_if_exists", __pyx_getprop_7rocksdb_8_rocksdb_7Options_error_if_exists, __pyx_setprop_7rocksdb_8_rocksdb_7Options_error_if_exists, (char *)0, 0},
  {(char *)"paranoid_checks", __pyx_getprop_7rocksdb_8_rocksdb_7Options_paranoid_checks, __pyx_setprop_7rocksdb_8_rocksdb_7Options_paranoid_checks, (char *)0, 0},
  {(char *)"max_open_files", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_open_files, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_open_files, (char *)0, 0},
  {(char *)"max_file_opening_threads", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_file_opening_threads, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_file_opening_threads, (char *)0, 0},
  {(char *)"max_total_wal_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_total_wal_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_total_wal_size, (char *)0, 0},
  {(char *)"use_fsync", __pyx_getprop_7rocksdb_8_rocksdb_7Options_use_fsync, __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_fsync, (char *)0, 0},
  {(char *)"db_log_dir", __pyx_getprop_7rocksdb_8_rocksdb_7Options_db_log_dir, __pyx_setprop_7rocksdb_8_rocksdb_7Options_db_log_dir, (char *)0, 0},
  {(char *)"wal_dir", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_dir, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_dir, (char *)0, 0},
  {(char *)"delete_obsolete_files_period_micros", __pyx_getprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros, __pyx_setprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros, (char *)0, 0},
  {(char *)"max_background_jobs", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_jobs, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_jobs, (char *)0, 0},
  {(char *)"base_background_compactions", __pyx_getprop_7rocksdb_8_rocksdb_7Options_base_background_compactions, __pyx_setprop_7rocksdb_8_rocksdb_7Options_base_background_compactions, (char *)0, 0},
  {(char *)"max_background_compactions", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_compactions, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_compactions, (char *)0, 0},
  {(char *)"max_subcompactions", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_subcompactions, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_subcompactions, (char *)0, 0},
  {(char *)"max_background_flushes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_flushes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_flushes, (char *)0, 0},
  {(char *)"max_log_file_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_log_file_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_log_file_size, (char *)0, 0},
  {(char *)"log_file_time_to_roll", __pyx_getprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll, __pyx_setprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll, (char *)0, 0},
  {(char *)"keep_log_file_num", __pyx_getprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num, __pyx_setprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num, (char *)0, 0},
  {(char *)"recycle_log_file_num", __pyx_getprop_7rocksdb_8_rocksdb_7Options_recycle_log_file_num, __pyx_setprop_7rocksdb_8_rocksdb_7Options_recycle_log_file_num, (char *)0, 0},
  {(char *)"max_manifest_file_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size, (char *)0, 0},
  {(char *)"table_cache_numshardbits", __pyx_getprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits, __pyx_setprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits, (char *)0, 0},
  {(char *)"wal_ttl_seconds", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds, (char *)0, 0},
  {(char *)"wal_size_limit_mb", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb, (char *)0, 0},
  {(char *)"manifest_preallocation_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size, (char *)0, 0},
  {(char *)"allow_mmap_reads", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads, (char *)0, 0},
  {(char *)"allow_mmap_writes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes, (char *)0, 0},
  {(char *)"use_direct_reads", __pyx_getprop_7rocksdb_8_rocksdb_7Options_use_direct_reads, __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_direct_reads, (char *)0, 0},
  {(char *)"use_direct_io_for_flush_and_compaction", __pyx_getprop_7rocksdb_8_rocksdb_7Options_use_direct_io_for_flush_and_compaction, __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_direct_io_for_flush_and_compaction, (char *)0, 0},
  {(char *)"allow_fallocate", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_fallocate, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_fallocate, (char *)0, 0},
  {(char *)"is_fd_close_on_exec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec, (char *)0, 0},
  {(char *)"stats_dump_period_sec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec, (char *)0, 0},
  {(char *)"stats_persist_period_sec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_persist_period_sec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_persist_period_sec, (char *)0, 0},
  {(char *)"persist_stats_to_disk", __pyx_getprop_7rocksdb_8_rocksdb_7Options_persist_stats_to_disk, __pyx_setprop_7rocksdb_8_rocksdb_7Options_persist_stats_to_disk, (char *)0, 0},
  {(char *)"stats_history_buffer_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_history_buffer_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_history_buffer_size, (char *)0, 0},
  {(char *)"advise_random_on_open", __pyx_getprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open, __pyx_setprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open, (char *)0, 0},
  {(char *)"db_write_buffer_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_db_write_buffer_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_db_write_buffer_size, (char *)0, 0},
  {(char *)"new_table_reader_for_compaction_inputs", __pyx_getprop_7rocksdb_8_rocksdb_7Options_new_table_reader_for_compaction_inputs, __pyx_setprop_7rocksdb_8_rocksdb_7Options_new_table_reader_for_compaction_inputs, (char *)0, 0},
  {(char *)"compaction_readahead_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_readahead_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_readahead_size, (char *)0, 0},
  {(char *)"random_access_max_buffer_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_random_access_max_buffer_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_random_access_max_buffer_size, (char *)0, 0},
  {(char *)"writable_file_max_buffer_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_writable_file_max_buffer_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_writable_file_max_buffer_size, (char *)0, 0},
  {(char *)"use_adaptive_mutex", __pyx_getprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex, __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex, (char *)0, 0},
  {(char *)"bytes_per_sync", __pyx_getprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync, __pyx_setprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync, (char *)0, 0},
  {(char *)"wal_bytes_per_sync", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_bytes_per_sync, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_bytes_per_sync, (char *)0, 0},
  {(char *)"strict_bytes_per_sync", __pyx_getprop_7rocksdb_8_rocksdb_7Options_strict_bytes_per_sync, __pyx_setprop_7rocksdb_8_rocksdb_7Options_strict_bytes_per_sync, (char *)0, 0},
  {(char *)"enable_thread_tracking", __pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_thread_tracking, __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_thread_tracking, (char *)0, 0},
  {(char *)"delayed_write_rate", __pyx_getprop_7rocksdb_8_rocksdb_7Options_delayed_write_rate, __pyx_setprop_7rocksdb_8_rocksdb_7Options_delayed_write_rate, (char *)0, 0},
  {(char *)"enable_pipelined_write", __pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_pipelined_write, __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_pipelined_write, (char *)0, 0},
  {(char *)"unordered_write", __pyx_getprop_7rocksdb_8_rocksdb_7Options_unordered_write, __pyx_setprop_7rocksdb_8_rocksdb_7Options_unordered_write, (char *)0, 0},
  {(char *)"allow_concurrent_memtable_write", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write, (char *)0, 0},
  {(char *)"enable_write_thread_adaptive_yield", __pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield, __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield, (char *)0, 0},
  {(char *)"max_write_batch_group_size_bytes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_write_batch_group_size_bytes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_write_batch_group_size_bytes, (char *)0, 0},
  {(char *)"write_thread_max_yield_usec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_write_thread_max_yield_usec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_thread_max_yield_usec, (char *)0, 0},
  {(char *)"write_thread_slow_yield_usec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_write_thread_slow_yield_usec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_thread_slow_yield_usec, (char *)0, 0},
  {(char *)"skip_stats_update_on_db_open", __pyx_getprop_7rocksdb_8_rocksdb_7Options_skip_stats_update_on_db_open, __pyx_setprop_7rocksdb_8_rocksdb_7Options_skip_stats_update_on_db_open, (char *)0, 0},
  {(char *)"skip_checking_sst_file_sizes_on_db_open", __pyx_getprop_7rocksdb_8_rocksdb_7Options_skip_checking_sst_file_sizes_on_db_open, __pyx_setprop_7rocksdb_8_rocksdb_7Options_skip_checking_sst_file_sizes_on_db_open, (char *)0, 0},
  {(char *)"allow_2pc", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_2pc, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_2pc, (char *)0, 0},
  {(char *)"row_cache", __pyx_getprop_7rocksdb_8_rocksdb_7Options_row_cache, __pyx_setprop_7rocksdb_8_rocksdb_7Options_row_cache, (char *)0, 0},
  {(char *)"fail_if_options_file_error", __pyx_getprop_7rocksdb_8_rocksdb_7Options_fail_if_options_file_error, __pyx_setprop_7rocksdb_8_rocksdb_7Options_fail_if_options_file_error, (char *)0, 0},
  {(char *)"dump_malloc_stats", __pyx_getprop_7rocksdb_8_rocksdb_7Options_dump_malloc_stats, __pyx_setprop_7rocksdb_8_rocksdb_7Options_dump_malloc_stats, (char *)0, 0},
  {(char *)"avoid_flush_during_recovery", __pyx_getprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_recovery, __pyx_setprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_recovery, (char *)0, 0},
  {(char *)"avoid_flush_during_shutdown", __pyx_getprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_shutdown, __pyx_setprop_7rocksdb_8_rocksdb_7Options_avoid_flush_during_shutdown, (char *)0, 0},
  {(char *)"allow_ingest_behind", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_ingest_behind, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_ingest_behind, (char *)0, 0},
  {(char *)"preserve_deletes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_preserve_deletes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_preserve_deletes, (char *)0, 0},
  {(char *)"two_write_queues", __pyx_getprop_7rocksdb_8_rocksdb_7Options_two_write_queues, __pyx_setprop_7rocksdb_8_rocksdb_7Options_two_write_queues, (char *)0, 0},
  {(char *)"manual_wal_flush", __pyx_getprop_7rocksdb_8_rocksdb_7Options_manual_wal_flush, __pyx_setprop_7rocksdb_8_rocksdb_7Options_manual_wal_flush, (char *)0, 0},
  {(char *)"atomic_flush", __pyx_getprop_7rocksdb_8_rocksdb_7Options_atomic_flush, __pyx_setprop_7rocksdb_8_rocksdb_7Options_atomic_flush, (char *)0, 0},
  {(char *)"avoid_unnecessary_blocking_io", __pyx_getprop_7rocksdb_8_rocksdb_7Options_avoid_unnecessary_blocking_io, __pyx_setprop_7rocksdb_8_rocksdb_7Options_avoid_unnecessary_blocking_io, (char *)0, 0},
  {(char *)"write_dbid_to_manifest", __pyx_getprop_7rocksdb_8_rocksdb_7Options_write_dbid_to_manifest, __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_dbid_to_manifest, (char *)0, 0},
  {(char *)"log_readahead_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_log_readahead_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_log_readahead_size, (char *)0, 0},
  {(char *)"best_efforts_recovery", __pyx_getprop_7rocksdb_8_rocksdb_7Options_best_efforts_recovery, __pyx_setprop_7rocksdb_8_rocksdb_7Options_best_efforts_recovery, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_Options_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_Options},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_Options},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_Options},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_Options},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb_Options},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_Options},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_Options_spec = {
  "rocksdb._rocksdb.Options",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Options),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_Options_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_Options = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""Options", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Options), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_Options, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_Options, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_Options, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_Options, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_Options, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_Options, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_TransactionDBOptions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDBOptions(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDBOptions) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_locks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_locks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_13max_num_locks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_deadlocks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_deadlocks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_17max_num_deadlocks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_num_stripes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_num_stripes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_11num_stripes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_transaction_lock_timeout(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_transaction_lock_timeout(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24transaction_lock_timeout_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_lock_timeout(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_lock_timeout(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_20default_lock_timeout_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_write_policy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_write_policy(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_12write_policy_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_rollback_merge_operands(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_rollback_merge_operands(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_23rollback_merge_operands_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_skip_concurrency_control(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_skip_concurrency_control(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_24skip_concurrency_control_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_write_batch_flush_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_write_batch_flush_threshold(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_35default_write_batch_flush_threshold_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_TransactionDBOptions[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_TransactionDBOptions[] = {
  {(char *)"max_num_locks", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_locks, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_locks, (char *)0, 0},
  {(char *)"max_num_deadlocks", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_deadlocks, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_max_num_deadlocks, (char *)0, 0},
  {(char *)"num_stripes", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_num_stripes, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_num_stripes, (char *)0, 0},
  {(char *)"transaction_lock_timeout", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_transaction_lock_timeout, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_transaction_lock_timeout, (char *)0, 0},
  {(char *)"default_lock_timeout", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_lock_timeout, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_lock_timeout, (char *)0, 0},
  {(char *)"write_policy", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_write_policy, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_write_policy, (char *)0, 0},
  {(char *)"rollback_merge_operands", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_rollback_merge_operands, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_rollback_merge_operands, (char *)0, 0},
  {(char *)"skip_concurrency_control", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_skip_concurrency_control, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_skip_concurrency_control, (char *)0, 0},
  {(char *)"default_write_batch_flush_threshold", __pyx_getprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_write_batch_flush_threshold, __pyx_setprop_7rocksdb_8_rocksdb_20TransactionDBOptions_default_write_batch_flush_threshold, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDBOptions},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_TransactionDBOptions},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb_TransactionDBOptions},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_TransactionDBOptions},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions_spec = {
  "rocksdb._rocksdb.TransactionDBOptions",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""TransactionDBOptions", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDBOptions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_TransactionDBOptions, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_TransactionDBOptions, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_20TransactionDBOptions_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_TransactionDBOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Snapshot(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)o);
  p->db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_Snapshot(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_Snapshot) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->db);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_Snapshot(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)o;
  if (p->db) {
    e = (*v)(((PyObject *)p->db), a); if (e) return e;
  }
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_Snapshot[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_Snapshot_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_Snapshot},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_Snapshot},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_Snapshot},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_Snapshot},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_Snapshot_spec = {
  "rocksdb._rocksdb.Snapshot",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_Snapshot_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_Snapshot = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""Snapshot", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_Snapshot, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_Snapshot, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_Snapshot, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_Snapshot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o);
  p->it = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_ReversedIterator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_ReversedIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->it);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_ReversedIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o;
  if (p->it) {
    e = (*v)(((PyObject *)p->it), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_ReversedIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o;
  tmp = ((PyObject*)p->it);
  p->it = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_ReversedIterator[] = {
  {"seek_to_first", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"seek_to_last", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"seek_for_prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reversed__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_ReversedIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_ReversedIterator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_ReversedIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_ReversedIterator},
  {Py_tp_iter, (void *)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_ReversedIterator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_ReversedIterator_spec = {
  "rocksdb._rocksdb.ReversedIterator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_ReversedIterator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ReversedIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""ReversedIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_ReversedIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_ReversedIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_ReversedIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__, /*tp_iter*/
  __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_ReversedIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o);
  new((void*)&(p->items)) std::vector<py_rocks::RecordItemsHandler::BatchItem> ();
  p->batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatchIterator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatchIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->items);
  Py_CLEAR(p->batch);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_WriteBatchIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o;
  if (p->batch) {
    e = (*v)(((PyObject *)p->batch), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_WriteBatchIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o;
  tmp = ((PyObject*)p->batch);
  p->batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_WriteBatchIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatchIterator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_WriteBatchIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_WriteBatchIterator},
  {Py_tp_iter, (void *)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_WriteBatchIterator},
  {Py_tp_init, (void *)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator_spec = {
  "rocksdb._rocksdb.WriteBatchIterator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""WriteBatchIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__, /*tp_iter*/
  __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatch(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatch) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_WriteBatch[] = {
  {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"merge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"count", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_WriteBatch_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatch},
  {Py_tp_iter, (void *)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_WriteBatch},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_WriteBatch_spec = {
  "rocksdb._rocksdb.WriteBatch",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_WriteBatch_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_WriteBatch = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""WriteBatch", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatch, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_WriteBatch, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB __pyx_vtable_7rocksdb_8_rocksdb_DB;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_DB(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_DB;
  new((void*)&(p->column_family_descriptors)) std::vector<rocksdb::ColumnFamilyDescriptor> ();
  new((void*)&(p->column_family_handles)) std::vector<rocksdb::ColumnFamilyHandle *> ();
  new((void*)&(p->db_path)) std::string();
  p->opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)Py_None); Py_INCREF(Py_None);
  p->cf_handles = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->cf_options = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_2DB_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_DB(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *p = (struct __pyx_obj_7rocksdb_8_rocksdb_DB *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_DB) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_2DB_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->column_family_descriptors);
  __Pyx_call_destructor(p->column_family_handles);
  __Pyx_call_destructor(p->db_path);
  Py_CLEAR(p->opts);
  Py_CLEAR(p->cf_handles);
  Py_CLEAR(p->cf_options);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_DB(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *p = (struct __pyx_obj_7rocksdb_8_rocksdb_DB *)o;
  if (p->opts) {
    e = (*v)(((PyObject *)p->opts), a); if (e) return e;
  }
  if (p->cf_handles) {
    e = (*v)(p->cf_handles, a); if (e) return e;
  }
  if (p->cf_options) {
    e = (*v)(p->cf_options, a); if (e) return e;
  }
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_2DB_column_families(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_2DB_15column_families_1__get__(o);
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_2DB_options(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_2DB_7options_1__get__(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_DB[] = {
  {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_column_family", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_7get_column_family, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_9put, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_11delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"merge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_13merge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_15write, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_17get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"multi_get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_19multi_get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"key_may_exist", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_21key_may_exist, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"iterkeys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_23iterkeys, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"itervalues", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_25itervalues, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"iteritems", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_27iteritems, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"iterskeys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_29iterskeys, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"itersvalues", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_31itersvalues, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"iterskeys", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_33iterskeys, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"snapshot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_35snapshot, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_property", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_37get_property, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_live_files_metadata", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_39get_live_files_metadata, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_column_family_meta_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_41get_column_family_meta_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"compact_range", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_43compact_range, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_DB__parse_read_opts", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_45_DB__parse_read_opts, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_column_family", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_47create_column_family, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"drop_column_family", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_49drop_column_family, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"try_catch_up_with_primary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_51try_catch_up_with_primary, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_53__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_2DB_55__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_DB[] = {
  {(char *)"column_families", __pyx_getprop_7rocksdb_8_rocksdb_2DB_column_families, 0, (char *)0, 0},
  {(char *)"options", __pyx_getprop_7rocksdb_8_rocksdb_2DB_options, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_DB_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_DB},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_DB},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_DB},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb_DB},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_DB},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_DB_spec = {
  "rocksdb._rocksdb.DB",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_DB),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_DB_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_DB = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""DB", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_DB), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_DB, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_DB, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_DB, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_DB, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_DB, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_TransactionDB __pyx_vtable_7rocksdb_8_rocksdb_TransactionDB;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_TransactionDB(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_DB(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB*)__pyx_vtabptr_7rocksdb_8_rocksdb_TransactionDB;
  p->tdb_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDBOptions *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDB(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *p = (struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDB) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->tdb_opts);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_DB(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_TransactionDB(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *p = (struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB *)o;
  e = __pyx_tp_traverse_7rocksdb_8_rocksdb_DB(o, v, a); if (e) return e;
  if (p->tdb_opts) {
    e = (*v)(((PyObject *)p->tdb_opts), a); if (e) return e;
  }
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_13TransactionDB_transaction_options(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_19transaction_options_1__get__(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_TransactionDB[] = {
  {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13TransactionDB_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_TransactionDB[] = {
  {(char *)"transaction_options", __pyx_getprop_7rocksdb_8_rocksdb_13TransactionDB_transaction_options, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_TransactionDB_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDB},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_TransactionDB},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_TransactionDB},
  {Py_tp_getset, (void *)__pyx_getsets_7rocksdb_8_rocksdb_TransactionDB},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_TransactionDB},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_TransactionDB_spec = {
  "rocksdb._rocksdb.TransactionDB",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_TransactionDB_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_TransactionDB = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""TransactionDB", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_TransactionDB), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_TransactionDB, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_TransactionDB, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_TransactionDB, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_TransactionDB, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_TransactionDB, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  p->db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)Py_None); Py_INCREF(Py_None);
  p->handle = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->db);
  Py_CLEAR(p->handle);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o;
  if (p->db) {
    e = (*v)(((PyObject *)p->db), a); if (e) return e;
  }
  if (p->handle) {
    e = (*v)(((PyObject *)p->handle), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o;
  tmp = ((PyObject*)p->db);
  p->db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->handle);
  p->handle = ((struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_BaseIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, METH_NOARGS|METH_COEXIST, 0},
  {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reversed__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_BaseIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_iter, (void *)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_BaseIterator_spec = {
  "rocksdb._rocksdb.BaseIterator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_BaseIterator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_BaseIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""BaseIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_BaseIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ItemsIterator __pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator*)__pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_ItemsIterator[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_13ItemsIterator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_ItemsIterator_slots[] = {
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_ItemsIterator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_ItemsIterator_spec = {
  "rocksdb._rocksdb.ItemsIterator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_ItemsIterator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ItemsIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""ItemsIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  __pyx_methods_7rocksdb_8_rocksdb_ItemsIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ValuesIterator __pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator*)__pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_ValuesIterator[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_14ValuesIterator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_ValuesIterator_slots[] = {
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_ValuesIterator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_ValuesIterator_spec = {
  "rocksdb._rocksdb.ValuesIterator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_ValuesIterator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ValuesIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""ValuesIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  __pyx_methods_7rocksdb_8_rocksdb_ValuesIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_KeysIterator __pyx_vtable_7rocksdb_8_rocksdb_KeysIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator*)__pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_KeysIterator[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12KeysIterator_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_KeysIterator_slots[] = {
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_KeysIterator},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_KeysIterator_spec = {
  "rocksdb._rocksdb.KeysIterator",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7rocksdb_8_rocksdb_KeysIterator_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_KeysIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""KeysIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  __pyx_methods_7rocksdb_8_rocksdb_KeysIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Checkpoint(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_Checkpoint(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_Checkpoint) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_Checkpoint[] = {
  {"create_checkpoint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_5create_checkpoint, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_10Checkpoint_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_Checkpoint_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_Checkpoint},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_Checkpoint},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_Checkpoint},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_Checkpoint_spec = {
  "rocksdb._rocksdb.Checkpoint",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_Checkpoint_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_Checkpoint = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""Checkpoint", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Checkpoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_Checkpoint, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_Checkpoint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_Checkpoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_BackupEngine(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7rocksdb_8_rocksdb_BackupEngine) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_BackupEngine[] = {
  {"create_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"restore_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"restore_latest_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"stop_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"purge_old_backups", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"delete_backup", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_backup_info", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7rocksdb_8_rocksdb_BackupEngine_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7rocksdb_8_rocksdb_BackupEngine},
  {Py_tp_methods, (void *)__pyx_methods_7rocksdb_8_rocksdb_BackupEngine},
  {Py_tp_new, (void *)__pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine},
  {0, 0},
};
static PyType_Spec __pyx_type_7rocksdb_8_rocksdb_BackupEngine_spec = {
  "rocksdb._rocksdb.BackupEngine",
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_7rocksdb_8_rocksdb_BackupEngine_slots,
};
#else

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_BackupEngine = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.""BackupEngine", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BackupEngine, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_BackupEngine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_AssociativeMergeOperator, __pyx_k_AssociativeMergeOperator, sizeof(__pyx_k_AssociativeMergeOperator), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine, __pyx_k_BackupEngine, sizeof(__pyx_k_BackupEngine), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine___reduce_cython, __pyx_k_BackupEngine___reduce_cython, sizeof(__pyx_k_BackupEngine___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine___setstate_cython, __pyx_k_BackupEngine___setstate_cython, sizeof(__pyx_k_BackupEngine___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_create_backup, __pyx_k_BackupEngine_create_backup, sizeof(__pyx_k_BackupEngine_create_backup), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_delete_backup, __pyx_k_BackupEngine_delete_backup, sizeof(__pyx_k_BackupEngine_delete_backup), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_get_backup_info, __pyx_k_BackupEngine_get_backup_info, sizeof(__pyx_k_BackupEngine_get_backup_info), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_purge_old_backups, __pyx_k_BackupEngine_purge_old_backups, sizeof(__pyx_k_BackupEngine_purge_old_backups), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_restore_backup, __pyx_k_BackupEngine_restore_backup, sizeof(__pyx_k_BackupEngine_restore_backup), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_restore_latest_back, __pyx_k_BackupEngine_restore_latest_back, sizeof(__pyx_k_BackupEngine_restore_latest_back), 0, 0, 1, 1},
    {&__pyx_n_s_BackupEngine_stop_backup, __pyx_k_BackupEngine_stop_backup, sizeof(__pyx_k_BackupEngine_stop_backup), 0, 0, 1, 1},
    {&__pyx_n_s_BaseException, __pyx_k_BaseException, sizeof(__pyx_k_BaseException), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___reduce_cython, __pyx_k_BaseIterator___reduce_cython, sizeof(__pyx_k_BaseIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___reversed, __pyx_k_BaseIterator___reversed, sizeof(__pyx_k_BaseIterator___reversed), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___setstate_cython, __pyx_k_BaseIterator___setstate_cython, sizeof(__pyx_k_BaseIterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator_get, __pyx_k_BaseIterator_get, sizeof(__pyx_k_BaseIterator_get), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator_seek, __pyx_k_BaseIterator_seek, sizeof(__pyx_k_BaseIterator_seek), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator_seek_for_prev, __pyx_k_BaseIterator_seek_for_prev, sizeof(__pyx_k_BaseIterator_seek_for_prev), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator_seek_to_first, __pyx_k_BaseIterator_seek_to_first, sizeof(__pyx_k_BaseIterator_seek_to_first), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator_seek_to_last, __pyx_k_BaseIterator_seek_to_last, sizeof(__pyx_k_BaseIterator_seek_to_last), 0, 0, 1, 1},
    {&__pyx_n_s_BlockBasedTableFactory, __pyx_k_BlockBasedTableFactory, sizeof(__pyx_k_BlockBasedTableFactory), 0, 0, 1, 1},
    {&__pyx_n_s_BlockBasedTableFactory___reduce, __pyx_k_BlockBasedTableFactory___reduce, sizeof(__pyx_k_BlockBasedTableFactory___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_BlockBasedTableFactory___setstat, __pyx_k_BlockBasedTableFactory___setstat, sizeof(__pyx_k_BlockBasedTableFactory___setstat), 0, 0, 1, 1},
    {&__pyx_n_s_BloomFilterPolicy, __pyx_k_BloomFilterPolicy, sizeof(__pyx_k_BloomFilterPolicy), 0, 0, 1, 1},
    {&__pyx_n_s_BytewiseComparator, __pyx_k_BytewiseComparator, sizeof(__pyx_k_BytewiseComparator), 0, 0, 1, 1},
    {&__pyx_kp_u_Cannot_set_filter_policy_s, __pyx_k_Cannot_set_filter_policy_s, sizeof(__pyx_k_Cannot_set_filter_policy_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Cannot_set_s_as_comparator, __pyx_k_Cannot_set_s_as_comparator, sizeof(__pyx_k_Cannot_set_s_as_comparator), 0, 1, 0, 0},
    {&__pyx_n_s_Checkpoint, __pyx_k_Checkpoint, sizeof(__pyx_k_Checkpoint), 0, 0, 1, 1},
    {&__pyx_n_s_Checkpoint___reduce_cython, __pyx_k_Checkpoint___reduce_cython, sizeof(__pyx_k_Checkpoint___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Checkpoint___setstate_cython, __pyx_k_Checkpoint___setstate_cython, sizeof(__pyx_k_Checkpoint___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Checkpoint_create_checkpoint, __pyx_k_Checkpoint_create_checkpoint, sizeof(__pyx_k_Checkpoint_create_checkpoint), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyHandle, __pyx_k_ColumnFamilyHandle, sizeof(__pyx_k_ColumnFamilyHandle), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyHandle___reduce_cyt, __pyx_k_ColumnFamilyHandle___reduce_cyt, sizeof(__pyx_k_ColumnFamilyHandle___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyHandle___reduce_cyth, __pyx_k_ColumnFamilyHandle___reduce_cyth, sizeof(__pyx_k_ColumnFamilyHandle___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyHandle___setstate_c, __pyx_k_ColumnFamilyHandle___setstate_c, sizeof(__pyx_k_ColumnFamilyHandle___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyHandle___setstate_cy, __pyx_k_ColumnFamilyHandle___setstate_cy, sizeof(__pyx_k_ColumnFamilyHandle___setstate_cy), 0, 0, 1, 1},
    {&__pyx_kp_u_ColumnFamilyHandle_name, __pyx_k_ColumnFamilyHandle_name, sizeof(__pyx_k_ColumnFamilyHandle_name), 0, 1, 0, 0},
    {&__pyx_n_s_ColumnFamilyOptions, __pyx_k_ColumnFamilyOptions, sizeof(__pyx_k_ColumnFamilyOptions), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyOptions___reduce_cyt, __pyx_k_ColumnFamilyOptions___reduce_cyt, sizeof(__pyx_k_ColumnFamilyOptions___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_ColumnFamilyOptions___setstate_c, __pyx_k_ColumnFamilyOptions___setstate_c, sizeof(__pyx_k_ColumnFamilyOptions___setstate_c), 0, 0, 1, 1},
    {&__pyx_kp_u_ColumnFamilyOptions_are_in_use_b, __pyx_k_ColumnFamilyOptions_are_in_use_b, sizeof(__pyx_k_ColumnFamilyOptions_are_in_use_b), 0, 1, 0, 0},
    {&__pyx_kp_u_ColumnFamilyOptions_object_for, __pyx_k_ColumnFamilyOptions_object_for, sizeof(__pyx_k_ColumnFamilyOptions_object_for), 0, 1, 0, 0},
    {&__pyx_n_s_CompactionPri, __pyx_k_CompactionPri, sizeof(__pyx_k_CompactionPri), 0, 0, 1, 1},
    {&__pyx_n_s_CompactionPri___reduce_cython, __pyx_k_CompactionPri___reduce_cython, sizeof(__pyx_k_CompactionPri___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_CompactionPri___setstate_cython, __pyx_k_CompactionPri___setstate_cython, sizeof(__pyx_k_CompactionPri___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Comparator, __pyx_k_Comparator, sizeof(__pyx_k_Comparator), 0, 0, 1, 1},
    {&__pyx_n_s_CompressionType, __pyx_k_CompressionType, sizeof(__pyx_k_CompressionType), 0, 0, 1, 1},
    {&__pyx_n_s_CompressionType___reduce_cython, __pyx_k_CompressionType___reduce_cython, sizeof(__pyx_k_CompressionType___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_CompressionType___setstate_cytho, __pyx_k_CompressionType___setstate_cytho, sizeof(__pyx_k_CompressionType___setstate_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_Corruption, __pyx_k_Corruption, sizeof(__pyx_k_Corruption), 0, 0, 1, 1},
    {&__pyx_n_s_DB, __pyx_k_DB, sizeof(__pyx_k_DB), 0, 0, 1, 1},
    {&__pyx_n_s_DB___parse_read_opts, __pyx_k_DB___parse_read_opts, sizeof(__pyx_k_DB___parse_read_opts), 0, 0, 1, 1},
    {&__pyx_n_s_DB___reduce_cython, __pyx_k_DB___reduce_cython, sizeof(__pyx_k_DB___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DB___setstate_cython, __pyx_k_DB___setstate_cython, sizeof(__pyx_k_DB___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DB__parse_read_opts, __pyx_k_DB__parse_read_opts, sizeof(__pyx_k_DB__parse_read_opts), 0, 0, 1, 1},
    {&__pyx_n_s_DB_build_read_opts_locals_make_b, __pyx_k_DB_build_read_opts_locals_make_b, sizeof(__pyx_k_DB_build_read_opts_locals_make_b), 0, 0, 1, 1},
    {&__pyx_n_s_DB_close, __pyx_k_DB_close, sizeof(__pyx_k_DB_close), 0, 0, 1, 1},
    {&__pyx_n_s_DB_compact_range, __pyx_k_DB_compact_range, sizeof(__pyx_k_DB_compact_range), 0, 0, 1, 1},
    {&__pyx_n_s_DB_create_column_family, __pyx_k_DB_create_column_family, sizeof(__pyx_k_DB_create_column_family), 0, 0, 1, 1},
    {&__pyx_n_s_DB_delete, __pyx_k_DB_delete, sizeof(__pyx_k_DB_delete), 0, 0, 1, 1},
    {&__pyx_n_s_DB_drop_column_family, __pyx_k_DB_drop_column_family, sizeof(__pyx_k_DB_drop_column_family), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get, __pyx_k_DB_get, sizeof(__pyx_k_DB_get), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get_column_family, __pyx_k_DB_get_column_family, sizeof(__pyx_k_DB_get_column_family), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get_column_family_meta_data, __pyx_k_DB_get_column_family_meta_data, sizeof(__pyx_k_DB_get_column_family_meta_data), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get_live_files_metadata, __pyx_k_DB_get_live_files_metadata, sizeof(__pyx_k_DB_get_live_files_metadata), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get_property, __pyx_k_DB_get_property, sizeof(__pyx_k_DB_get_property), 0, 0, 1, 1},
    {&__pyx_n_s_DB_iteritems, __pyx_k_DB_iteritems, sizeof(__pyx_k_DB_iteritems), 0, 0, 1, 1},
    {&__pyx_n_s_DB_iterkeys, __pyx_k_DB_iterkeys, sizeof(__pyx_k_DB_iterkeys), 0, 0, 1, 1},
    {&__pyx_n_s_DB_iterskeys, __pyx_k_DB_iterskeys, sizeof(__pyx_k_DB_iterskeys), 0, 0, 1, 1},
    {&__pyx_n_s_DB_itersvalues, __pyx_k_DB_itersvalues, sizeof(__pyx_k_DB_itersvalues), 0, 0, 1, 1},
    {&__pyx_n_s_DB_itervalues, __pyx_k_DB_itervalues, sizeof(__pyx_k_DB_itervalues), 0, 0, 1, 1},
    {&__pyx_n_s_DB_key_may_exist, __pyx_k_DB_key_may_exist, sizeof(__pyx_k_DB_key_may_exist), 0, 0, 1, 1},
    {&__pyx_n_s_DB_merge, __pyx_k_DB_merge, sizeof(__pyx_k_DB_merge), 0, 0, 1, 1},
    {&__pyx_n_s_DB_multi_get, __pyx_k_DB_multi_get, sizeof(__pyx_k_DB_multi_get), 0, 0, 1, 1},
    {&__pyx_n_s_DB_put, __pyx_k_DB_put, sizeof(__pyx_k_DB_put), 0, 0, 1, 1},
    {&__pyx_n_s_DB_snapshot, __pyx_k_DB_snapshot, sizeof(__pyx_k_DB_snapshot), 0, 0, 1, 1},
    {&__pyx_n_s_DB_try_catch_up_with_primary, __pyx_k_DB_try_catch_up_with_primary, sizeof(__pyx_k_DB_try_catch_up_with_primary), 0, 0, 1, 1},
    {&__pyx_n_s_DB_write, __pyx_k_DB_write, sizeof(__pyx_k_DB_write), 0, 0, 1, 1},
    {&__pyx_n_u_Delete, __pyx_k_Delete, sizeof(__pyx_k_Delete), 0, 1, 0, 1},
    {&__pyx_n_s_Error, __pyx_k_Error, sizeof(__pyx_k_Error), 0, 0, 1, 1},
    {&__pyx_n_s_FilterPolicy, __pyx_k_FilterPolicy, sizeof(__pyx_k_FilterPolicy), 0, 0, 1, 1},
    {&__pyx_n_s_HashLinkListMemtableFactory, __pyx_k_HashLinkListMemtableFactory, sizeof(__pyx_k_HashLinkListMemtableFactory), 0, 0, 1, 1},
    {&__pyx_n_s_HashLinkListMemtableFactory___re, __pyx_k_HashLinkListMemtableFactory___re, sizeof(__pyx_k_HashLinkListMemtableFactory___re), 0, 0, 1, 1},
    {&__pyx_n_s_HashLinkListMemtableFactory___se, __pyx_k_HashLinkListMemtableFactory___se, sizeof(__pyx_k_HashLinkListMemtableFactory___se), 0, 0, 1, 1},
    {&__pyx_n_s_HashSkipListMemtableFactory, __pyx_k_HashSkipListMemtableFactory, sizeof(__pyx_k_HashSkipListMemtableFactory), 0, 0, 1, 1},
    {&__pyx_n_s_HashSkipListMemtableFactory___re, __pyx_k_HashSkipListMemtableFactory___re, sizeof(__pyx_k_HashSkipListMemtableFactory___re), 0, 0, 1, 1},
    {&__pyx_n_s_HashSkipListMemtableFactory___se, __pyx_k_HashSkipListMemtableFactory___se, sizeof(__pyx_k_HashSkipListMemtableFactory___se), 0, 0, 1, 1},
    {&__pyx_n_s_IAssociativeMergeOperator, __pyx_k_IAssociativeMergeOperator, sizeof(__pyx_k_IAssociativeMergeOperator), 0, 0, 1, 1},
    {&__pyx_n_s_IComparator, __pyx_k_IComparator, sizeof(__pyx_k_IComparator), 0, 0, 1, 1},
    {&__pyx_n_s_IFilterPolicy, __pyx_k_IFilterPolicy, sizeof(__pyx_k_IFilterPolicy), 0, 0, 1, 1},
    {&__pyx_n_s_IMergeOperator, __pyx_k_IMergeOperator, sizeof(__pyx_k_IMergeOperator), 0, 0, 1, 1},
    {&__pyx_n_s_ISliceTransform, __pyx_k_ISliceTransform, sizeof(__pyx_k_ISliceTransform), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_Incomplete, __pyx_k_Incomplete, sizeof(__pyx_k_Incomplete), 0, 0, 1, 1},
    {&__pyx_n_s_IncreaseParallelism, __pyx_k_IncreaseParallelism, sizeof(__pyx_k_IncreaseParallelism), 0, 0, 1, 1},
    {&__pyx_n_s_InvalidArgument, __pyx_k_InvalidArgument, sizeof(__pyx_k_InvalidArgument), 0, 0, 1, 1},
    {&__pyx_kp_u_Invalid_read_tier, __pyx_k_Invalid_read_tier, sizeof(__pyx_k_Invalid_read_tier), 0, 1, 0, 0},
    {&__pyx_n_s_ItemsIterator___reduce_cython, __pyx_k_ItemsIterator___reduce_cython, sizeof(__pyx_k_ItemsIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ItemsIterator___setstate_cython, __pyx_k_ItemsIterator___setstate_cython, sizeof(__pyx_k_ItemsIterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_KeysIterator___reduce_cython, __pyx_k_KeysIterator___reduce_cython, sizeof(__pyx_k_KeysIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_KeysIterator___setstate_cython, __pyx_k_KeysIterator___setstate_cython, sizeof(__pyx_k_KeysIterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_LRUCache, __pyx_k_LRUCache, sizeof(__pyx_k_LRUCache), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_n_u_Merge, __pyx_k_Merge, sizeof(__pyx_k_Merge), 0, 1, 0, 1},
    {&__pyx_n_s_MergeInProgress, __pyx_k_MergeInProgress, sizeof(__pyx_k_MergeInProgress), 0, 0, 1, 1},
    {&__pyx_n_s_MergeOperator, __pyx_k_MergeOperator, sizeof(__pyx_k_MergeOperator), 0, 0, 1, 1},
    {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
    {&__pyx_n_s_NotFound, __pyx_k_NotFound, sizeof(__pyx_k_NotFound), 0, 0, 1, 1},
    {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
    {&__pyx_n_s_NotSupported, __pyx_k_NotSupported, sizeof(__pyx_k_NotSupported), 0, 0, 1, 1},
    {&__pyx_n_s_Options, __pyx_k_Options, sizeof(__pyx_k_Options), 0, 0, 1, 1},
    {&__pyx_n_s_Options_IncreaseParallelism, __pyx_k_Options_IncreaseParallelism, sizeof(__pyx_k_Options_IncreaseParallelism), 0, 0, 1, 1},
    {&__pyx_n_s_Options___reduce_cython, __pyx_k_Options___reduce_cython, sizeof(__pyx_k_Options___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Options___setstate_cython, __pyx_k_Options___setstate_cython, sizeof(__pyx_k_Options___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_Options_object_is_already_used_b, __pyx_k_Options_object_is_already_used_b, sizeof(__pyx_k_Options_object_is_already_used_b), 0, 1, 0, 0},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_PlainTableFactory, __pyx_k_PlainTableFactory, sizeof(__pyx_k_PlainTableFactory), 0, 0, 1, 1},
    {&__pyx_n_s_PlainTableFactory___reduce_cytho, __pyx_k_PlainTableFactory___reduce_cytho, sizeof(__pyx_k_PlainTableFactory___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_PlainTableFactory___setstate_cyt, __pyx_k_PlainTableFactory___setstate_cyt, sizeof(__pyx_k_PlainTableFactory___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_u_Put, __pyx_k_Put, sizeof(__pyx_k_Put), 0, 1, 0, 1},
    {&__pyx_n_s_PyBloomFilterPolicy___reduce_cyt, __pyx_k_PyBloomFilterPolicy___reduce_cyt, sizeof(__pyx_k_PyBloomFilterPolicy___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_PyBloomFilterPolicy___setstate_c, __pyx_k_PyBloomFilterPolicy___setstate_c, sizeof(__pyx_k_PyBloomFilterPolicy___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_PyBloomFilterPolicy_create_filte, __pyx_k_PyBloomFilterPolicy_create_filte, sizeof(__pyx_k_PyBloomFilterPolicy_create_filte), 0, 0, 1, 1},
    {&__pyx_n_s_PyBloomFilterPolicy_key_may_matc, __pyx_k_PyBloomFilterPolicy_key_may_matc, sizeof(__pyx_k_PyBloomFilterPolicy_key_may_matc), 0, 0, 1, 1},
    {&__pyx_n_s_PyBloomFilterPolicy_name, __pyx_k_PyBloomFilterPolicy_name, sizeof(__pyx_k_PyBloomFilterPolicy_name), 0, 0, 1, 1},
    {&__pyx_n_s_PyBytewiseComparator___reduce_cy, __pyx_k_PyBytewiseComparator___reduce_cy, sizeof(__pyx_k_PyBytewiseComparator___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_PyBytewiseComparator___setstate, __pyx_k_PyBytewiseComparator___setstate, sizeof(__pyx_k_PyBytewiseComparator___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_PyBytewiseComparator_compare, __pyx_k_PyBytewiseComparator_compare, sizeof(__pyx_k_PyBytewiseComparator_compare), 0, 0, 1, 1},
    {&__pyx_n_s_PyBytewiseComparator_name, __pyx_k_PyBytewiseComparator_name, sizeof(__pyx_k_PyBytewiseComparator_name), 0, 0, 1, 1},
    {&__pyx_n_s_PyCache___reduce_cython, __pyx_k_PyCache___reduce_cython, sizeof(__pyx_k_PyCache___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyCache___setstate_cython, __pyx_k_PyCache___setstate_cython, sizeof(__pyx_k_PyCache___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyComparator___reduce_cython, __pyx_k_PyComparator___reduce_cython, sizeof(__pyx_k_PyComparator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyComparator___setstate_cython, __pyx_k_PyComparator___setstate_cython, sizeof(__pyx_k_PyComparator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyFilterPolicy___reduce_cython, __pyx_k_PyFilterPolicy___reduce_cython, sizeof(__pyx_k_PyFilterPolicy___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyFilterPolicy___setstate_cython, __pyx_k_PyFilterPolicy___setstate_cython, sizeof(__pyx_k_PyFilterPolicy___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyGenericComparator___reduce_cyt, __pyx_k_PyGenericComparator___reduce_cyt, sizeof(__pyx_k_PyGenericComparator___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_PyGenericComparator___setstate_c, __pyx_k_PyGenericComparator___setstate_c, sizeof(__pyx_k_PyGenericComparator___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_PyGenericFilterPolicy___reduce_c, __pyx_k_PyGenericFilterPolicy___reduce_c, sizeof(__pyx_k_PyGenericFilterPolicy___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_PyGenericFilterPolicy___setstate, __pyx_k_PyGenericFilterPolicy___setstate, sizeof(__pyx_k_PyGenericFilterPolicy___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_PyLRUCache___reduce_cython, __pyx_k_PyLRUCache___reduce_cython, sizeof(__pyx_k_PyLRUCache___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyLRUCache___setstate_cython, __pyx_k_PyLRUCache___setstate_cython, sizeof(__pyx_k_PyLRUCache___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyMemtableFactory___reduce_cytho, __pyx_k_PyMemtableFactory___reduce_cytho, sizeof(__pyx_k_PyMemtableFactory___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_PyMemtableFactory___setstate_cyt, __pyx_k_PyMemtableFactory___setstate_cyt, sizeof(__pyx_k_PyMemtableFactory___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_PyMergeOperator___reduce_cython, __pyx_k_PyMergeOperator___reduce_cython, sizeof(__pyx_k_PyMergeOperator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyMergeOperator___setstate_cytho, __pyx_k_PyMergeOperator___setstate_cytho, sizeof(__pyx_k_PyMergeOperator___setstate_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_PySliceTransform___reduce_cython, __pyx_k_PySliceTransform___reduce_cython, sizeof(__pyx_k_PySliceTransform___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PySliceTransform___setstate_cyth, __pyx_k_PySliceTransform___setstate_cyth, sizeof(__pyx_k_PySliceTransform___setstate_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_PyTableFactory___reduce_cython, __pyx_k_PyTableFactory___reduce_cython, sizeof(__pyx_k_PyTableFactory___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PyTableFactory___setstate_cython, __pyx_k_PyTableFactory___setstate_cython, sizeof(__pyx_k_PyTableFactory___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator___reduce_cython, __pyx_k_ReversedIterator___reduce_cython, sizeof(__pyx_k_ReversedIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator___reversed, __pyx_k_ReversedIterator___reversed, sizeof(__pyx_k_ReversedIterator___reversed), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator___setstate_cyth, __pyx_k_ReversedIterator___setstate_cyth, sizeof(__pyx_k_ReversedIterator___setstate_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator_get, __pyx_k_ReversedIterator_get, sizeof(__pyx_k_ReversedIterator_get), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator_seek, __pyx_k_ReversedIterator_seek, sizeof(__pyx_k_ReversedIterator_seek), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator_seek_for_prev, __pyx_k_ReversedIterator_seek_for_prev, sizeof(__pyx_k_ReversedIterator_seek_for_prev), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator_seek_to_first, __pyx_k_ReversedIterator_seek_to_first, sizeof(__pyx_k_ReversedIterator_seek_to_first), 0, 0, 1, 1},
    {&__pyx_n_s_ReversedIterator_seek_to_last, __pyx_k_ReversedIterator_seek_to_last, sizeof(__pyx_k_ReversedIterator_seek_to_last), 0, 0, 1, 1},
    {&__pyx_n_s_RocksIOError, __pyx_k_RocksIOError, sizeof(__pyx_k_RocksIOError), 0, 0, 1, 1},
    {&__pyx_n_s_SkipListMemtableFactory, __pyx_k_SkipListMemtableFactory, sizeof(__pyx_k_SkipListMemtableFactory), 0, 0, 1, 1},
    {&__pyx_n_s_SkipListMemtableFactory___reduce, __pyx_k_SkipListMemtableFactory___reduce, sizeof(__pyx_k_SkipListMemtableFactory___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_SkipListMemtableFactory___setsta, __pyx_k_SkipListMemtableFactory___setsta, sizeof(__pyx_k_SkipListMemtableFactory___setsta), 0, 0, 1, 1},
    {&__pyx_n_s_SliceTransform, __pyx_k_SliceTransform, sizeof(__pyx_k_SliceTransform), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot___reduce_cython, __pyx_k_Snapshot___reduce_cython, sizeof(__pyx_k_Snapshot___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot___setstate_cython, __pyx_k_Snapshot___setstate_cython, sizeof(__pyx_k_Snapshot___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
    {&__pyx_kp_u_These_can_not_be_constructed_fro, __pyx_k_These_can_not_be_constructed_fro, sizeof(__pyx_k_These_can_not_be_constructed_fro), 0, 1, 0, 0},
    {&__pyx_n_s_TransactionDB, __pyx_k_TransactionDB, sizeof(__pyx_k_TransactionDB), 0, 0, 1, 1},
    {&__pyx_n_s_TransactionDBOptions, __pyx_k_TransactionDBOptions, sizeof(__pyx_k_TransactionDBOptions), 0, 0, 1, 1},
    {&__pyx_n_s_TransactionDBOptions___reduce_cy, __pyx_k_TransactionDBOptions___reduce_cy, sizeof(__pyx_k_TransactionDBOptions___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_TransactionDBOptions___setstate, __pyx_k_TransactionDBOptions___setstate, sizeof(__pyx_k_TransactionDBOptions___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_TransactionDB___reduce_cython, __pyx_k_TransactionDB___reduce_cython, sizeof(__pyx_k_TransactionDB___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_TransactionDB___setstate_cython, __pyx_k_TransactionDB___setstate_cython, sizeof(__pyx_k_TransactionDB___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_TransactionDB_close, __pyx_k_TransactionDB_close, sizeof(__pyx_k_TransactionDB_close), 0, 0, 1, 1},
    {&__pyx_kp_u_Transaction_Options_object_is_al, __pyx_k_Transaction_Options_object_is_al, sizeof(__pyx_k_Transaction_Options_object_is_al), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_u_Unknown_checksum_s, __pyx_k_Unknown_checksum_s, sizeof(__pyx_k_Unknown_checksum_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_compaction_pri_s, __pyx_k_Unknown_compaction_pri_s, sizeof(__pyx_k_Unknown_compaction_pri_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_compaction_style, __pyx_k_Unknown_compaction_style, sizeof(__pyx_k_Unknown_compaction_style), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_compaction_style_2, __pyx_k_Unknown_compaction_style_2, sizeof(__pyx_k_Unknown_compaction_style_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_compression_s, __pyx_k_Unknown_compression_s, sizeof(__pyx_k_Unknown_compression_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_encoding_type_s, __pyx_k_Unknown_encoding_type_s, sizeof(__pyx_k_Unknown_encoding_type_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_error_s, __pyx_k_Unknown_error_s, sizeof(__pyx_k_Unknown_error_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_index_type_s, __pyx_k_Unknown_index_type_s, sizeof(__pyx_k_Unknown_index_type_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_type_s, __pyx_k_Unknown_type_s, sizeof(__pyx_k_Unknown_type_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Unknown_write_policy, __pyx_k_Unknown_write_policy, sizeof(__pyx_k_Unknown_write_policy), 0, 1, 0, 0},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_ValuesIterator___reduce_cython, __pyx_k_ValuesIterator___reduce_cython, sizeof(__pyx_k_ValuesIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ValuesIterator___setstate_cython, __pyx_k_ValuesIterator___setstate_cython, sizeof(__pyx_k_ValuesIterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_VectorMemtableFactory, __pyx_k_VectorMemtableFactory, sizeof(__pyx_k_VectorMemtableFactory), 0, 0, 1, 1},
    {&__pyx_n_s_VectorMemtableFactory___reduce_c, __pyx_k_VectorMemtableFactory___reduce_c, sizeof(__pyx_k_VectorMemtableFactory___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_VectorMemtableFactory___setstate, __pyx_k_VectorMemtableFactory___setstate, sizeof(__pyx_k_VectorMemtableFactory___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch, __pyx_k_WriteBatch, sizeof(__pyx_k_WriteBatch), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatchIterator___reduce_cyth, __pyx_k_WriteBatchIterator___reduce_cyth, sizeof(__pyx_k_WriteBatchIterator___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatchIterator___setstate_cy, __pyx_k_WriteBatchIterator___setstate_cy, sizeof(__pyx_k_WriteBatchIterator___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch___reduce_cython, __pyx_k_WriteBatch___reduce_cython, sizeof(__pyx_k_WriteBatch___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch___setstate_cython, __pyx_k_WriteBatch___setstate_cython, sizeof(__pyx_k_WriteBatch___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_clear, __pyx_k_WriteBatch_clear, sizeof(__pyx_k_WriteBatch_clear), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_count, __pyx_k_WriteBatch_count, sizeof(__pyx_k_WriteBatch_count), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_data, __pyx_k_WriteBatch_data, sizeof(__pyx_k_WriteBatch_data), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_delete, __pyx_k_WriteBatch_delete, sizeof(__pyx_k_WriteBatch_delete), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_merge, __pyx_k_WriteBatch_merge, sizeof(__pyx_k_WriteBatch_merge), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_put, __pyx_k_WriteBatch_put, sizeof(__pyx_k_WriteBatch_put), 0, 0, 1, 1},
    {&__pyx_kp_u_Wrong_type_for_path_s, __pyx_k_Wrong_type_for_path_s, sizeof(__pyx_k_Wrong_type_for_path_s), 0, 1, 0, 0},
    {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
    {&__pyx_n_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 1},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_n_s__201, __pyx_k__201, sizeof(__pyx_k__201), 0, 0, 1, 1},
    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_n_u_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 1, 0, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_as_dict, __pyx_k_as_dict, sizeof(__pyx_k_as_dict), 0, 0, 1, 1},
    {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_backup_dir, __pyx_k_backup_dir, sizeof(__pyx_k_backup_dir), 0, 0, 1, 1},
    {&__pyx_n_s_backup_id, __pyx_k_backup_id, sizeof(__pyx_k_backup_id), 0, 0, 1, 1},
    {&__pyx_n_u_backup_id, __pyx_k_backup_id, sizeof(__pyx_k_backup_id), 0, 1, 0, 1},
    {&__pyx_n_s_backup_info, __pyx_k_backup_info, sizeof(__pyx_k_backup_info), 0, 0, 1, 1},
    {&__pyx_n_s_batch, __pyx_k_batch, sizeof(__pyx_k_batch), 0, 0, 1, 1},
    {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
    {&__pyx_n_s_begin_ptr, __pyx_k_begin_ptr, sizeof(__pyx_k_begin_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_begin_val, __pyx_k_begin_val, sizeof(__pyx_k_begin_val), 0, 0, 1, 1},
    {&__pyx_n_u_binary_search, __pyx_k_binary_search, sizeof(__pyx_k_binary_search), 0, 1, 0, 1},
    {&__pyx_n_s_bits_per_key, __pyx_k_bits_per_key, sizeof(__pyx_k_bits_per_key), 0, 0, 1, 1},
    {&__pyx_n_s_blc, __pyx_k_blc, sizeof(__pyx_k_blc), 0, 0, 1, 1},
    {&__pyx_n_s_block_cache, __pyx_k_block_cache, sizeof(__pyx_k_block_cache), 0, 0, 1, 1},
    {&__pyx_n_s_block_cache_compressed, __pyx_k_block_cache_compressed, sizeof(__pyx_k_block_cache_compressed), 0, 0, 1, 1},
    {&__pyx_n_s_block_restart_interval, __pyx_k_block_restart_interval, sizeof(__pyx_k_block_restart_interval), 0, 0, 1, 1},
    {&__pyx_n_s_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 0, 1, 1},
    {&__pyx_n_s_block_size_deviation, __pyx_k_block_size_deviation, sizeof(__pyx_k_block_size_deviation), 0, 0, 1, 1},
    {&__pyx_n_s_bloom_bits_per_key, __pyx_k_bloom_bits_per_key, sizeof(__pyx_k_bloom_bits_per_key), 0, 0, 1, 1},
    {&__pyx_n_u_bottommost_level_compaction, __pyx_k_bottommost_level_compaction, sizeof(__pyx_k_bottommost_level_compaction), 0, 1, 0, 1},
    {&__pyx_kp_u_bottommost_level_compaction_is_n, __pyx_k_bottommost_level_compaction_is_n, sizeof(__pyx_k_bottommost_level_compaction_is_n), 0, 1, 0, 0},
    {&__pyx_n_s_bucket_count, __pyx_k_bucket_count, sizeof(__pyx_k_bucket_count), 0, 0, 1, 1},
    {&__pyx_n_s_by_compensated_size, __pyx_k_by_compensated_size, sizeof(__pyx_k_by_compensated_size), 0, 0, 1, 1},
    {&__pyx_n_u_by_compensated_size, __pyx_k_by_compensated_size, sizeof(__pyx_k_by_compensated_size), 0, 1, 0, 1},
    {&__pyx_n_s_bzip2_compression, __pyx_k_bzip2_compression, sizeof(__pyx_k_bzip2_compression), 0, 0, 1, 1},
    {&__pyx_n_u_bzip2_compression, __pyx_k_bzip2_compression, sizeof(__pyx_k_bzip2_compression), 0, 1, 0, 1},
    {&__pyx_n_s_c_backup_id, __pyx_k_c_backup_id, sizeof(__pyx_k_c_backup_id), 0, 0, 1, 1},
    {&__pyx_n_s_c_checkpoint_dir, __pyx_k_c_checkpoint_dir, sizeof(__pyx_k_c_checkpoint_dir), 0, 0, 1, 1},
    {&__pyx_n_s_c_db_dir, __pyx_k_c_db_dir, sizeof(__pyx_k_c_db_dir), 0, 0, 1, 1},
    {&__pyx_n_s_c_flush_before_backup, __pyx_k_c_flush_before_backup, sizeof(__pyx_k_c_flush_before_backup), 0, 0, 1, 1},
    {&__pyx_n_s_c_key, __pyx_k_c_key, sizeof(__pyx_k_c_key), 0, 0, 1, 1},
    {&__pyx_n_s_c_keys, __pyx_k_c_keys, sizeof(__pyx_k_c_keys), 0, 0, 1, 1},
    {&__pyx_n_s_c_name, __pyx_k_c_name, sizeof(__pyx_k_c_name), 0, 0, 1, 1},
    {&__pyx_n_s_c_num_backups_to_keep, __pyx_k_c_num_backups_to_keep, sizeof(__pyx_k_c_num_backups_to_keep), 0, 0, 1, 1},
    {&__pyx_n_s_c_options, __pyx_k_c_options, sizeof(__pyx_k_c_options), 0, 0, 1, 1},
    {&__pyx_n_s_c_prop, __pyx_k_c_prop, sizeof(__pyx_k_c_prop), 0, 0, 1, 1},
    {&__pyx_n_s_c_safe, __pyx_k_c_safe, sizeof(__pyx_k_c_safe), 0, 0, 1, 1},
    {&__pyx_n_s_c_value, __pyx_k_c_value, sizeof(__pyx_k_c_value), 0, 0, 1, 1},
    {&__pyx_n_s_c_wal_dir, __pyx_k_c_wal_dir, sizeof(__pyx_k_c_wal_dir), 0, 0, 1, 1},
    {&__pyx_n_u_cache, __pyx_k_cache, sizeof(__pyx_k_cache), 0, 1, 0, 1},
    {&__pyx_n_s_cache_index_and_filter_blocks, __pyx_k_cache_index_and_filter_blocks, sizeof(__pyx_k_cache_index_and_filter_blocks), 0, 0, 1, 1},
    {&__pyx_n_s_capacity, __pyx_k_capacity, sizeof(__pyx_k_capacity), 0, 0, 1, 1},
    {&__pyx_n_s_cf_handle, __pyx_k_cf_handle, sizeof(__pyx_k_cf_handle), 0, 0, 1, 1},
    {&__pyx_n_s_cf_handles, __pyx_k_cf_handles, sizeof(__pyx_k_cf_handles), 0, 0, 1, 1},
    {&__pyx_n_s_cf_iter, __pyx_k_cf_iter, sizeof(__pyx_k_cf_iter), 0, 0, 1, 1},
    {&__pyx_n_s_cfhandle, __pyx_k_cfhandle, sizeof(__pyx_k_cfhandle), 0, 0, 1, 1},
    {&__pyx_n_u_change_level, __pyx_k_change_level, sizeof(__pyx_k_change_level), 0, 1, 0, 1},
    {&__pyx_n_s_checkpoint_dir, __pyx_k_checkpoint_dir, sizeof(__pyx_k_checkpoint_dir), 0, 0, 1, 1},
    {&__pyx_n_s_checksum, __pyx_k_checksum, sizeof(__pyx_k_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_column_families, __pyx_k_column_families, sizeof(__pyx_k_column_families), 0, 0, 1, 1},
    {&__pyx_n_s_column_family, __pyx_k_column_family, sizeof(__pyx_k_column_family), 0, 0, 1, 1},
    {&__pyx_kp_u_column_family_name, __pyx_k_column_family_name, sizeof(__pyx_k_column_family_name), 0, 1, 0, 0},
    {&__pyx_kp_u_column_family_options, __pyx_k_column_family_options, sizeof(__pyx_k_column_family_options), 0, 1, 0, 0},
    {&__pyx_n_s_compact_range, __pyx_k_compact_range, sizeof(__pyx_k_compact_range), 0, 0, 1, 1},
    {&__pyx_n_s_compare, __pyx_k_compare, sizeof(__pyx_k_compare), 0, 0, 1, 1},
    {&__pyx_n_s_compression, __pyx_k_compression, sizeof(__pyx_k_compression), 0, 0, 1, 1},
    {&__pyx_n_u_compression_size_percent, __pyx_k_compression_size_percent, sizeof(__pyx_k_compression_size_percent), 0, 1, 0, 1},
    {&__pyx_n_s_copts, __pyx_k_copts, sizeof(__pyx_k_copts), 0, 0, 1, 1},
    {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
    {&__pyx_n_u_crc32, __pyx_k_crc32, sizeof(__pyx_k_crc32), 0, 1, 0, 1},
    {&__pyx_n_s_create_backup, __pyx_k_create_backup, sizeof(__pyx_k_create_backup), 0, 0, 1, 1},
    {&__pyx_n_s_create_checkpoint, __pyx_k_create_checkpoint, sizeof(__pyx_k_create_checkpoint), 0, 0, 1, 1},
    {&__pyx_n_s_create_column_family, __pyx_k_create_column_family, sizeof(__pyx_k_create_column_family), 0, 0, 1, 1},
    {&__pyx_n_s_create_filter, __pyx_k_create_filter, sizeof(__pyx_k_create_filter), 0, 0, 1, 1},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_db, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
    {&__pyx_n_s_db_dir, __pyx_k_db_dir, sizeof(__pyx_k_db_dir), 0, 0, 1, 1},
    {&__pyx_n_s_db_name, __pyx_k_db_name, sizeof(__pyx_k_db_name), 0, 0, 1, 1},
    {&__pyx_n_s_db_path, __pyx_k_db_path, sizeof(__pyx_k_db_path), 0, 0, 1, 1},
    {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
    {&__pyx_n_s_delete_backup, __pyx_k_delete_backup, sizeof(__pyx_k_delete_backup), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_disable_compression, __pyx_k_disable_compression, sizeof(__pyx_k_disable_compression), 0, 0, 1, 1},
    {&__pyx_n_u_disable_compression, __pyx_k_disable_compression, sizeof(__pyx_k_disable_compression), 0, 1, 0, 1},
    {&__pyx_n_s_disable_wal, __pyx_k_disable_wal, sizeof(__pyx_k_disable_wal), 0, 0, 1, 1},
    {&__pyx_n_s_drop_column_family, __pyx_k_drop_column_family, sizeof(__pyx_k_drop_column_family), 0, 0, 1, 1},
    {&__pyx_n_s_dst, __pyx_k_dst, sizeof(__pyx_k_dst), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_u_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 1, 0, 1},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_encoding_type, __pyx_k_encoding_type, sizeof(__pyx_k_encoding_type), 0, 0, 1, 1},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_s_end_ptr, __pyx_k_end_ptr, sizeof(__pyx_k_end_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_end_val, __pyx_k_end_val, sizeof(__pyx_k_end_val), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
    {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
    {&__pyx_n_s_fetch, __pyx_k_fetch, sizeof(__pyx_k_fetch), 0, 0, 1, 1},
    {&__pyx_n_u_fifo, __pyx_k_fifo, sizeof(__pyx_k_fifo), 0, 1, 0, 1},
    {&__pyx_n_u_file_count, __pyx_k_file_count, sizeof(__pyx_k_file_count), 0, 1, 0, 1},
    {&__pyx_n_s_fill_cache, __pyx_k_fill_cache, sizeof(__pyx_k_fill_cache), 0, 0, 1, 1},
    {&__pyx_n_u_fill_cache, __pyx_k_fill_cache, sizeof(__pyx_k_fill_cache), 0, 1, 0, 1},
    {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
    {&__pyx_n_s_filter_policy, __pyx_k_filter_policy, sizeof(__pyx_k_filter_policy), 0, 0, 1, 1},
    {&__pyx_n_s_flush_before_backup, __pyx_k_flush_before_backup, sizeof(__pyx_k_flush_before_backup), 0, 0, 1, 1},
    {&__pyx_n_u_force, __pyx_k_force, sizeof(__pyx_k_force), 0, 1, 0, 1},
    {&__pyx_n_s_format_exc, __pyx_k_format_exc, sizeof(__pyx_k_format_exc), 0, 0, 1, 1},
    {&__pyx_n_s_format_version, __pyx_k_format_version, sizeof(__pyx_k_format_version), 0, 0, 1, 1},
    {&__pyx_n_s_fromkeys, __pyx_k_fromkeys, sizeof(__pyx_k_fromkeys), 0, 0, 1, 1},
    {&__pyx_n_s_full_merge, __pyx_k_full_merge, sizeof(__pyx_k_full_merge), 0, 0, 1, 1},
    {&__pyx_n_s_full_scan_mode, __pyx_k_full_scan_mode, sizeof(__pyx_k_full_scan_mode), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_get_backup_info, __pyx_k_get_backup_info, sizeof(__pyx_k_get_backup_info), 0, 0, 1, 1},
    {&__pyx_n_s_get_column_family, __pyx_k_get_column_family, sizeof(__pyx_k_get_column_family), 0, 0, 1, 1},
    {&__pyx_n_s_get_column_family_meta_data, __pyx_k_get_column_family_meta_data, sizeof(__pyx_k_get_column_family_meta_data), 0, 0, 1, 1},
    {&__pyx_n_s_get_live_files_metadata, __pyx_k_get_live_files_metadata, sizeof(__pyx_k_get_live_files_metadata), 0, 0, 1, 1},
    {&__pyx_n_s_get_property, __pyx_k_get_property, sizeof(__pyx_k_get_property), 0, 0, 1, 1},
    {&__pyx_n_s_getfilesystemencoding, __pyx_k_getfilesystemencoding, sizeof(__pyx_k_getfilesystemencoding), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
    {&__pyx_n_s_hash_index_allow_collision, __pyx_k_hash_index_allow_collision, sizeof(__pyx_k_hash_index_allow_collision), 0, 0, 1, 1},
    {&__pyx_n_u_hash_search, __pyx_k_hash_search, sizeof(__pyx_k_hash_search), 0, 1, 0, 1},
    {&__pyx_n_s_hash_table_ratio, __pyx_k_hash_table_ratio, sizeof(__pyx_k_hash_table_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_huge_page_tlb_size, __pyx_k_huge_page_tlb_size, sizeof(__pyx_k_huge_page_tlb_size), 0, 0, 1, 1},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_kp_u_id_2, __pyx_k_id_2, sizeof(__pyx_k_id_2), 0, 1, 0, 0},
    {&__pyx_n_u_if_compaction_filter, __pyx_k_if_compaction_filter, sizeof(__pyx_k_if_compaction_filter), 0, 1, 0, 1},
    {&__pyx_n_s_ignore_missing_column_families, __pyx_k_ignore_missing_column_families, sizeof(__pyx_k_ignore_missing_column_families), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_in_domain, __pyx_k_in_domain, sizeof(__pyx_k_in_domain), 0, 0, 1, 1},
    {&__pyx_n_s_in_range, __pyx_k_in_range, sizeof(__pyx_k_in_range), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_s_index_sparseness, __pyx_k_index_sparseness, sizeof(__pyx_k_index_sparseness), 0, 0, 1, 1},
    {&__pyx_n_s_index_type, __pyx_k_index_type, sizeof(__pyx_k_index_type), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_interfaces, __pyx_k_interfaces, sizeof(__pyx_k_interfaces), 0, 0, 1, 1},
    {&__pyx_n_u_invalid, __pyx_k_invalid, sizeof(__pyx_k_invalid), 0, 1, 0, 1},
    {&__pyx_kp_u_is_already_an_existing_column_f, __pyx_k_is_already_an_existing_column_f, sizeof(__pyx_k_is_already_an_existing_column_f), 0, 1, 0, 0},
    {&__pyx_kp_u_is_already_used_by_another_Colu, __pyx_k_is_already_used_by_another_Colu, sizeof(__pyx_k_is_already_used_by_another_Colu), 0, 1, 0, 0},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_is_no_longer_a_valid_ColumnFami, __pyx_k_is_no_longer_a_valid_ColumnFami, sizeof(__pyx_k_is_no_longer_a_valid_ColumnFami), 0, 1, 0, 0},
    {&__pyx_kp_u_is_not_of_type, __pyx_k_is_not_of_type, sizeof(__pyx_k_is_not_of_type), 0, 1, 0, 0},
    {&__pyx_n_s_is_valid, __pyx_k_is_valid, sizeof(__pyx_k_is_valid), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
    {&__pyx_n_s_it_ptr, __pyx_k_it_ptr, sizeof(__pyx_k_it_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
    {&__pyx_n_s_iterate_bound, __pyx_k_iterate_bound, sizeof(__pyx_k_iterate_bound), 0, 0, 1, 1},
    {&__pyx_n_s_iterate_lower_bound, __pyx_k_iterate_lower_bound, sizeof(__pyx_k_iterate_lower_bound), 0, 0, 1, 1},
    {&__pyx_n_u_iterate_lower_bound, __pyx_k_iterate_lower_bound, sizeof(__pyx_k_iterate_lower_bound), 0, 1, 0, 1},
    {&__pyx_n_s_iterate_upper_bound, __pyx_k_iterate_upper_bound, sizeof(__pyx_k_iterate_upper_bound), 0, 0, 1, 1},
    {&__pyx_n_u_iterate_upper_bound, __pyx_k_iterate_upper_bound, sizeof(__pyx_k_iterate_upper_bound), 0, 1, 0, 1},
    {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
    {&__pyx_n_s_iterkeys, __pyx_k_iterkeys, sizeof(__pyx_k_iterkeys), 0, 0, 1, 1},
    {&__pyx_n_s_iters, __pyx_k_iters, sizeof(__pyx_k_iters), 0, 0, 1, 1},
    {&__pyx_n_s_iterskeys, __pyx_k_iterskeys, sizeof(__pyx_k_iterskeys), 0, 0, 1, 1},
    {&__pyx_n_s_itersvalues, __pyx_k_itersvalues, sizeof(__pyx_k_itersvalues), 0, 0, 1, 1},
    {&__pyx_n_s_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_key_may_exist, __pyx_k_key_may_exist, sizeof(__pyx_k_key_may_exist), 0, 0, 1, 1},
    {&__pyx_n_s_key_may_match, __pyx_k_key_may_match, sizeof(__pyx_k_key_may_match), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
    {&__pyx_n_u_largest_seqno, __pyx_k_largest_seqno, sizeof(__pyx_k_largest_seqno), 0, 1, 0, 1},
    {&__pyx_n_u_largestkey, __pyx_k_largestkey, sizeof(__pyx_k_largestkey), 0, 1, 0, 1},
    {&__pyx_n_u_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 1, 0, 1},
    {&__pyx_n_s_list_column_families, __pyx_k_list_column_families, sizeof(__pyx_k_list_column_families), 0, 0, 1, 1},
    {&__pyx_n_s_low_pri, __pyx_k_low_pri, sizeof(__pyx_k_low_pri), 0, 0, 1, 1},
    {&__pyx_n_s_lz4_compression, __pyx_k_lz4_compression, sizeof(__pyx_k_lz4_compression), 0, 0, 1, 1},
    {&__pyx_n_u_lz4_compression, __pyx_k_lz4_compression, sizeof(__pyx_k_lz4_compression), 0, 1, 0, 1},
    {&__pyx_n_s_lz4hc_compression, __pyx_k_lz4hc_compression, sizeof(__pyx_k_lz4hc_compression), 0, 0, 1, 1},
    {&__pyx_n_u_lz4hc_compression, __pyx_k_lz4hc_compression, sizeof(__pyx_k_lz4hc_compression), 0, 1, 0, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_make_bytes, __pyx_k_make_bytes, sizeof(__pyx_k_make_bytes), 0, 0, 1, 1},
    {&__pyx_n_u_max_dict_bytes, __pyx_k_max_dict_bytes, sizeof(__pyx_k_max_dict_bytes), 0, 1, 0, 1},
    {&__pyx_n_u_max_merge_width, __pyx_k_max_merge_width, sizeof(__pyx_k_max_merge_width), 0, 1, 0, 1},
    {&__pyx_n_u_max_size_amplification_percent, __pyx_k_max_size_amplification_percent, sizeof(__pyx_k_max_size_amplification_percent), 0, 1, 0, 1},
    {&__pyx_n_s_merge, __pyx_k_merge, sizeof(__pyx_k_merge), 0, 0, 1, 1},
    {&__pyx_n_s_metadata, __pyx_k_metadata, sizeof(__pyx_k_metadata), 0, 0, 1, 1},
    {&__pyx_n_u_min_merge_width, __pyx_k_min_merge_width, sizeof(__pyx_k_min_merge_width), 0, 1, 0, 1},
    {&__pyx_n_s_min_overlapping_ratio, __pyx_k_min_overlapping_ratio, sizeof(__pyx_k_min_overlapping_ratio), 0, 0, 1, 1},
    {&__pyx_n_u_min_overlapping_ratio, __pyx_k_min_overlapping_ratio, sizeof(__pyx_k_min_overlapping_ratio), 0, 1, 0, 1},
    {&__pyx_n_s_multi_get, __pyx_k_multi_get, sizeof(__pyx_k_multi_get), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_u_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 1, 0, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_no_block_cache, __pyx_k_no_block_cache, sizeof(__pyx_k_no_block_cache), 0, 0, 1, 1},
    {&__pyx_n_s_no_compression, __pyx_k_no_compression, sizeof(__pyx_k_no_compression), 0, 0, 1, 1},
    {&__pyx_n_u_no_compression, __pyx_k_no_compression, sizeof(__pyx_k_no_compression), 0, 1, 0, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_no_slowdown, __pyx_k_no_slowdown, sizeof(__pyx_k_no_slowdown), 0, 0, 1, 1},
    {&__pyx_n_u_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 1, 0, 1},
    {&__pyx_n_s_num_backups_to_keep, __pyx_k_num_backups_to_keep, sizeof(__pyx_k_num_backups_to_keep), 0, 0, 1, 1},
    {&__pyx_n_s_ob, __pyx_k_ob, sizeof(__pyx_k_ob), 0, 0, 1, 1},
    {&__pyx_kp_u_offset_i_size_i_is_bigger_than_s, __pyx_k_offset_i_size_i_is_bigger_than_s, sizeof(__pyx_k_offset_i_size_i_is_bigger_than_s), 0, 1, 0, 0},
    {&__pyx_n_s_oldest_largest_seq_first, __pyx_k_oldest_largest_seq_first, sizeof(__pyx_k_oldest_largest_seq_first), 0, 0, 1, 1},
    {&__pyx_n_u_oldest_largest_seq_first, __pyx_k_oldest_largest_seq_first, sizeof(__pyx_k_oldest_largest_seq_first), 0, 1, 0, 1},
    {&__pyx_n_s_oldest_smallest_seq_first, __pyx_k_oldest_smallest_seq_first, sizeof(__pyx_k_oldest_smallest_seq_first), 0, 0, 1, 1},
    {&__pyx_n_u_oldest_smallest_seq_first, __pyx_k_oldest_smallest_seq_first, sizeof(__pyx_k_oldest_smallest_seq_first), 0, 1, 0, 1},
    {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
    {&__pyx_n_u_parallel_threads, __pyx_k_parallel_threads, sizeof(__pyx_k_parallel_threads), 0, 1, 0, 1},
    {&__pyx_n_s_parse_read_opts, __pyx_k_parse_read_opts, sizeof(__pyx_k_parse_read_opts), 0, 0, 1, 1},
    {&__pyx_n_s_partial_merge, __pyx_k_partial_merge, sizeof(__pyx_k_partial_merge), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_u_plain, __pyx_k_plain, sizeof(__pyx_k_plain), 0, 1, 0, 1},
    {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
    {&__pyx_n_u_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 1, 0, 1},
    {&__pyx_n_s_prefix_extractor, __pyx_k_prefix_extractor, sizeof(__pyx_k_prefix_extractor), 0, 0, 1, 1},
    {&__pyx_n_s_prop, __pyx_k_prop, sizeof(__pyx_k_prop), 0, 0, 1, 1},
    {&__pyx_n_s_purge_old_backups, __pyx_k_purge_old_backups, sizeof(__pyx_k_purge_old_backups), 0, 0, 1, 1},
    {&__pyx_n_s_put, __pyx_k_put, sizeof(__pyx_k_put), 0, 0, 1, 1},
    {&__pyx_n_s_py_handle, __pyx_k_py_handle, sizeof(__pyx_k_py_handle), 0, 0, 1, 1},
    {&__pyx_n_s_py_options, __pyx_k_py_options, sizeof(__pyx_k_py_options), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_CompactionPri, __pyx_k_pyx_unpickle_CompactionPri, sizeof(__pyx_k_pyx_unpickle_CompactionPri), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_CompressionType, __pyx_k_pyx_unpickle_CompressionType, sizeof(__pyx_k_pyx_unpickle_CompressionType), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_PyCache, __pyx_k_pyx_unpickle_PyCache, sizeof(__pyx_k_pyx_unpickle_PyCache), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_PyComparator, __pyx_k_pyx_unpickle_PyComparator, sizeof(__pyx_k_pyx_unpickle_PyComparator), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_PyFilterPolicy, __pyx_k_pyx_unpickle_PyFilterPolicy, sizeof(__pyx_k_pyx_unpickle_PyFilterPolicy), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_read_only, __pyx_k_read_only, sizeof(__pyx_k_read_only), 0, 0, 1, 1},
    {&__pyx_n_s_read_tier, __pyx_k_read_tier, sizeof(__pyx_k_read_tier), 0, 0, 1, 1},
    {&__pyx_n_u_read_tier, __pyx_k_read_tier, sizeof(__pyx_k_read_tier), 0, 1, 0, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
    {&__pyx_n_s_repair_db, __pyx_k_repair_db, sizeof(__pyx_k_repair_db), 0, 0, 1, 1},
    {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
    {&__pyx_n_s_restore_backup, __pyx_k_restore_backup, sizeof(__pyx_k_restore_backup), 0, 0, 1, 1},
    {&__pyx_n_s_restore_latest_backup, __pyx_k_restore_latest_backup, sizeof(__pyx_k_restore_latest_backup), 0, 0, 1, 1},
    {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
    {&__pyx_n_s_ret_dict, __pyx_k_ret_dict, sizeof(__pyx_k_ret_dict), 0, 0, 1, 1},
    {&__pyx_n_s_ret_list, __pyx_k_ret_list, sizeof(__pyx_k_ret_list), 0, 0, 1, 1},
    {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
    {&__pyx_n_s_rocksdb__rocksdb, __pyx_k_rocksdb__rocksdb, sizeof(__pyx_k_rocksdb__rocksdb), 0, 0, 1, 1},
    {&__pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_k_rocksdb__rocksdb_pyx, sizeof(__pyx_k_rocksdb__rocksdb_pyx), 0, 0, 1, 0},
    {&__pyx_kp_u_row_cache_must_be_a_Cache_object, __pyx_k_row_cache_must_be_a_Cache_object, sizeof(__pyx_k_row_cache_must_be_a_Cache_object), 0, 1, 0, 0},
    {&__pyx_kp_u_s_is_not_of_this_types_s, __pyx_k_s_is_not_of_this_types_s, sizeof(__pyx_k_s_is_not_of_this_types_s), 0, 1, 0, 0},
    {&__pyx_n_s_safe, __pyx_k_safe, sizeof(__pyx_k_safe), 0, 0, 1, 1},
    {&__pyx_n_s_secondary_path, __pyx_k_secondary_path, sizeof(__pyx_k_secondary_path), 0, 0, 1, 1},
    {&__pyx_n_s_seek, __pyx_k_seek, sizeof(__pyx_k_seek), 0, 0, 1, 1},
    {&__pyx_n_s_seek_for_prev, __pyx_k_seek_for_prev, sizeof(__pyx_k_seek_for_prev), 0, 0, 1, 1},
    {&__pyx_n_s_seek_to_first, __pyx_k_seek_to_first, sizeof(__pyx_k_seek_to_first), 0, 0, 1, 1},
    {&__pyx_n_s_seek_to_last, __pyx_k_seek_to_last, sizeof(__pyx_k_seek_to_last), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self_factory_cannot_be_converted, __pyx_k_self_factory_cannot_be_converted, sizeof(__pyx_k_self_factory_cannot_be_converted), 0, 0, 1, 0},
    {&__pyx_kp_s_self_items_cannot_be_converted_t, __pyx_k_self_items_cannot_be_converted_t, sizeof(__pyx_k_self_items_cannot_be_converted_t), 0, 0, 1, 0},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shard_bits, __pyx_k_shard_bits, sizeof(__pyx_k_shard_bits), 0, 0, 1, 1},
    {&__pyx_n_u_similar_size, __pyx_k_similar_size, sizeof(__pyx_k_similar_size), 0, 1, 0, 1},
    {&__pyx_n_u_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 1, 0, 1},
    {&__pyx_n_u_size_ratio, __pyx_k_size_ratio, sizeof(__pyx_k_size_ratio), 0, 1, 0, 1},
    {&__pyx_n_u_skip, __pyx_k_skip, sizeof(__pyx_k_skip), 0, 1, 0, 1},
    {&__pyx_n_s_skiplist_branching_factor, __pyx_k_skiplist_branching_factor, sizeof(__pyx_k_skiplist_branching_factor), 0, 0, 1, 1},
    {&__pyx_n_s_skiplist_height, __pyx_k_skiplist_height, sizeof(__pyx_k_skiplist_height), 0, 0, 1, 1},
    {&__pyx_n_u_smallest_seqno, __pyx_k_smallest_seqno, sizeof(__pyx_k_smallest_seqno), 0, 1, 0, 1},
    {&__pyx_n_u_smallestkey, __pyx_k_smallestkey, sizeof(__pyx_k_smallestkey), 0, 1, 0, 1},
    {&__pyx_n_s_snappy_compression, __pyx_k_snappy_compression, sizeof(__pyx_k_snappy_compression), 0, 0, 1, 1},
    {&__pyx_n_u_snappy_compression, __pyx_k_snappy_compression, sizeof(__pyx_k_snappy_compression), 0, 1, 0, 1},
    {&__pyx_n_s_snapshot, __pyx_k_snapshot, sizeof(__pyx_k_snapshot), 0, 0, 1, 1},
    {&__pyx_n_u_snapshot, __pyx_k_snapshot, sizeof(__pyx_k_snapshot), 0, 1, 0, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
    {&__pyx_kp_u_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 1, 0, 0},
    {&__pyx_n_s_state_2, __pyx_k_state_2, sizeof(__pyx_k_state_2), 0, 0, 1, 1},
    {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
    {&__pyx_n_s_stop_backup, __pyx_k_stop_backup, sizeof(__pyx_k_stop_backup), 0, 0, 1, 1},
    {&__pyx_n_u_stop_style, __pyx_k_stop_style, sizeof(__pyx_k_stop_style), 0, 1, 0, 1},
    {&__pyx_n_u_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 1, 0, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_sync, __pyx_k_sync, sizeof(__pyx_k_sync), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
    {&__pyx_n_u_target_level, __pyx_k_target_level, sizeof(__pyx_k_target_level), 0, 1, 0, 1},
    {&__pyx_n_s_tdb_opts, __pyx_k_tdb_opts, sizeof(__pyx_k_tdb_opts), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_u_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 1, 0, 1},
    {&__pyx_n_s_total_order_seek, __pyx_k_total_order_seek, sizeof(__pyx_k_total_order_seek), 0, 0, 1, 1},
    {&__pyx_n_u_total_order_seek, __pyx_k_total_order_seek, sizeof(__pyx_k_total_order_seek), 0, 1, 0, 1},
    {&__pyx_n_u_total_size, __pyx_k_total_size, sizeof(__pyx_k_total_size), 0, 1, 0, 1},
    {&__pyx_n_s_total_threads, __pyx_k_total_threads, sizeof(__pyx_k_total_threads), 0, 0, 1, 1},
    {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
    {&__pyx_n_s_try_catch_up_with_primary, __pyx_k_try_catch_up_with_primary, sizeof(__pyx_k_try_catch_up_with_primary), 0, 0, 1, 1},
    {&__pyx_n_u_universal, __pyx_k_universal, sizeof(__pyx_k_universal), 0, 1, 0, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_user_key_len, __pyx_k_user_key_len, sizeof(__pyx_k_user_key_len), 0, 0, 1, 1},
    {&__pyx_n_u_valid, __pyx_k_valid, sizeof(__pyx_k_valid), 0, 1, 0, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_value_found, __pyx_k_value_found, sizeof(__pyx_k_value_found), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_n_s_verify_checksums, __pyx_k_verify_checksums, sizeof(__pyx_k_verify_checksums), 0, 0, 1, 1},
    {&__pyx_n_u_verify_checksums, __pyx_k_verify_checksums, sizeof(__pyx_k_verify_checksums), 0, 1, 0, 1},
    {&__pyx_n_s_wal_dir, __pyx_k_wal_dir, sizeof(__pyx_k_wal_dir), 0, 0, 1, 1},
    {&__pyx_n_s_weak_handle, __pyx_k_weak_handle, sizeof(__pyx_k_weak_handle), 0, 0, 1, 1},
    {&__pyx_n_s_weakhandle, __pyx_k_weakhandle, sizeof(__pyx_k_weakhandle), 0, 0, 1, 1},
    {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
    {&__pyx_n_s_whole_key_filtering, __pyx_k_whole_key_filtering, sizeof(__pyx_k_whole_key_filtering), 0, 0, 1, 1},
    {&__pyx_n_u_window_bits, __pyx_k_window_bits, sizeof(__pyx_k_window_bits), 0, 1, 0, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_u_write_committed, __pyx_k_write_committed, sizeof(__pyx_k_write_committed), 0, 1, 0, 1},
    {&__pyx_n_u_write_prepared, __pyx_k_write_prepared, sizeof(__pyx_k_write_prepared), 0, 1, 0, 1},
    {&__pyx_n_u_write_unprepared, __pyx_k_write_unprepared, sizeof(__pyx_k_write_unprepared), 0, 1, 0, 1},
    {&__pyx_n_s_xpress_compression, __pyx_k_xpress_compression, sizeof(__pyx_k_xpress_compression), 0, 0, 1, 1},
    {&__pyx_n_u_xpress_compression, __pyx_k_xpress_compression, sizeof(__pyx_k_xpress_compression), 0, 1, 0, 1},
    {&__pyx_n_u_xxhash, __pyx_k_xxhash, sizeof(__pyx_k_xxhash), 0, 1, 0, 1},
    {&__pyx_n_s_zlib_compression, __pyx_k_zlib_compression, sizeof(__pyx_k_zlib_compression), 0, 0, 1, 1},
    {&__pyx_n_u_zlib_compression, __pyx_k_zlib_compression, sizeof(__pyx_k_zlib_compression), 0, 1, 0, 1},
    {&__pyx_n_s_zstd_compression, __pyx_k_zstd_compression, sizeof(__pyx_k_zstd_compression), 0, 0, 1, 1},
    {&__pyx_n_u_zstd_compression, __pyx_k_zstd_compression, sizeof(__pyx_k_zstd_compression), 0, 1, 0, 1},
    {&__pyx_n_u_zstd_max_train_bytes, __pyx_k_zstd_max_train_bytes, sizeof(__pyx_k_zstd_max_train_bytes), 0, 1, 0, 1},
    {&__pyx_n_s_zstdnotfinal_compression, __pyx_k_zstdnotfinal_compression, sizeof(__pyx_k_zstdnotfinal_compression), 0, 0, 1, 1},
    {&__pyx_n_u_zstdnotfinal_compression, __pyx_k_zstdnotfinal_compression, sizeof(__pyx_k_zstdnotfinal_compression), 0, 1, 0, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 2557, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_builtin_BaseException = __Pyx_GetBuiltinName(__pyx_n_s_BaseException); if (!__pyx_builtin_BaseException) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 862, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 1935, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 2078, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rocksdb/_rocksdb.pyx":808
 * 
 *     def __init__(self, *):
 *         raise TypeError("These can not be constructed from Python")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_These_can_not_be_constructed_fro); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "rocksdb/_rocksdb.pyx":1145
 *             if self.copts.compaction_style == kCompactionStyleNone:
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, str value):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Unknown_compaction_style); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "rocksdb/_rocksdb.pyx":1157
 *                 self.copts.compaction_style = kCompactionStyleNone
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     property compaction_options_universal:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Unknown_compaction_style_2); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "rocksdb/_rocksdb.pyx":1683
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):
 *                 raise Exception("row_cache must be a Cache object")             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_row_cache = value
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_row_cache_must_be_a_Cache_object); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "rocksdb/_rocksdb.pyx":2330
 *                     return (True, string_to_bytes(value))
 *                 else:
 *                     return (True, None)             # <<<<<<<<<<<<<<
 *             else:
 *                 return (False, None)
 */
  __pyx_tuple__7 = PyTuple_Pack(2, Py_True, Py_None); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "rocksdb/_rocksdb.pyx":2332
 *                     return (True, None)
 *             else:
 *                 return (False, None)             # <<<<<<<<<<<<<<
 *         else:
 *             with nogil:
 */
  __pyx_tuple__8 = PyTuple_Pack(2, Py_False, Py_None); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 2332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "rocksdb/_rocksdb.pyx":2530
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 *             raise ValueError("bottommost_level_compaction is not valid")             # <<<<<<<<<<<<<<
 * 
 *         cdef Status st
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_bottommost_level_compaction_is_n); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "rocksdb/_rocksdb.pyx":2585
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 *             raise ValueError("Invalid read_tier")             # <<<<<<<<<<<<<<
 * 
 *         def make_bytes(iterate_bound):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Invalid_read_tier); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 2585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "rocksdb/_rocksdb.pyx":2587
 *             raise ValueError("Invalid read_tier")
 * 
 *         def make_bytes(iterate_bound):             # <<<<<<<<<<<<<<
 *             if isinstance(iterate_bound, bytes):
 *                 return iterate_bound
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_iterate_bound); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_make_bytes, 2587, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 2587, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2619
 * 
 *         if copts.in_use:
 *             raise Exception("ColumnFamilyOptions are in_use by another column family")             # <<<<<<<<<<<<<<
 * 
 *         copts.in_use = True
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_ColumnFamilyOptions_are_in_use_b); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 2619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_tuple__14 = PyTuple_Pack(3, __pyx_int_238750788, __pyx_int_228825662, __pyx_int_222419149); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__17 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state_2, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyComparator__set_state(self, __pyx_state)
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":186
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 */
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_name, 186, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 186, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":189
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 */
  __pyx_tuple__25 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_compare, 189, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 189, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyFilterPolicy__set_state(self, __pyx_state)
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":299
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_name, 299, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 299, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":302
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 *     def create_filter(self, keys):             # <<<<<<<<<<<<<<
 *         cdef string dst
 *         cdef vector[Slice] c_keys
 */
  __pyx_tuple__34 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_keys, __pyx_n_s_dst, __pyx_n_s_c_keys, __pyx_n_s_key); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_create_filter, 302, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 302, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":316
 *         return string_to_bytes(dst)
 * 
 *     def key_may_match(self, key, filter_):             # <<<<<<<<<<<<<<
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_filter); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_key_may_match, 316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 316, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyCache__set_state(self, __pyx_state)
 */
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompressionType__set_state(self, __pyx_state)
 */
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompactionPri__set_state(self, __pyx_state)
 */
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1322
 *             setattr(self, key, value)
 * 
 *     def IncreaseParallelism(self, int total_threads=16):             # <<<<<<<<<<<<<<
 *         self.opts.IncreaseParallelism(total_threads)
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_total_threads); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_IncreaseParallelism, 1322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_int_16); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1876
 *             del self.batch
 * 
 *     def put(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */
  __pyx_tuple__81 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_cf_handle, __pyx_n_s_column_family); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_put, 1876, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 1876, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1884
 *         self.batch.Put(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def merge(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_merge, 1884, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 1884, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1892
 *         self.batch.Merge(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def delete(self, key):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */
  __pyx_tuple__84 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_cf_handle, __pyx_n_s_column_family); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_delete, 1892, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1892, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1900
 *         self.batch.Delete(cf_handle, bytes_to_slice(key))
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.batch.Clear()
 * 
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_clear, 1900, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1900, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1903
 *         self.batch.Clear()
 * 
 *     def data(self):             # <<<<<<<<<<<<<<
 *         return string_to_bytes(self.batch.Data())
 * 
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_data, 1903, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 1903, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1906
 *         return string_to_bytes(self.batch.Data())
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self.batch.Count()
 * 
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_count, 1906, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1906, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2097
 *         self.opts.in_use = True
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */
  __pyx_tuple__93 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_safe, __pyx_n_s_copts, __pyx_n_s_c_safe, __pyx_n_s_st, __pyx_n_s_cfhandle); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_close, 2097, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __pyx_tuple__95 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "rocksdb/_rocksdb.pyx":2130
 *         return [handle.weakref for handle in self.cf_handles]
 * 
 *     def get_column_family(self, bytes name):             # <<<<<<<<<<<<<<
 *         for handle in self.cf_handles:
 *             if handle.name == name:
 */
  __pyx_tuple__96 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_handle); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get_column_family, 2130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 2130, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2135
 *                 return handle.weakref
 * 
 *     def put(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_tuple__98 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_sync, __pyx_n_s_disable_wal, __pyx_n_s_ignore_missing_column_families, __pyx_n_s_no_slowdown, __pyx_n_s_low_pri, __pyx_n_s_st, __pyx_n_s_opts, __pyx_n_s_column_family, __pyx_n_s_c_key, __pyx_n_s_c_value, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_put, 2135, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __pyx_tuple__100 = PyTuple_Pack(5, Py_False, Py_False, Py_False, Py_False, Py_False); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "rocksdb/_rocksdb.pyx":2159
 *         check_status(st)
 * 
 *     def delete(self, key, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_tuple__101 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_sync, __pyx_n_s_disable_wal, __pyx_n_s_ignore_missing_column_families, __pyx_n_s_no_slowdown, __pyx_n_s_low_pri, __pyx_n_s_st, __pyx_n_s_opts, __pyx_n_s_column_family, __pyx_n_s_c_key, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_delete, 2159, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 2159, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2182
 *         check_status(st)
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_merge, 2182, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 2182, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2206
 *         check_status(st)
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_tuple__104 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_batch, __pyx_n_s_sync, __pyx_n_s_disable_wal, __pyx_n_s_ignore_missing_column_families, __pyx_n_s_no_slowdown, __pyx_n_s_low_pri, __pyx_n_s_st, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_write, 2206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 2206, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2219
 *         check_status(st)
 * 
 *     def get(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string res
 *         cdef Status st
 */
  __pyx_tuple__106 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_res, __pyx_n_s_st, __pyx_n_s_opts, __pyx_n_s_column_family, __pyx_n_s_c_key, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get, 2219, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 2219, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2246
 *             check_status(st)
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if as_dict:
 *             # Remove duplicate keys
 */
  __pyx_tuple__108 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_keys, __pyx_n_s_as_dict, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_values, __pyx_n_s_cf_handle, __pyx_n_s_cf_handles, __pyx_n_s_c_keys, __pyx_n_s_key, __pyx_n_s_py_handle, __pyx_n_s_opts, __pyx_n_s_res, __pyx_n_s_ret_dict, __pyx_n_s_ret_list, __pyx_n_s_index); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_multi_get, 2246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 2246, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2300
 *             return ret_list
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef cpp_bool value_found
 */
  __pyx_tuple__110 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_fetch, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_value, __pyx_n_s_value_found, __pyx_n_s_exists, __pyx_n_s_opts, __pyx_n_s_c_key, __pyx_n_s_cf_handle, __pyx_n_s_column_family); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_key_may_exist, 2300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __pyx_tuple__112 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "rocksdb/_rocksdb.pyx":2343
 *             return (exists, None)
 * 
 *     def iterkeys(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 */
  __pyx_tuple__113 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_column_family, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_opts, __pyx_n_s_it, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_iterkeys, 2343, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __pyx_tuple__115 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "rocksdb/_rocksdb.pyx":2357
 *         return it
 * 
 *     def itervalues(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_itervalues, 2357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 2357, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2372
 *         return it
 * 
 *     def iteritems(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_iteritems, 2372, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 2372, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2386
 *         return it
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */
  __pyx_tuple__118 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_column_families, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_iters, __pyx_n_s_opts, __pyx_n_s_it_ptr, __pyx_n_s_it, __pyx_n_s_cf_handle, __pyx_n_s_cf_handles, __pyx_n_s_column_family, __pyx_n_s_cf_iter, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_iterskeys, 2386, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 2386, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2411
 *         return ret
 * 
 *     def itersvalues(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */
  __pyx_tuple__120 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_column_families, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_iters, __pyx_n_s_opts, __pyx_n_s_it_ptr, __pyx_n_s_it, __pyx_n_s_cf_handle, __pyx_n_s_cf_handles, __pyx_n_s_column_family, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 2411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_itersvalues, 2411, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 2411, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2435
 *         return ret
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_iterskeys, 2435, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 2435, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2461
 *         return ret
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(self)
 * 
 */
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_snapshot, 2461, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 2461, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2464
 *         return Snapshot(self)
 * 
 *     def get_property(self, prop, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 */
  __pyx_tuple__124 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_prop, __pyx_n_s_column_family, __pyx_n_s_value, __pyx_n_s_c_prop, __pyx_n_s_ret, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get_property, 2464, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 2464, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2480
 *             return None
 * 
 *     def get_live_files_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 */
  __pyx_tuple__126 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_metadata, __pyx_n_s_ret, __pyx_n_s_ob, __pyx_n_s_t); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 2480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get_live_files_metadata, 2480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 2480, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2501
 *         return ret
 * 
 *     def get_column_family_meta_data(self, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyMetaData metadata
 * 
 */
  __pyx_tuple__128 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_column_family, __pyx_n_s_metadata, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get_column_family_meta_data, 2501, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 2501, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2516
 *         }
 * 
 *     def compact_range(self, begin=None, end=None, ColumnFamilyHandle column_family=None, **py_options):             # <<<<<<<<<<<<<<
 *         cdef options.CompactRangeOptions c_options
 * 
 */
  __pyx_tuple__130 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_begin, __pyx_n_s_end, __pyx_n_s_column_family, __pyx_n_s_py_options, __pyx_n_s_c_options, __pyx_n_s_blc, __pyx_n_s_st, __pyx_n_s_begin_val, __pyx_n_s_end_val, __pyx_n_s_begin_ptr, __pyx_n_s_end_ptr, __pyx_n_s_cf_handle); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_compact_range, 2516, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __pyx_tuple__132 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "rocksdb/_rocksdb.pyx":2557
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *             verify_checksums=False,
 */
  __pyx_tuple__133 = PyTuple_Pack(7, __pyx_n_s_verify_checksums, __pyx_n_s_fill_cache, __pyx_n_s_snapshot, __pyx_n_s_read_tier, __pyx_n_s_total_order_seek, __pyx_n_s_iterate_lower_bound, __pyx_n_s_iterate_upper_bound); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_parse_read_opts, 2557, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __pyx_tuple__135 = PyTuple_Pack(7, Py_False, Py_True, Py_None, __pyx_n_u_all, Py_False, Py_None, Py_None); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "rocksdb/_rocksdb.pyx":2609
 *             return self.opts
 * 
 *     def create_column_family(self, bytes name, ColumnFamilyOptions copts):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef Status st
 */
  __pyx_tuple__136 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_copts, __pyx_n_s_cf_handle, __pyx_n_s_st, __pyx_n_s_c_name, __pyx_n_s_handle); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_create_column_family, 2609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 2609, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2632
 *         return handle.weakref
 * 
 *     def drop_column_family(self, ColumnFamilyHandle weak_handle not None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef ColumnFamilyOptions copts
 */
  __pyx_tuple__138 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_weak_handle, __pyx_n_s_cf_handle, __pyx_n_s_copts, __pyx_n_s_st, __pyx_n_s_py_handle, __pyx_n_s_index); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_drop_column_family, 2632, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 2632, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2651
 *             copts.in_use = False
 * 
 *     def try_catch_up_with_primary(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.TryCatchUpWithPrimary()
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_try_catch_up_with_primary, 2651, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(0, 2651, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2656
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */
  __pyx_tuple__143 = PyTuple_Pack(4, __pyx_n_s_db_name, __pyx_n_s_opts, __pyx_n_s_st, __pyx_n_s_db_path); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_repair_db, 2656, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 2656, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2665
 * 
 * 
 * def list_column_families(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */
  __pyx_tuple__145 = PyTuple_Pack(5, __pyx_n_s_db_name, __pyx_n_s_opts, __pyx_n_s_st, __pyx_n_s_db_path, __pyx_n_s_column_families); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_list_column_families, 2665, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 2665, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2707
 *             return self.tdb_opts
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_close, 2707, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 2707, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2779
 *         return ret
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef object ret = self.get_ob()
 *         return ret
 */
  __pyx_tuple__152 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 2779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get, 2779, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(0, 2779, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2783
 *         return ret
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return ReversedIterator(self)
 * 
 */
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_reversed, 2783, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 2783, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2786
 *         return ReversedIterator(self)
 * 
 *     cpdef seek_to_first(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToFirst()
 */
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek_to_first, 2786, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 2786, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2791
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_to_last(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToLast()
 */
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek_to_last, 2791, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 2791, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2796
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */
  __pyx_tuple__157 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_key); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 2796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek, 2796, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 2796, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2802
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek_for_prev, 2802, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 2802, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2851
 *         self.it = it
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_first()
 * 
 */
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek_to_first, 2851, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 2851, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2854
 *         self.it.seek_to_first()
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_last()
 * 
 */
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek_to_last, 2854, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 2854, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2857
 *         self.it.seek_to_last()
 * 
 *     def seek(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek(key)
 * 
 */
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek, 2857, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 2857, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2860
 *         self.it.seek(key)
 * 
 *     def seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek_for_prev(key)
 * 
 */
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_seek_for_prev, 2860, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) __PYX_ERR(0, 2860, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2863
 *         self.it.seek_for_prev(key)
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         return self.it.get()
 * 
 */
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get, 2863, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 2863, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2869
 *         return self
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return self.it
 * 
 */
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_reversed, 2869, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) __PYX_ERR(0, 2869, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2900
 *                 del self.checkpoint
 * 
 *     def create_checkpoint(self, checkpoint_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_checkpoint_dir
 */
  __pyx_tuple__176 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_checkpoint_dir, __pyx_n_s_st, __pyx_n_s_c_checkpoint_dir); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_create_checkpoint, 2900, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) __PYX_ERR(0, 2900, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2931
 *                 del self.engine
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef cpp_bool c_flush_before_backup
 */
  __pyx_tuple__180 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_db, __pyx_n_s_flush_before_backup, __pyx_n_s_st, __pyx_n_s_c_flush_before_backup); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_create_backup, 2931, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(0, 2931, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2941
 *         check_status(st)
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */
  __pyx_tuple__182 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_backup_id, __pyx_n_s_db_dir, __pyx_n_s_wal_dir, __pyx_n_s_st, __pyx_n_s_c_backup_id, __pyx_n_s_c_db_dir, __pyx_n_s_c_wal_dir); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 2941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_restore_backup, 2941, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(0, 2941, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2959
 *         check_status(st)
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_db_dir
 */
  __pyx_tuple__184 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_db_dir, __pyx_n_s_wal_dir, __pyx_n_s_st, __pyx_n_s_c_db_dir, __pyx_n_s_c_wal_dir); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 2959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_restore_latest_backup, 2959, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(0, 2959, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2972
 *         check_status(st)
 * 
 *     def stop_backup(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.engine.StopBackup()
 */
  __pyx_codeobj__186 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_stop_backup, 2972, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__186)) __PYX_ERR(0, 2972, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2976
 *             self.engine.StopBackup()
 * 
 *     def purge_old_backups(self, num_backups_to_keep):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef uint32_t c_num_backups_to_keep
 */
  __pyx_tuple__187 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_num_backups_to_keep, __pyx_n_s_st, __pyx_n_s_c_num_backups_to_keep); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(0, 2976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  __pyx_codeobj__188 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__187, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_purge_old_backups, 2976, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__188)) __PYX_ERR(0, 2976, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2986
 *         check_status(st)
 * 
 *     def delete_backup(self, backup_id):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */
  __pyx_tuple__189 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_backup_id, __pyx_n_s_st, __pyx_n_s_c_backup_id); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 2986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_delete_backup, 2986, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(0, 2986, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":2997
 *         check_status(st)
 * 
 *     def get_backup_info(self):             # <<<<<<<<<<<<<<
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 */
  __pyx_tuple__191 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_backup_info, __pyx_n_s_ret, __pyx_n_s_ob, __pyx_n_s_t); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 2997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rocksdb__rocksdb_pyx, __pyx_n_s_get_backup_info, 2997, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 2997, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_PyComparator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__195 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PyComparator, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PyFilterPolicy, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__198 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PyCache, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__198)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CompressionType, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__200 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CompactionPri, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__200)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_75 = PyFloat_FromDouble(0.75); if (unlikely(!__pyx_float_0_75)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50000 = PyInt_FromLong(50000L); if (unlikely(!__pyx_int_50000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000000 = PyInt_FromLong(1000000L); if (unlikely(!__pyx_int_1000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator = &__pyx_vtable_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyComparator.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyComparator.get_comparator = (rocksdb::Comparator const *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_comparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyComparator.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_12PyComparator_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PyComparator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyComparator_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyComparator)) __PYX_ERR(0, 140, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyComparator_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyComparator = &__pyx_type_7rocksdb_8_rocksdb_PyComparator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator, __pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator = &__pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base.get_comparator = (rocksdb::Comparator const *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_comparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyComparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator)) __PYX_ERR(0, 151, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator = &__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyComparator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator, __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator = &__pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator.__pyx_base.get_comparator = (rocksdb::Comparator const *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_comparator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyComparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator)) __PYX_ERR(0, 180, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator = &__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyComparator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator, __pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy = &__pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy.get_policy = (std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_policy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)) __PYX_ERR(0, 223, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy = &__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy, __pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy = &__pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base.get_policy = (std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_policy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy)) __PYX_ERR(0, 234, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy = &__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy, __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy = &__pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy.__pyx_base.get_policy = (std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_policy;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy)) __PYX_ERR(0, 293, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy = &__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy, __pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator = &__pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *))__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator.get_operator = (std::shared_ptr<rocksdb::MergeOperator>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *))__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_operator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator)) __PYX_ERR(0, 334, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator = &__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator, __pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyCache = &__pyx_vtable_7rocksdb_8_rocksdb_PyCache;
  __pyx_vtable_7rocksdb_8_rocksdb_PyCache.get_cache = (std::shared_ptr<rocksdb::Cache>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *))__pyx_f_7rocksdb_8_rocksdb_7PyCache_get_cache;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PyCache = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyCache_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyCache)) __PYX_ERR(0, 471, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyCache_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyCache = &__pyx_type_7rocksdb_8_rocksdb_PyCache;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyCache->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyCache->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyCache->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyCache->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyCache, __pyx_vtabptr_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache = &__pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache;
  __pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyCache;
  __pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache.__pyx_base.get_cache = (std::shared_ptr<rocksdb::Cache>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *))__pyx_f_7rocksdb_8_rocksdb_10PyLRUCache_get_cache;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyCache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyLRUCache_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache)) __PYX_ERR(0, 476, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyLRUCache_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache = &__pyx_type_7rocksdb_8_rocksdb_PyLRUCache;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyCache;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache, __pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform = &__pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform;
  __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *))__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform.get_transformer = (std::shared_ptr<rocksdb::SliceTransform>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *))__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_transformer;
  __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PySliceTransform_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform)) __PYX_ERR(0, 493, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PySliceTransform_spec, __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform = &__pyx_type_7rocksdb_8_rocksdb_PySliceTransform;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform, __pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory.get_table_factory = (std::shared_ptr<rocksdb::TableFactory>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *))__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_get_table_factory;
  __pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyTableFactory_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory)) __PYX_ERR(0, 575, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyTableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory = &__pyx_type_7rocksdb_8_rocksdb_PyTableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory.__pyx_base.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_22BlockBasedTableFactory_set_info_log;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory)) __PYX_ERR(0, 584, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory = &__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BlockBasedTableFactory, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_PlainTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_PlainTableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory)) __PYX_ERR(0, 678, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory = &__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PlainTableFactory, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_PyMemtableFactory.get_memtable_factory = (std::shared_ptr<rocksdb::MemTableRepFactory>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *))__pyx_f_7rocksdb_8_rocksdb_17PyMemtableFactory_get_memtable_factory;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory)) __PYX_ERR(0, 711, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_SkipListMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory)) __PYX_ERR(0, 717, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SkipListMemtableFactory, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_VectorMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_VectorMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory)) __PYX_ERR(0, 721, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VectorMemtableFactory, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_HashSkipListMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory)) __PYX_ERR(0, 725, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HashSkipListMemtableFactory, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_HashLinkListMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory)) __PYX_ERR(0, 738, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory_spec, __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory, __pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HashLinkListMemtableFactory, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_CompressionType = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_CompressionType_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_CompressionType)) __PYX_ERR(0, 744, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_CompressionType_spec, __pyx_ptype_7rocksdb_8_rocksdb_CompressionType) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_CompressionType = &__pyx_type_7rocksdb_8_rocksdb_CompressionType;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompressionType, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_CompressionType) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_CompressionType) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_CompactionPri_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri)) __PYX_ERR(0, 756, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_CompactionPri_spec, __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri = &__pyx_type_7rocksdb_8_rocksdb_CompactionPri;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CompactionPri, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb__ColumnFamilyHandle = &__pyx_vtable_7rocksdb_8_rocksdb__ColumnFamilyHandle;
  __pyx_vtable_7rocksdb_8_rocksdb__ColumnFamilyHandle.from_handle_ptr = (PyObject *(*)(rocksdb::ColumnFamilyHandle *))__pyx_f_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_from_handle_ptr;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle)) __PYX_ERR(0, 763, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle_spec, __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle = &__pyx_type_7rocksdb_8_rocksdb__ColumnFamilyHandle;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle, __pyx_vtabptr_7rocksdb_8_rocksdb__ColumnFamilyHandle) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #endif
  if (__pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle->tp_weaklistoffset == 0) __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle->tp_weaklistoffset = offsetof(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle, __weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb__ColumnFamilyHandle) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_ColumnFamilyHandle = &__pyx_vtable_7rocksdb_8_rocksdb_ColumnFamilyHandle;
  __pyx_vtable_7rocksdb_8_rocksdb_ColumnFamilyHandle.from_wrapper = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb__ColumnFamilyHandle *))__pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_from_wrapper;
  __pyx_vtable_7rocksdb_8_rocksdb_ColumnFamilyHandle.get_handle = (rocksdb::ColumnFamilyHandle *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_ColumnFamilyHandle *))__pyx_f_7rocksdb_8_rocksdb_18ColumnFamilyHandle_get_handle;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle)) __PYX_ERR(0, 796, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle_spec, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle = &__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyHandle;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle, __pyx_vtabptr_7rocksdb_8_rocksdb_ColumnFamilyHandle) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ColumnFamilyHandle, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyHandle) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions)) __PYX_ERR(0, 865, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions_spec, __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions = &__pyx_type_7rocksdb_8_rocksdb_ColumnFamilyOptions;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ColumnFamilyOptions, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_Options = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_Options_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_Options)) __PYX_ERR(0, 1299, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_Options_spec, __pyx_ptype_7rocksdb_8_rocksdb_Options) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_Options = &__pyx_type_7rocksdb_8_rocksdb_Options;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_Options->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_ColumnFamilyOptions;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_Options) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_Options->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_Options->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_Options->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_Options->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Options, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_Options) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_Options) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions)) __PYX_ERR(0, 1766, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions_spec, __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions) < 0) __PYX_ERR(0, 1766, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions = &__pyx_type_7rocksdb_8_rocksdb_TransactionDBOptions;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions) < 0) __PYX_ERR(0, 1766, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TransactionDBOptions, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions) < 0) __PYX_ERR(0, 1766, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_TransactionDBOptions) < 0) __PYX_ERR(0, 1766, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_Snapshot = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_Snapshot_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_Snapshot)) __PYX_ERR(0, 2736, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_Snapshot_spec, __pyx_ptype_7rocksdb_8_rocksdb_Snapshot) < 0) __PYX_ERR(0, 2736, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_Snapshot = &__pyx_type_7rocksdb_8_rocksdb_Snapshot;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_Snapshot) < 0) __PYX_ERR(0, 2736, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_Snapshot->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_Snapshot->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_Snapshot->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_Snapshot->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_Snapshot) < 0) __PYX_ERR(0, 2736, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_ReversedIterator_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator)) __PYX_ERR(0, 2845, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_ReversedIterator_spec, __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator) < 0) __PYX_ERR(0, 2845, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator = &__pyx_type_7rocksdb_8_rocksdb_ReversedIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator) < 0) __PYX_ERR(0, 2845, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator) < 0) __PYX_ERR(0, 2845, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator)) __PYX_ERR(0, 1914, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator_spec, __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator) < 0) __PYX_ERR(0, 1914, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator = &__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator) < 0) __PYX_ERR(0, 1914, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator) < 0) __PYX_ERR(0, 1914, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_WriteBatch_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch)) __PYX_ERR(0, 1862, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_WriteBatch_spec, __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch) < 0) __PYX_ERR(0, 1862, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch = &__pyx_type_7rocksdb_8_rocksdb_WriteBatch;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch) < 0) __PYX_ERR(0, 1862, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_WriteBatch, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch) < 0) __PYX_ERR(0, 1862, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch) < 0) __PYX_ERR(0, 1862, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_DB = &__pyx_vtable_7rocksdb_8_rocksdb_DB;
  __pyx_vtable_7rocksdb_8_rocksdb_DB.post_init_steps = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, rocksdb::Status, struct __pyx_obj_7rocksdb_8_rocksdb_Options *))__pyx_f_7rocksdb_8_rocksdb_2DB_post_init_steps;
  __pyx_vtable_7rocksdb_8_rocksdb_DB.setup_handles = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *))__pyx_f_7rocksdb_8_rocksdb_2DB_setup_handles;
  __pyx_vtable_7rocksdb_8_rocksdb_DB.inject_loggers = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, struct __pyx_obj_7rocksdb_8_rocksdb_Options *))__pyx_f_7rocksdb_8_rocksdb_2DB_inject_loggers;
  __pyx_vtable_7rocksdb_8_rocksdb_DB.build_read_opts = (rocksdb::ReadOptions (*)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, PyObject *))__pyx_f_7rocksdb_8_rocksdb_2DB_build_read_opts;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_DB = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_DB_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_DB)) __PYX_ERR(0, 1965, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_DB_spec, __pyx_ptype_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_DB = &__pyx_type_7rocksdb_8_rocksdb_DB;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_DB->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_DB->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_DB->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_DB->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_vtabptr_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DB, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_TransactionDB = &__pyx_vtable_7rocksdb_8_rocksdb_TransactionDB;
  __pyx_vtable_7rocksdb_8_rocksdb_TransactionDB.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_DB;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_TransactionDB_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB)) __PYX_ERR(0, 2678, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_TransactionDB_spec, __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB = &__pyx_type_7rocksdb_8_rocksdb_TransactionDB;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_DB;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB, __pyx_vtabptr_7rocksdb_8_rocksdb_TransactionDB) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TransactionDB, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_TransactionDB) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator = &__pyx_vtable_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek_to_first = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek_to_last = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek_for_prev = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_get_ob;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_BaseIterator_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator)) __PYX_ERR(0, 2752, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_BaseIterator_spec, __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 2752, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator = &__pyx_type_7rocksdb_8_rocksdb_BaseIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 2752, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 2752, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 2752, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 2752, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator = &__pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_13ItemsIterator_get_ob;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_ItemsIterator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator)) __PYX_ERR(0, 2832, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_ItemsIterator_spec, __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 2832, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator = &__pyx_type_7rocksdb_8_rocksdb_ItemsIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 2832, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator, __pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 2832, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 2832, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 2832, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator = &__pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_14ValuesIterator_get_ob;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_ValuesIterator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator)) __PYX_ERR(0, 2823, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_ValuesIterator_spec, __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 2823, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator = &__pyx_type_7rocksdb_8_rocksdb_ValuesIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 2823, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator, __pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 2823, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 2823, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 2823, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator = &__pyx_vtable_7rocksdb_8_rocksdb_KeysIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_KeysIterator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_KeysIterator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_12KeysIterator_get_ob;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_KeysIterator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator)) __PYX_ERR(0, 2812, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_KeysIterator_spec, __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 2812, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator = &__pyx_type_7rocksdb_8_rocksdb_KeysIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator->tp_base = __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 2812, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator, __pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 2812, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 2812, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 2812, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_Checkpoint_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint)) __PYX_ERR(0, 2883, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_Checkpoint_spec, __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint) < 0) __PYX_ERR(0, 2883, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint = &__pyx_type_7rocksdb_8_rocksdb_Checkpoint;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint) < 0) __PYX_ERR(0, 2883, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Checkpoint, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint) < 0) __PYX_ERR(0, 2883, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_Checkpoint) < 0) __PYX_ERR(0, 2883, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7rocksdb_8_rocksdb_BackupEngine_spec, NULL); if (unlikely(!__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine)) __PYX_ERR(0, 2910, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7rocksdb_8_rocksdb_BackupEngine_spec, __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine) < 0) __PYX_ERR(0, 2910, __pyx_L1_error)
  #else
  __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine = &__pyx_type_7rocksdb_8_rocksdb_BackupEngine;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine) < 0) __PYX_ERR(0, 2910, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine->tp_dictoffset && __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BackupEngine, (PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine) < 0) __PYX_ERR(0, 2910, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine) < 0) __PYX_ERR(0, 2910, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_2(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_2(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_2(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_2(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_2); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_2(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_2(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_2); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(4, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_2(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_2(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_2); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(5, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__rocksdb(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__rocksdb},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "_rocksdb",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_rocksdb(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_rocksdb(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__rocksdb(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__rocksdb(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__rocksdb(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_rocksdb' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_rocksdb", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to _rocksdb pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__rocksdb(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_rocksdb___rocksdb) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "rocksdb._rocksdb")) {
      if (unlikely((PyDict_SetItemString(modules, "rocksdb._rocksdb", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "rocksdb/_rocksdb.pyx":48
 * from .status cimport Status
 * 
 * import sys             # <<<<<<<<<<<<<<
 * from .interfaces import MergeOperator as IMergeOperator
 * from .interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":49
 * 
 * import sys
 * from .interfaces import MergeOperator as IMergeOperator             # <<<<<<<<<<<<<<
 * from .interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 * from .interfaces import FilterPolicy as IFilterPolicy
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MergeOperator);
  __Pyx_GIVEREF(__pyx_n_s_MergeOperator);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MergeOperator)) __PYX_ERR(0, 49, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_MergeOperator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMergeOperator, __pyx_t_2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":50
 * import sys
 * from .interfaces import MergeOperator as IMergeOperator
 * from .interfaces import AssociativeMergeOperator as IAssociativeMergeOperator             # <<<<<<<<<<<<<<
 * from .interfaces import FilterPolicy as IFilterPolicy
 * from .interfaces import Comparator as IComparator
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_AssociativeMergeOperator);
  __Pyx_GIVEREF(__pyx_n_s_AssociativeMergeOperator);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_AssociativeMergeOperator)) __PYX_ERR(0, 50, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AssociativeMergeOperator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IAssociativeMergeOperator, __pyx_t_3) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":51
 * from .interfaces import MergeOperator as IMergeOperator
 * from .interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 * from .interfaces import FilterPolicy as IFilterPolicy             # <<<<<<<<<<<<<<
 * from .interfaces import Comparator as IComparator
 * from .interfaces import SliceTransform as ISliceTransform
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FilterPolicy);
  __Pyx_GIVEREF(__pyx_n_s_FilterPolicy);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FilterPolicy)) __PYX_ERR(0, 51, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FilterPolicy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IFilterPolicy, __pyx_t_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":52
 * from .interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 * from .interfaces import FilterPolicy as IFilterPolicy
 * from .interfaces import Comparator as IComparator             # <<<<<<<<<<<<<<
 * from .interfaces import SliceTransform as ISliceTransform
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Comparator);
  __Pyx_GIVEREF(__pyx_n_s_Comparator);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Comparator)) __PYX_ERR(0, 52, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Comparator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IComparator, __pyx_t_3) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":53
 * from .interfaces import FilterPolicy as IFilterPolicy
 * from .interfaces import Comparator as IComparator
 * from .interfaces import SliceTransform as ISliceTransform             # <<<<<<<<<<<<<<
 * 
 * import traceback
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_SliceTransform);
  __Pyx_GIVEREF(__pyx_n_s_SliceTransform);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_SliceTransform)) __PYX_ERR(0, 53, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SliceTransform); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ISliceTransform, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":55
 * from .interfaces import SliceTransform as ISliceTransform
 * 
 * import traceback             # <<<<<<<<<<<<<<
 * from .errors import Error
 * from .errors import NotFound
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_traceback, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_3) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":56
 * 
 * import traceback
 * from .errors import Error             # <<<<<<<<<<<<<<
 * from .errors import NotFound
 * from .errors import Corruption
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Error);
  __Pyx_GIVEREF(__pyx_n_s_Error);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Error)) __PYX_ERR(0, 56, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Error, __pyx_t_3) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":57
 * import traceback
 * from .errors import Error
 * from .errors import NotFound             # <<<<<<<<<<<<<<
 * from .errors import Corruption
 * from .errors import NotSupported
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NotFound);
  __Pyx_GIVEREF(__pyx_n_s_NotFound);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NotFound)) __PYX_ERR(0, 57, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NotFound); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NotFound, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":58
 * from .errors import Error
 * from .errors import NotFound
 * from .errors import Corruption             # <<<<<<<<<<<<<<
 * from .errors import NotSupported
 * from .errors import InvalidArgument
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Corruption);
  __Pyx_GIVEREF(__pyx_n_s_Corruption);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Corruption)) __PYX_ERR(0, 58, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Corruption); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Corruption, __pyx_t_3) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":59
 * from .errors import NotFound
 * from .errors import Corruption
 * from .errors import NotSupported             # <<<<<<<<<<<<<<
 * from .errors import InvalidArgument
 * from .errors import RocksIOError
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NotSupported);
  __Pyx_GIVEREF(__pyx_n_s_NotSupported);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NotSupported)) __PYX_ERR(0, 59, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NotSupported); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NotSupported, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":60
 * from .errors import Corruption
 * from .errors import NotSupported
 * from .errors import InvalidArgument             # <<<<<<<<<<<<<<
 * from .errors import RocksIOError
 * from .errors import MergeInProgress
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_InvalidArgument);
  __Pyx_GIVEREF(__pyx_n_s_InvalidArgument);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_InvalidArgument)) __PYX_ERR(0, 60, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InvalidArgument, __pyx_t_3) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":61
 * from .errors import NotSupported
 * from .errors import InvalidArgument
 * from .errors import RocksIOError             # <<<<<<<<<<<<<<
 * from .errors import MergeInProgress
 * from .errors import Incomplete
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_RocksIOError);
  __Pyx_GIVEREF(__pyx_n_s_RocksIOError);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_RocksIOError)) __PYX_ERR(0, 61, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_RocksIOError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RocksIOError, __pyx_t_2) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":62
 * from .errors import InvalidArgument
 * from .errors import RocksIOError
 * from .errors import MergeInProgress             # <<<<<<<<<<<<<<
 * from .errors import Incomplete
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_MergeInProgress);
  __Pyx_GIVEREF(__pyx_n_s_MergeInProgress);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_MergeInProgress)) __PYX_ERR(0, 62, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MergeInProgress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MergeInProgress, __pyx_t_3) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":63
 * from .errors import RocksIOError
 * from .errors import MergeInProgress
 * from .errors import Incomplete             # <<<<<<<<<<<<<<
 * 
 * import weakref
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Incomplete);
  __Pyx_GIVEREF(__pyx_n_s_Incomplete);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Incomplete)) __PYX_ERR(0, 63, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_errors, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Incomplete); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Incomplete, __pyx_t_2) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":65
 * from .errors import Incomplete
 * 
 * import weakref             # <<<<<<<<<<<<<<
 * 
 * ctypedef const filter_policy.FilterPolicy ConstFilterPolicy
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_weakref, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref, __pyx_t_3) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":77
 * cdef extern from "Python.h":
 *     void PyEval_InitThreads()
 * PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * 
 * ## Here comes the stuff to wrap the status to exception
 */
  PyEval_InitThreads();

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12PyComparator_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyComparator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyComparator, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyComparator, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyComparator__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12PyComparator_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyComparator___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyComparator, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyGenericComparator_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGenericComparator___reduce_cyt, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyGenericComparator_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGenericComparator___setstate_c, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":186
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBytewiseComparator_name, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator, __pyx_n_s_name, __pyx_t_3) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator);

  /* "rocksdb/_rocksdb.pyx":189
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBytewiseComparator_compare, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator, __pyx_n_s_compare, __pyx_t_3) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBytewiseComparator___reduce_cy, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_20PyBytewiseComparator_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBytewiseComparator___setstate, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":216
 *         error_msg.assign(<bytes>str(error))
 * 
 * BytewiseComparator = PyBytewiseComparator             # <<<<<<<<<<<<<<
 * #########################################
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BytewiseComparator, ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator)) < 0) __PYX_ERR(0, 216, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_14PyFilterPolicy_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyFilterPolicy___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyFilterPolicy, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyFilterPolicy__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_14PyFilterPolicy_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyFilterPolicy___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGenericFilterPolicy___reduce_c, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyGenericFilterPolicy___setstate, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":299
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBloomFilterPolicy_name, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy, __pyx_n_s_name, __pyx_t_3) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy);

  /* "rocksdb/_rocksdb.pyx":302
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 *     def create_filter(self, keys):             # <<<<<<<<<<<<<<
 *         cdef string dst
 *         cdef vector[Slice] c_keys
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBloomFilterPolicy_create_filte, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy, __pyx_n_s_create_filter, __pyx_t_3) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy);

  /* "rocksdb/_rocksdb.pyx":316
 *         return string_to_bytes(dst)
 * 
 *     def key_may_match(self, key, filter_):             # <<<<<<<<<<<<<<
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBloomFilterPolicy_key_may_matc, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy, __pyx_n_s_key_may_match, __pyx_t_3) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBloomFilterPolicy___reduce_cyt, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyBloomFilterPolicy___setstate_c, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":327
 *         return self.policy
 * 
 * BloomFilterPolicy = PyBloomFilterPolicy             # <<<<<<<<<<<<<<
 * #############################################
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BloomFilterPolicy, ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy)) < 0) __PYX_ERR(0, 327, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_15PyMergeOperator_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyMergeOperator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_15PyMergeOperator_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyMergeOperator___setstate_cytho, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_7PyCache_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyCache___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyCache, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyCache);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PyCache, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PyCache__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_7PyCache_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyCache___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyCache, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_PyCache);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10PyLRUCache_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyLRUCache___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10PyLRUCache_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyLRUCache___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":488
 *         return self.cache_ob
 * 
 * LRUCache = PyLRUCache             # <<<<<<<<<<<<<<
 * ###############################
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LRUCache, ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache)) < 0) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16PySliceTransform_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PySliceTransform___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16PySliceTransform_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PySliceTransform___setstate_cyth, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_14PyTableFactory_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyTableFactory___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_14PyTableFactory_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyTableFactory___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_22BlockBasedTableFactory_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BlockBasedTableFactory___reduce, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_22BlockBasedTableFactory_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BlockBasedTableFactory___setstat, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_17PlainTableFactory_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PlainTableFactory___reduce_cytho, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_17PlainTableFactory_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PlainTableFactory___setstate_cyt, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_17PyMemtableFactory_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyMemtableFactory___reduce_cytho, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_17PyMemtableFactory_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PyMemtableFactory___setstate_cyt, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_23SkipListMemtableFactory_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SkipListMemtableFactory___reduce, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_23SkipListMemtableFactory_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SkipListMemtableFactory___setsta, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_21VectorMemtableFactory_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_VectorMemtableFactory___reduce_c, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_21VectorMemtableFactory_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_VectorMemtableFactory___setstate, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HashSkipListMemtableFactory___re, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HashSkipListMemtableFactory___se, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HashLinkListMemtableFactory___re, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.factory cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HashLinkListMemtableFactory___se, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":745
 * 
 * cdef class CompressionType(object):
 *     no_compression = u'no_compression'             # <<<<<<<<<<<<<<
 *     snappy_compression = u'snappy_compression'
 *     zlib_compression = u'zlib_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_no_compression, __pyx_n_u_no_compression) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":746
 * cdef class CompressionType(object):
 *     no_compression = u'no_compression'
 *     snappy_compression = u'snappy_compression'             # <<<<<<<<<<<<<<
 *     zlib_compression = u'zlib_compression'
 *     bzip2_compression = u'bzip2_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_snappy_compression, __pyx_n_u_snappy_compression) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":747
 *     no_compression = u'no_compression'
 *     snappy_compression = u'snappy_compression'
 *     zlib_compression = u'zlib_compression'             # <<<<<<<<<<<<<<
 *     bzip2_compression = u'bzip2_compression'
 *     lz4_compression = u'lz4_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_zlib_compression, __pyx_n_u_zlib_compression) < 0) __PYX_ERR(0, 747, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":748
 *     snappy_compression = u'snappy_compression'
 *     zlib_compression = u'zlib_compression'
 *     bzip2_compression = u'bzip2_compression'             # <<<<<<<<<<<<<<
 *     lz4_compression = u'lz4_compression'
 *     lz4hc_compression = u'lz4hc_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_bzip2_compression, __pyx_n_u_bzip2_compression) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":749
 *     zlib_compression = u'zlib_compression'
 *     bzip2_compression = u'bzip2_compression'
 *     lz4_compression = u'lz4_compression'             # <<<<<<<<<<<<<<
 *     lz4hc_compression = u'lz4hc_compression'
 *     xpress_compression = u'xpress_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_lz4_compression, __pyx_n_u_lz4_compression) < 0) __PYX_ERR(0, 749, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":750
 *     bzip2_compression = u'bzip2_compression'
 *     lz4_compression = u'lz4_compression'
 *     lz4hc_compression = u'lz4hc_compression'             # <<<<<<<<<<<<<<
 *     xpress_compression = u'xpress_compression'
 *     zstd_compression = u'zstd_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_lz4hc_compression, __pyx_n_u_lz4hc_compression) < 0) __PYX_ERR(0, 750, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":751
 *     lz4_compression = u'lz4_compression'
 *     lz4hc_compression = u'lz4hc_compression'
 *     xpress_compression = u'xpress_compression'             # <<<<<<<<<<<<<<
 *     zstd_compression = u'zstd_compression'
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_xpress_compression, __pyx_n_u_xpress_compression) < 0) __PYX_ERR(0, 751, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":752
 *     lz4hc_compression = u'lz4hc_compression'
 *     xpress_compression = u'xpress_compression'
 *     zstd_compression = u'zstd_compression'             # <<<<<<<<<<<<<<
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'
 *     disable_compression = u'disable_compression'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_zstd_compression, __pyx_n_u_zstd_compression) < 0) __PYX_ERR(0, 752, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":753
 *     xpress_compression = u'xpress_compression'
 *     zstd_compression = u'zstd_compression'
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'             # <<<<<<<<<<<<<<
 *     disable_compression = u'disable_compression'
 * 
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_zstdnotfinal_compression, __pyx_n_u_zstdnotfinal_compression) < 0) __PYX_ERR(0, 753, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":754
 *     zstd_compression = u'zstd_compression'
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'
 *     disable_compression = u'disable_compression'             # <<<<<<<<<<<<<<
 * 
 * cdef class CompactionPri(object):
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_disable_compression, __pyx_n_u_disable_compression) < 0) __PYX_ERR(0, 754, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_15CompressionType_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CompressionType___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompressionType, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompressionType__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_15CompressionType_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CompressionType___setstate_cytho, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":757
 * 
 * cdef class CompactionPri(object):
 *     by_compensated_size = u'by_compensated_size'             # <<<<<<<<<<<<<<
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri, __pyx_n_s_by_compensated_size, __pyx_n_u_by_compensated_size) < 0) __PYX_ERR(0, 757, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":758
 * cdef class CompactionPri(object):
 *     by_compensated_size = u'by_compensated_size'
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'             # <<<<<<<<<<<<<<
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'
 *     min_overlapping_ratio = u'min_overlapping_ratio'
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri, __pyx_n_s_oldest_largest_seq_first, __pyx_n_u_oldest_largest_seq_first) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":759
 *     by_compensated_size = u'by_compensated_size'
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'             # <<<<<<<<<<<<<<
 *     min_overlapping_ratio = u'min_overlapping_ratio'
 * 
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri, __pyx_n_s_oldest_smallest_seq_first, __pyx_n_u_oldest_smallest_seq_first) < 0) __PYX_ERR(0, 759, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":760
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'
 *     min_overlapping_ratio = u'min_overlapping_ratio'             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri, __pyx_n_s_min_overlapping_ratio, __pyx_n_u_min_overlapping_ratio) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13CompactionPri_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CompactionPri___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CompactionPri, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CompactionPri__set_state(self, __pyx_state)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13CompactionPri_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CompactionPri___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ColumnFamilyHandle___reduce_cyt, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19_ColumnFamilyHandle_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ColumnFamilyHandle___setstate_c, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_18ColumnFamilyHandle_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ColumnFamilyHandle___reduce_cyth, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_18ColumnFamilyHandle_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ColumnFamilyHandle___setstate_cy, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19ColumnFamilyOptions_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ColumnFamilyOptions___reduce_cyt, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_19ColumnFamilyOptions_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ColumnFamilyOptions___setstate_c, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1322
 *             setattr(self, key, value)
 * 
 *     def IncreaseParallelism(self, int total_threads=16):             # <<<<<<<<<<<<<<
 *         self.opts.IncreaseParallelism(total_threads)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_7Options_7IncreaseParallelism, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Options_IncreaseParallelism, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__76);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_Options, __pyx_n_s_IncreaseParallelism, __pyx_t_3) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_Options);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_7Options_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Options___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_7Options_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Options___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_20TransactionDBOptions_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TransactionDBOptions___reduce_cy, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_20TransactionDBOptions_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TransactionDBOptions___setstate, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1876
 *             del self.batch
 * 
 *     def put(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_5put, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_put, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, __pyx_n_s_put, __pyx_t_3) < 0) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);

  /* "rocksdb/_rocksdb.pyx":1884
 *         self.batch.Put(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def merge(self, key, value):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_7merge, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_merge, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, __pyx_n_s_merge, __pyx_t_3) < 0) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);

  /* "rocksdb/_rocksdb.pyx":1892
 *         self.batch.Merge(cf_handle, bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def delete(self, key):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle = NULL
 *         if isinstance(key, tuple):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_9delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_delete, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, __pyx_n_s_delete, __pyx_t_3) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);

  /* "rocksdb/_rocksdb.pyx":1900
 *         self.batch.Delete(cf_handle, bytes_to_slice(key))
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.batch.Clear()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_11clear, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_clear, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, __pyx_n_s_clear, __pyx_t_3) < 0) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);

  /* "rocksdb/_rocksdb.pyx":1903
 *         self.batch.Clear()
 * 
 *     def data(self):             # <<<<<<<<<<<<<<
 *         return string_to_bytes(self.batch.Data())
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_13data, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_data, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, __pyx_n_s_data, __pyx_t_3) < 0) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);

  /* "rocksdb/_rocksdb.pyx":1906
 *         return string_to_bytes(self.batch.Data())
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self.batch.Count()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_15count, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_count, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, __pyx_n_s_count, __pyx_t_3) < 0) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10WriteBatch_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_18WriteBatchIterator_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatchIterator___reduce_cyth, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.items cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_18WriteBatchIterator_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatchIterator___setstate_cy, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2097
 *         self.opts.in_use = True
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_3close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_close, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__95);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_close, __pyx_t_3) < 0) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2130
 *         return [handle.weakref for handle in self.cf_handles]
 * 
 *     def get_column_family(self, bytes name):             # <<<<<<<<<<<<<<
 *         for handle in self.cf_handles:
 *             if handle.name == name:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_7get_column_family, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get_column_family, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_get_column_family, __pyx_t_3) < 0) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2135
 *                 return handle.weakref
 * 
 *     def put(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_9put, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_put, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__100);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_put, __pyx_t_3) < 0) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2159
 *         check_status(st)
 * 
 *     def delete(self, key, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_11delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_delete, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__100);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_delete, __pyx_t_3) < 0) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2182
 *         check_status(st)
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_13merge, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_merge, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__100);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_merge, __pyx_t_3) < 0) __PYX_ERR(0, 2182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2206
 *         check_status(st)
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False, ignore_missing_column_families=False, no_slowdown=False, low_pri=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_15write, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_write, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__100);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_write, __pyx_t_3) < 0) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2219
 *         check_status(st)
 * 
 *     def get(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string res
 *         cdef Status st
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_17get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_get, __pyx_t_3) < 0) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2246
 *             check_status(st)
 * 
 *     def multi_get(self, keys, *args, as_dict=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if as_dict:
 *             # Remove duplicate keys
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_as_dict, Py_True) < 0) __PYX_ERR(0, 2246, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_19multi_get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_multi_get, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_multi_get, __pyx_t_2) < 0) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2300
 *             return ret_list
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef cpp_bool value_found
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_21key_may_exist, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_key_may_exist, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__112);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_key_may_exist, __pyx_t_2) < 0) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2343
 *             return (exists, None)
 * 
 *     def iterkeys(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_23iterkeys, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_iterkeys, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__115);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_iterkeys, __pyx_t_2) < 0) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2357
 *         return it
 * 
 *     def itervalues(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_25itervalues, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_itervalues, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__115);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_itervalues, __pyx_t_2) < 0) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2372
 *         return it
 * 
 *     def iteritems(self, ColumnFamilyHandle column_family=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_27iteritems, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_iteritems, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__115);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_iteritems, __pyx_t_2) < 0) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2386
 *         return it
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_29iterskeys, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_iterskeys, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_iterskeys, __pyx_t_2) < 0) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2411
 *         return ret
 * 
 *     def itersvalues(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_31itersvalues, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_itersvalues, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_itersvalues, __pyx_t_2) < 0) __PYX_ERR(0, 2411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2435
 *         return ret
 * 
 *     def iterskeys(self, column_families, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[db.Iterator*] iters
 *         iters.resize(len(column_families))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_33iterskeys, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_iterskeys, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_iterskeys, __pyx_t_2) < 0) __PYX_ERR(0, 2435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2461
 *         return ret
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(self)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_35snapshot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_snapshot, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_snapshot, __pyx_t_2) < 0) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2464
 *         return Snapshot(self)
 * 
 *     def get_property(self, prop, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_37get_property, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get_property, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__115);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_get_property, __pyx_t_2) < 0) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2480
 *             return None
 * 
 *     def get_live_files_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_39get_live_files_metadata, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get_live_files_metadata, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_get_live_files_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 2480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2501
 *         return ret
 * 
 *     def get_column_family_meta_data(self, ColumnFamilyHandle column_family=None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyMetaData metadata
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_41get_column_family_meta_data, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get_column_family_meta_data, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__115);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_get_column_family_meta_data, __pyx_t_2) < 0) __PYX_ERR(0, 2501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2516
 *         }
 * 
 *     def compact_range(self, begin=None, end=None, ColumnFamilyHandle column_family=None, **py_options):             # <<<<<<<<<<<<<<
 *         cdef options.CompactRangeOptions c_options
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_43compact_range, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_compact_range, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__132);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_compact_range, __pyx_t_2) < 0) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2557
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *             verify_checksums=False,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_45_DB__parse_read_opts, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___parse_read_opts, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__135);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_DB__parse_read_opts, __pyx_t_2) < 0) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_DB__parse_read_opts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_DB__parse_read_opts, __pyx_t_3) < 0) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2609
 *             return self.opts
 * 
 *     def create_column_family(self, bytes name, ColumnFamilyOptions copts):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef Status st
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_47create_column_family, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_create_column_family, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_create_column_family, __pyx_t_3) < 0) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2632
 *         return handle.weakref
 * 
 *     def drop_column_family(self, ColumnFamilyHandle weak_handle not None):             # <<<<<<<<<<<<<<
 *         cdef db.ColumnFamilyHandle* cf_handle
 *         cdef ColumnFamilyOptions copts
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_49drop_column_family, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_drop_column_family, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_drop_column_family, __pyx_t_3) < 0) __PYX_ERR(0, 2632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":2651
 *             copts.in_use = False
 * 
 *     def try_catch_up_with_primary(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.wrapped_db.TryCatchUpWithPrimary()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_51try_catch_up_with_primary, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_try_catch_up_with_primary, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_try_catch_up_with_primary, __pyx_t_3) < 0) __PYX_ERR(0, 2651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_53__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_55__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2656
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_1repair_db, 0, __pyx_n_s_repair_db, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_repair_db, __pyx_t_3) < 0) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2665
 * 
 * 
 * def list_column_families(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_3list_column_families, 0, __pyx_n_s_list_column_families, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_column_families, __pyx_t_3) < 0) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2707
 *             return self.tdb_opts
 * 
 *     def close(self, safe=True):             # <<<<<<<<<<<<<<
 *         cdef ColumnFamilyOptions copts
 *         cdef cpp_bool c_safe = safe
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13TransactionDB_3close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TransactionDB_close, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__95);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB, __pyx_n_s_close, __pyx_t_3) < 0) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_TransactionDB);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13TransactionDB_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TransactionDB___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13TransactionDB_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TransactionDB___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_8Snapshot_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__150)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_8Snapshot_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2779
 *         return ret
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef object ret = self.get_ob()
 *         return ret
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_9get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator_get, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_n_s_get, __pyx_t_3) < 0) __PYX_ERR(0, 2779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);

  /* "rocksdb/_rocksdb.pyx":2783
 *         return ret
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return ReversedIterator(self)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___reversed, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_n_s_reversed, __pyx_t_3) < 0) __PYX_ERR(0, 2783, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);

  /* "rocksdb/_rocksdb.pyx":2786
 *         return ReversedIterator(self)
 * 
 *     cpdef seek_to_first(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToFirst()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator_seek_to_first, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_n_s_seek_to_first, __pyx_t_3) < 0) __PYX_ERR(0, 2786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);

  /* "rocksdb/_rocksdb.pyx":2791
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_to_last(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToLast()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator_seek_to_last, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_n_s_seek_to_last, __pyx_t_3) < 0) __PYX_ERR(0, 2791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);

  /* "rocksdb/_rocksdb.pyx":2796
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_17seek, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator_seek, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_n_s_seek, __pyx_t_3) < 0) __PYX_ERR(0, 2796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);

  /* "rocksdb/_rocksdb.pyx":2802
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator_seek_for_prev, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, __pyx_n_s_seek_for_prev, __pyx_t_3) < 0) __PYX_ERR(0, 2802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BaseIterator_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12KeysIterator_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_KeysIterator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12KeysIterator_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_KeysIterator___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_14ValuesIterator_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ValuesIterator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_14ValuesIterator_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ValuesIterator___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__165)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13ItemsIterator_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ItemsIterator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13ItemsIterator_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ItemsIterator___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2851
 *         self.it = it
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_first()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator_seek_to_first, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__168)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator, __pyx_n_s_seek_to_first, __pyx_t_3) < 0) __PYX_ERR(0, 2851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);

  /* "rocksdb/_rocksdb.pyx":2854
 *         self.it.seek_to_first()
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_last()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator_seek_to_last, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator, __pyx_n_s_seek_to_last, __pyx_t_3) < 0) __PYX_ERR(0, 2854, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);

  /* "rocksdb/_rocksdb.pyx":2857
 *         self.it.seek_to_last()
 * 
 *     def seek(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek(key)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_7seek, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator_seek, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator, __pyx_n_s_seek, __pyx_t_3) < 0) __PYX_ERR(0, 2857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);

  /* "rocksdb/_rocksdb.pyx":2860
 *         self.it.seek(key)
 * 
 *     def seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek_for_prev(key)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator_seek_for_prev, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__171)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator, __pyx_n_s_seek_for_prev, __pyx_t_3) < 0) __PYX_ERR(0, 2860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);

  /* "rocksdb/_rocksdb.pyx":2863
 *         self.it.seek_for_prev(key)
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         return self.it.get()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_11get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator_get, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator, __pyx_n_s_get, __pyx_t_3) < 0) __PYX_ERR(0, 2863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);

  /* "rocksdb/_rocksdb.pyx":2869
 *         return self
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return self.it
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator___reversed, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator, __pyx_n_s_reversed, __pyx_t_3) < 0) __PYX_ERR(0, 2869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__174)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_16ReversedIterator_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReversedIterator___setstate_cyth, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2900
 *                 del self.checkpoint
 * 
 *     def create_checkpoint(self, checkpoint_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_checkpoint_dir
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10Checkpoint_5create_checkpoint, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Checkpoint_create_checkpoint, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__177)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint, __pyx_n_s_create_checkpoint, __pyx_t_3) < 0) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_Checkpoint);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10Checkpoint_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Checkpoint___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_10Checkpoint_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Checkpoint___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__179)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":2931
 *                 del self.engine
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef cpp_bool c_flush_before_backup
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_5create_backup, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_create_backup, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__112);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_create_backup, __pyx_t_3) < 0) __PYX_ERR(0, 2931, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "rocksdb/_rocksdb.pyx":2941
 *         check_status(st)
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_restore_backup, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_restore_backup, __pyx_t_3) < 0) __PYX_ERR(0, 2941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "rocksdb/_rocksdb.pyx":2959
 *         check_status(st)
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_db_dir
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_restore_latest_back, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__185)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_restore_latest_backup, __pyx_t_3) < 0) __PYX_ERR(0, 2959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "rocksdb/_rocksdb.pyx":2972
 *         check_status(st)
 * 
 *     def stop_backup(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.engine.StopBackup()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_stop_backup, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__186)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_stop_backup, __pyx_t_3) < 0) __PYX_ERR(0, 2972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "rocksdb/_rocksdb.pyx":2976
 *             self.engine.StopBackup()
 * 
 *     def purge_old_backups(self, num_backups_to_keep):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef uint32_t c_num_backups_to_keep
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_purge_old_backups, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__188)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_purge_old_backups, __pyx_t_3) < 0) __PYX_ERR(0, 2976, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "rocksdb/_rocksdb.pyx":2986
 *         check_status(st)
 * 
 *     def delete_backup(self, backup_id):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_delete_backup, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__190)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_delete_backup, __pyx_t_3) < 0) __PYX_ERR(0, 2986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "rocksdb/_rocksdb.pyx":2997
 *         check_status(st)
 * 
 *     def get_backup_info(self):             # <<<<<<<<<<<<<<
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine_get_backup_info, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__192)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine, __pyx_n_s_get_backup_info, __pyx_t_3) < 0) __PYX_ERR(0, 2997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine___reduce_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__193)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_12BackupEngine_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BackupEngine___setstate_cython, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__194)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PyComparator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_5__pyx_unpickle_PyComparator, 0, __pyx_n_s_pyx_unpickle_PyComparator, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__196)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PyComparator, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PyComparator__set_state(<PyComparator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyComparator__set_state(PyComparator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_7__pyx_unpickle_PyFilterPolicy, 0, __pyx_n_s_pyx_unpickle_PyFilterPolicy, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__197)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PyFilterPolicy, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PyCache(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_9__pyx_unpickle_PyCache, 0, __pyx_n_s_pyx_unpickle_PyCache, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__198)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PyCache, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PyCache__set_state(<PyCache> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PyCache__set_state(PyCache __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_11__pyx_unpickle_CompressionType, 0, __pyx_n_s_pyx_unpickle_CompressionType, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__199)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_CompressionType, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CompactionPri(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7rocksdb_8_rocksdb_13__pyx_unpickle_CompactionPri, 0, __pyx_n_s_pyx_unpickle_CompactionPri, NULL, __pyx_n_s_rocksdb__rocksdb, __pyx_d, ((PyObject *)__pyx_codeobj__200)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_CompactionPri, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1
 * #cython: language_level=3             # <<<<<<<<<<<<<<
 * import cython
 * from libcpp.string cimport string
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init rocksdb._rocksdb", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rocksdb._rocksdb");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    #if Py_VERSION_HEX < 0x03090000
    vectorcallfunc f = _PyVectorcall_Function(func);
    #else
    vectorcallfunc f = PyVectorcall_Function(func);
    #endif
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
#endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value); // transfer ownership of value to values
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;  // ownership transferred to values
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL; // ownership transferred to values
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030D0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        __Pyx_GIVEREF(*p_left);
        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {
            __Pyx_GOTREF(*p_left);
            return NULL;
        }
        __Pyx_INCREF(*p_left);
        #if PY_VERSION_HEX >= 0x030D0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    PyObject* exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object does not support slice %.10s",
        obj_type_name, value ? "assignment" : "deletion");
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return -1;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* IterNext */
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    __Pyx_TypeName iterator_type_name = __Pyx_PyType_GetName(Py_TYPE(iterator));
    PyErr_Format(PyExc_TypeError,
        __Pyx_FMT_TYPENAME " object is not an iterator", iterator_type_name);
    __Pyx_DECREF_TypeName(iterator_type_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
        next = iternext(iterator);
        if (likely(next))
            return next;
#if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
#endif
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    PyObject *result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!PyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if defined(CYTHON_COMPILING_IN_PYPY)
#elif PY_VERSION_HEX >= 0x03090000
    if (PyCFunction_CheckExact(method))
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (unlikely(!abi_module)) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* pop_index */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(__Pyx_is_valid_index(cix, size))) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__15);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#if !CYTHON_USE_TYPE_SLOTS
        if (dictoffset == 0) {
            PyErr_Format(PyExc_TypeError,
                "extension type '%s.200s': "
                "unable to validate whether bases have a __dict__ "
                "when CYTHON_USE_TYPE_SLOTS is off "
                "(likely because you are building in the limited API). "
                "Therefore, all extension types with multiple bases "
                "must add 'cdef dict __dict__' in this compilation mode",
                type_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#else
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_2
#define __PYX_HAVE_RT_ImportType_3_0_2
static PyTypeObject *__Pyx_ImportType_3_0_2(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_2 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_2 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_2 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__16;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    PyErr_Clear();
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(uint32_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(uint32_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT)) {
                                return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint32_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT)) {
                                return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint32_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT)) {
                                return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(uint32_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(uint32_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint32_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint32_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(uint32_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint32_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (uint32_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (uint32_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (uint32_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (uint32_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (uint32_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(uint32_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((uint32_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(uint32_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((uint32_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((uint32_t) 1) << (sizeof(uint32_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int32_t neg_one = (int32_t) -1, const_zero = (int32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int32_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int32_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int32_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) >= 2 * PyLong_SHIFT)) {
                                return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int32_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) >= 3 * PyLong_SHIFT)) {
                                return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int32_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) >= 4 * PyLong_SHIFT)) {
                                return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int32_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int32_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int32_t) (((int32_t)-1)*(((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int32_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int32_t) ((((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int32_t) (((int32_t)-1)*(((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int32_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int32_t) ((((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int32_t) (((int32_t)-1)*(((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int32_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int32_t) ((((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int32_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int32_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int32_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int32_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int32_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int32_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int32_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int32_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int32_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int32_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int32_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int32_t) 1) << (sizeof(int32_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(uint32_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(uint64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(uint64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT)) {
                                return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT)) {
                                return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT)) {
                                return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(uint64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(uint64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (uint64_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (uint64_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (uint64_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (uint64_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (uint64_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(uint64_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((uint64_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(uint64_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((uint64_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((uint64_t) 1) << (sizeof(uint64_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        kwds = PyDict_New();
        if (!kwds) goto limited_bad;
        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(from_bytes);
        Py_XDECREF(py_bytes);
        Py_XDECREF(order_str);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(kwds);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                                return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                                return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                                return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int64_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int64_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int64_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int64_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int64_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int64_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int64_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int64_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int64_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int64_t) 1) << (sizeof(int64_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__201);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
