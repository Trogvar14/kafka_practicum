# consumer.py
from kafka import KafkaConsumer
import ssl
import os

cert_dir = "/app/client-creds"

print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞...")

# –ß–∏—Ç–∞–µ–º –∏–∑ topic-1 (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
print("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ topic-1 (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)...")
try:
    consumer1 = KafkaConsumer(
        'topic-1',
        bootstrap_servers=['kafka-0:9092', 'kafka-1:9092', 'kafka-2:9092'],
        security_protocol="SASL_SSL",
        ssl_cafile=os.path.join(cert_dir, 'ca.crt'),
        ssl_certfile=os.path.join(cert_dir, 'client.crt'),
        ssl_keyfile=os.path.join(cert_dir, 'client.key'),
        ssl_password='your-password',  # –º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
        sasl_mechanism='PLAIN',
        sasl_plain_username='consumer',
        sasl_plain_password='your-password',
        value_serializer=lambda v: v.encode('utf-8'),
        acks='all',
        retries=5,
        retry_backoff_ms=1000
    )

    for msg in consumer1:
        print(f"üì• topic-1: {msg.value.decode('utf-8')}")
        break  # –ü—Ä–æ—á–∏—Ç–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    consumer1.close()
    print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ topic-1 –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ topic-1: {e}")

# –ß–∏—Ç–∞–µ–º –∏–∑ topic-2 (–∑–∞–ø—Ä–µ—â–µ–Ω–æ)
print("\nüîí –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ topic-2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)...")
try:
    consumer2 = KafkaConsumer(
        'topic-2',
        bootstrap_servers=['kafka-0:9092', 'kafka-1:9092', 'kafka-2:9092'],
        security_protocol="SASL_SSL",
        ssl_cafile=os.path.join(cert_dir, 'ca.crt'),
        ssl_certfile=os.path.join(cert_dir, 'client.crt'),
        ssl_keyfile=os.path.join(cert_dir, 'client.key'),
        ssl_password='your-password',  # –º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
        sasl_mechanism='PLAIN',
        sasl_plain_username='consumer',
        sasl_plain_password='your-password',
        value_serializer=lambda v: v.encode('utf-8'),
        acks='all',
        retries=5,
        retry_backoff_ms=1000
    )

    for msg in consumer2:
        print(f"üì• topic-2: {msg.value.decode('utf-8')}")
        break
    consumer2.close()
    print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ!")
except Exception as e:
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å —á–∏—Ç–∞—Ç—å –∏–∑ topic-2 ‚Äî {type(e).__name__}: {e}")